0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 38 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 3A 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3C 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3E 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 40 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 42 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 46 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 48 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 4A 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4C 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 38 0C               LD   (RST08),HL   
0094   22 3A 0C               LD   (RST10),HL   
0097   22 3C 0C               LD   (RST18),HL   
009A   22 3E 0C               LD   (RST20),HL   
009D   22 40 0C               LD   (RST28),HL   
00A0   22 42 0C               LD   (RST30),HL   
00A3   22 46 0C               LD   (INTVEC),HL   
00A6   22 48 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 4A 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4C 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 10 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       Mondo Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   ; not FF, for Mondo
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Mondo)
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Mondo code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mondo and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 65 5C 40 5C 4C 3B   DB   "\\e\\@\\L;"   ; remembers last line edited
0187                EDIT_:       
0187   60 3F 60 3F 5C 50 5C 4C 3B 00 .CSTR   "`?`?\\P\\L;"   
0191                LIST_:       
0191   5C 4E 32 36 28 5C 69 40 36 35 2B 5C 4C 5C 74 40 30 3E 28 5C 4E 29 29 5C 50 3B 00 .CSTR   "\\N26(\\i@65+\\L\\t@0>(\\N))\\P;"   
01AC                PRINTSTACK_:      
01AC   5C 54 5C 50 3B 00      .CSTR   "\\T\\P;"   
01B2                IOPCODES:      
01B2                          ;*Macro unroll:  LITDAT 15
01B2   0F                     DB   15   
01B3   69                     DB   lsb(bang_)   ;   !
01B4   42                     DB   lsb(dquote_)   ;   "
01B5   CF                     DB   lsb(hash_)   ;    #
01B6   73                     DB   lsb(dollar_)   ;    $
01B7   47                     DB   lsb(percent_)   ;    %
01B8   00                     DB   lsb(amper_)   ;    &
01B9   3F                     DB   lsb(quote_)   ;    '
01BA   DE                     DB   lsb(lparen_)   ;    (
01BB   DE                     DB   lsb(rparen_)   ;    )
01BC   EF                     DB   lsb(star_)   ;    *
01BD   1D                     DB   lsb(plus_)   ;    +
01BE   39                     DB   lsb(comma_)   ;    ,
01BF   78                     DB   lsb(minus_)   ;    -
01C0   2E                     DB   lsb(dot_)   ;    .
01C1   F1                     DB   lsb(slash_)   ;    /	;/MOD
01C2                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C2   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01C3   E1                     DB   lsb(num_)   
01C4                          ;*Macro unroll:  LITDAT 7
01C4   07                     DB   7   
01C5   EA                     DB   lsb(colon_)   ;    :
01C6   4E                     DB   lsb(semi_)   ;    ;
01C7   9D                     DB   lsb(lt_)   ;    <
01C8   8D                     DB   lsb(eq_)   ;    =
01C9   99                     DB   lsb(gt_)   ;    >
01CA   02                     DB   lsb(question_)   ;    ?   ( -- val )  read a char from input
01CB   DE                     DB   lsb(at_)   ;    @
01CC                          ;*Macro unroll:  REPDAT 26, lsb(call_)		; call a command A, B ....Z
01CC   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01CD   24                     DB   lsb(call_)   
01CE                          ;*Macro unroll:  LITDAT 6
01CE   06                     DB   6   
01CF   E4                     DB   lsb(lbrack_)   ;    [
01D0   F3                     DB   lsb(bslash_)   ;    \
01D1   E7                     DB   lsb(rbrack_)   ;    ]
01D2   14                     DB   lsb(caret_)   ;    ^
01D3   ED                     DB   lsb(underscore_)   ;    _
01D4   C0                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01D5                          ;*Macro unroll:  REPDAT 26, lsb(var_)		; a b c .....z
01D5   9A                     DB   (26 | $80)   ; a b c .....z
01D6   AE                     DB   lsb(var_)   
01D7                          ;*Macro unroll:  LITDAT 4
01D7   04                     DB   4   
01D8   5C                     DB   lsb(lbrace_)   ;    {
01D9   0B                     DB   lsb(pipe_)   ;    |
01DA   61                     DB   lsb(rbrace_)   ;    }
01DB   55                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01DC                IALTCODES:      
01DC                          ;*Macro unroll:  REPDAT 32, lsb(aNop_)
01DC   A0                     DB   (32 | $80)   
01DD   08                     DB   lsb(aNop_)   
01DE                             ;!
01DE                             ;"  				
01DE                             ;#   				
01DE                             ;$  	
01DE                             ;%
01DE                             ;&
01DE                             ;'
01DE                             ;(
01DE                             ;)
01DE                             ;*
01DE                             ;+
01DE                             ;,
01DE                             ;-
01DE                             ;.
01DE                             ;/
01DE                             ;0
01DE                             ;1
01DE                             ;2
01DE                             ;3
01DE                             ;4
01DE                             ;5
01DE                             ;6
01DE                             ;7
01DE                             ;8
01DE                             ;9
01DE                             ;:
01DE                             ; 
01DE                             ;<
01DE                             ;=
01DE                             ;>
01DE                             ;?
01DE                             ;@
01DE                          ;*Macro unroll:  LITDAT 20
01DE   14                     DB   20   
01DF   08                     DB   lsb(aNop_)   ;A
01E0   08                     DB   lsb(aNop_)   ;B
01E1   08                     DB   lsb(aNop_)   ;C
01E2   1B                     DB   lsb(depth_)   ;D      num items on stack
01E3   29                     DB   lsb(emit_)   ;E      emit a char
01E4   08                     DB   lsb(aNop_)   ;F
01E5   42                     DB   lsb(go_)   ;G      execute Mondo code
01E6   08                     DB   lsb(aNop_)   ;H
01E7   57                     DB   lsb(inPort_)   ;I      input from port
01E8   08                     DB   lsb(aNop_)   ;J
01E9   08                     DB   lsb(aNop_)   ;K
01EA   38                     DB   lsb(editDef_)   ;L      edit line
01EB   08                     DB   lsb(aNop_)   ;M
01EC   62                     DB   lsb(newln_)   ;N      prints a newline to output
01ED   67                     DB   lsb(outPort_)   ;O      output to port
01EE   3D                     DB   lsb(prompt_)   ;P      print Mondo prompt
01EF   08                     DB   lsb(aNop_)   ;Q
01F0   08                     DB   lsb(aNop_)   ;R
01F1   0A                     DB   lsb(arrSize_)   ;S      array size
01F2   70                     DB   lsb(printStk_)   ;T      non-destructively prints stack
01F3                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01F3   83                     DB   (3 | $80)   
01F4   08                     DB   lsb(aNop_)   
01F5                             ;U
01F5                             ;V
01F5                             ;W
01F5                          ;*Macro unroll:  LITDAT 1
01F5   01                     DB   1   
01F6   30                     DB   lsb(exec_)   ;X      execute machine code
01F7                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01F7   83                     DB   (3 | $80)   
01F8   08                     DB   lsb(aNop_)   
01F9                             ;Y
01F9                             ;Z
01F9                             ;[
01F9                          ;*Macro unroll:  LITDAT 1
01F9   01                     DB   1   
01FA   12                     DB   lsb(comment_)   ;\      comment text, skips reading until end of line
01FB                          ;*Macro unroll:  REPDAT 4, lsb(aNop_)
01FB   84                     DB   (4 | $80)   
01FC   08                     DB   lsb(aNop_)   
01FD                             ; ]
01FD                             ; ^
01FD                             ; _
01FD                             ; `
01FD                          ;*Macro unroll:  REPDAT 26, lsb(altVar_)  ;a...z
01FD   9A                     DB   (26 | $80)   ;a...z
01FE   00                     DB   lsb(altVar_)   
01FF                          ;*Macro unroll:  ENDDAT
01FF   00                     DB   0   
0200                BACKSPACE:      
0200   79                     LD   a,c   
0201   B0                     OR   b   
0202   CA 2F 02               JP   z,interpret2   
0205   0B                     DEC   bc   
0206   CD AF 03               CALL   printStr   
0209   08 20 08 00            .CSTR   "\b \b"   
020D   C3 2F 02               JP   interpret2   
0210                START:       
0210   31 00 0A               LD   SP,DSTACK   ; start of Mondo
0213   CD D8 02               CALL   init   ; setups
0216   CD AF 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0219   4D 6F 6E 64 6F 20 30 2E 31 0D 0A 00 .CSTR   "Mondo 0.1\r\n"   
0225                INTERPRET:      
0225   CD 9F 03               CALL   prompt   
0228   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
022B   ED 43 A8 0C            LD   (vTIBPtr),BC   
022F                INTERPRET2:      ; calc nesting (a macro might have changed it)
022F   1E 00                  LD   E,0   ; initilize nesting value
0231   C5                     PUSH   BC   ; save offset into TIB,
0232                             ; BC is also the count of chars in TIB
0232   21 00 08               LD   hl,TIB   ; hl is start of TIB
0235   18 06                  JR   interpret4   
0237                INTERPRET3:      
0237   7E                     LD   A,(hl)   ; A = char in TIB
0238   23                     INC   hl   ; inc pointer into TIB
0239   0B                     DEC   BC   ; dec count of chars in TIB
023A   CD 73 03               CALL   nesting   ; update nesting value
023D                INTERPRET4:      
023D   79                     LD   A,C   ; is count zero?
023E   B0                     OR   B   
023F   20 F6                  JR   NZ,interpret3   ; if not loop
0241   C1                     POP   BC   ; restore offset into TIB
0242                             ; *******************************************************************
0242                             ; Wait for a character from the serial input (keyboard)
0242                             ; and store it in the text buffer. Keep accepting characters,
0242                             ; increasing the instruction pointer BC - until a newline received.
0242                             ; *******************************************************************
0242                WAITCHAR:      
0242   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0245   FE 20                  CP   $20   ; compare to space
0247   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0249   FE 00                  CP   $0   ; is it end of string? null end of string
024B   28 59                  JR   Z,waitchar4   
024D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
024F   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0251   FE 08                  CP   CTRL_H   
0253   28 AB                  JR   z,backSpace   
0255   16 01                  LD   d,msb(macros)   
0257   FE 05                  CP   CTRL_E   
0259   1E 87                  LD   e,lsb(edit_)   
025B   28 14                  JR   z,macro   
025D   FE 0A                  CP   CTRL_J   
025F   1E 80                  LD   e,lsb(reedit_)   
0261   28 0E                  JR   z,macro   
0263   FE 0C                  CP   CTRL_L   
0265   1E 91                  LD   e,lsb(list_)   
0267   28 08                  JR   z,macro   
0269   FE 10                  CP   CTRL_P   
026B   1E AC                  LD   e,lsb(printStack_)   
026D   28 02                  JR   z,macro   
026F   18 BE                  JR   interpret2   
0271                MACRO:       ;=25
0271   ED 43 A8 0C            LD   (vTIBPtr),BC   
0275   D5                     PUSH   de   
0276   CD DA 03               CALL   ENTER   ;Mondo go operation and jump to it
0279   5C 47 00               .CSTR   "\\G"   
027C   ED 4B A8 0C            LD   BC,(vTIBPtr)   
0280   18 AD                  JR   interpret2   
0282                WAITCHAR1:      
0282   21 00 08               LD   hl,TIB   
0285   09                     ADD   hl,BC   
0286   77                     LD   (hl),A   ; store the character in textbuf
0287   03                     INC   BC   
0288   CD 85 00               CALL   putchar   ; echo character to screen
028B   CD 73 03               CALL   nesting   
028E   18 B2                  JR   waitchar   ; wait for next character
0290                WAITCHAR3:      
0290   21 00 08               LD   hl,TIB   
0293   09                     ADD   hl,BC   
0294   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0296   23                     INC   hl   
0297   36 0A                  LD   (hl),"\n"   
0299   23                     INC   hl   ; ????
029A   03                     INC   BC   
029B   03                     INC   BC   
029C   CD A8 03               CALL   crlf   ; echo character to screen
029F   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02A0   B7                     OR   A   
02A1   20 9F                  JR   NZ,waitchar   
02A3   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02A5   03                     INC   BC   
02A6                WAITCHAR4:      
02A6   ED 43 A8 0C            LD   (vTIBPtr),BC   
02AA   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02AD   0B                     DEC   BC   
02AE                             ; ********************************************************************************
02AE                             ; 
02AE                             ; Dispatch Routine.
02AE                             ; 
02AE                             ; Get the next character and form a 1 byte jump address
02AE                             ; 
02AE                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
02AE                             ; jump to the selected function.
02AE                             ; 
02AE                             ; Individual handler routines will deal with each category:
02AE                             ; 
02AE                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02AE                             ; 
02AE                             ; 2. Detect characters a-z and jump to the variable handler routine
02AE                             ; 
02AE                             ; 3. All other characters are punctuation and cause a jump to the associated
02AE                             ; primitive code.
02AE                             ; 
02AE                             ; Instruction Pointer IP BC is incremented
02AE                             ; 
02AE                             ; *********************************************************************************
02AE                NEXT:        ; 
02AE   03                     INC   BC   ;       Increment the IP
02AF   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02B0   B7                     OR   a   ; is it NUL?
02B1   28 0F                  JR   z,exit   
02B3   FE 03                  CP   CTRL_C   
02B5   28 15                  JR   z,etx   
02B7   D6 21                  SUB   "!"   
02B9   38 F3                  JR   c,NEXT   
02BB   6F                     LD   L,A   ;       Index into table
02BC   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02BE   6E                     LD   L,(hl)   ;       get low jump address
02BF   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02C1   E9                     JP   (hl)   ;       Jump to routine
02C2                EXIT:        
02C2   03                     INC   BC   ; store offests into a table of bytes, smaller
02C3   50 59                  LD   de,BC   
02C5   CD CA 03               CALL   rpop   ; Restore Instruction pointer
02C8   44 4D                  LD   BC,hl   
02CA   EB                     EX   de,hl   
02CB   E9                     JP   (hl)   
02CC                ETX:         ;=12
02CC   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02CF   39                     ADD   hl,SP   
02D0   30 03                  JR   NC,etx1   
02D2   31 00 0A               LD   SP,DSTACK   
02D5                ETX1:        
02D5   C3 25 02               JP   interpret   
02D8                INIT:        ;=68
02D8   21 80 0A               LD   hl,LSTACK   
02DB   22 30 0C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
02DE   DD 21 80 09            LD   IX,RSTACK   
02E2   FD 21 AE 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02E6   21 82 0C               LD   hl,altVars   ; init altVars to 0
02E9   06 34                  LD   b,26 * 2   
02EB                INIT1:       
02EB   36 00                  LD   (hl),0   
02ED   23                     INC   hl   
02EE   10 FB                  DJNZ   init1   
02F0   21 00 0A               LD   hl,dStack   
02F3   22 82 0C               LD   (vS0),hl   
02F6   21 41 00               LD   hl,65   
02F9   22 8A 0C               LD   (vLastDef),hl   
02FC   21 1E 0D               LD   hl,HEAP   
02FF   22 90 0C               LD   (vHeapPtr),hl   
0302   21 B6 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
0305   54 5D                  LD   de,hl   
0307   13                     INC   de   
0308   36 00                  LD   (hl),0   
030A   01 68 00               LD   BC,VARS_SIZE   
030D   ED B0                  LDIR      
030F                INITOPS:      
030F   21 B2 01               LD   hl,iOpcodes   
0312   11 00 0B               LD   de,opcodes   
0315   01 00 01               LD   BC,256   
0318                INITOPS1:      
0318   7E                     LD   A,(hl)   
0319   23                     INC   hl   
031A   CB 27                  SLA   A   
031C   C8                     RET   Z   
031D   38 09                  JR   C,initOps2   
031F   CB 3F                  SRL   A   
0321   4F                     LD   C,A   
0322   06 00                  LD   B,0   
0324   ED B0                  LDIR      
0326   18 F0                  JR   initOps1   
0328                INITOPS2:      
0328   CB 3F                  SRL   A   
032A   47                     LD   B,A   
032B   7E                     LD   A,(hl)   
032C   23                     INC   hl   
032D                INITOPS2A:      
032D   12                     LD   (de),A   
032E   13                     INC   de   
032F   10 FC                  DJNZ   initOps2a   
0331   18 E5                  JR   initOps1   
0333                LOOKUPREF:      
0333   16 00                  LD   D,0   
0335                LOOKUPREF0:      
0335   FE 61                  CP   "a"   
0337   30 06                  JR   NC,lookupRef2   
0339                LOOKUPREF1:      
0339   D6 41                  SUB   "A"   
033B   1E 00                  LD   E,0   
033D   18 04                  JR   lookupRef3   
033F                LOOKUPREF2:      
033F   D6 61                  SUB   "a"   
0341   1E 34                  LD   E,26*2   
0343                LOOKUPREF3:      
0343   87                     ADD   A,A   
0344   83                     ADD   A,E   
0345   21 B6 0C               LD   hl,VARS   
0348   85                     ADD   A,L   
0349   6F                     LD   L,A   
034A   3E 00                  LD   A,0   
034C   8C                     ADC   A,H   
034D   67                     LD   H,A   
034E   22 A0 0C               LD   (vPointer),hl   ; store address in pointer
0351   AF                     XOR   A   
0352   B3                     OR   E   ; sets Z flag if A-Z
0353   C9                     RET      
0354                PRINTHEX:      ;=31
0354                             ; Display hl as a 16-bit number in hex.
0354   C5                     PUSH   BC   ; preserve the IP
0355   7C                     LD   A,H   
0356   CD 5F 03               CALL   printhex2   
0359   7D                     LD   A,L   
035A   CD 5F 03               CALL   printhex2   
035D   C1                     POP   BC   
035E   C9                     RET      
035F                PRINTHEX2:      
035F   4F                     LD   C,A   
0360   1F                     RRA      
0361   1F                     RRA      
0362   1F                     RRA      
0363   1F                     RRA      
0364   CD 68 03               CALL   printhex3   
0367   79                     LD   A,C   
0368                PRINTHEX3:      
0368   E6 0F                  AND   0x0F   
036A   C6 90                  ADD   A,0x90   
036C   27                     DAA      
036D   CE 40                  ADC   A,0x40   
036F   27                     DAA      
0370   C3 85 00               JP   putchar   
0373                             ; **************************************************************************
0373                             ; calculate nesting value
0373                             ; A is char to be tested,
0373                             ; E is the nesting value (initially 0)
0373                             ; E is increased by ( and [
0373                             ; E is decreased by ) and ]
0373                             ; E has its bit 7 toggled by `
0373                             ; limited to 127 levels
0373                             ; **************************************************************************
0373                NESTING:      ;=44
0373   FE 60                  CP   "`"   
0375   20 0A                  JR   NZ,nesting1   
0377   CB 7B                  BIT   7,E   
0379   28 03                  JR   Z,nesting1a   
037B   CB BB                  RES   7,E   
037D   C9                     RET      
037E                NESTING1A:      
037E   CB FB                  SET   7,E   
0380   C9                     RET      
0381                NESTING1:      
0381   CB 7B                  BIT   7,E   
0383   C0                     RET   NZ   
0384   FE 3A                  CP   ":"   
0386   28 08                  JR   Z,nesting2   
0388   FE 5B                  CP   "["   
038A   28 04                  JR   Z,nesting2   
038C   FE 28                  CP   "("   
038E   20 02                  JR   NZ,nesting3   
0390                NESTING2:      
0390   1C                     INC   E   
0391   C9                     RET      
0392                NESTING3:      
0392   FE 3B                  CP   ";"   
0394   28 07                  JR   Z,nesting4   
0396   FE 5D                  CP   "]"   
0398   28 03                  JR   Z,nesting4   
039A   FE 29                  CP   ")"   
039C   C0                     RET   NZ   
039D                NESTING4:      
039D   1D                     DEC   E   
039E   C9                     RET      
039F                PROMPT:      ;=9
039F   CD AF 03               CALL   printStr   
03A2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03A7   C9                     RET      
03A8                CRLF:        ;=7
03A8   CD AF 03               CALL   printStr   
03AB   0D 0A 00               .CSTR   "\r\n"   
03AE   C9                     RET      
03AF                PRINTSTR:      ;=7
03AF   E3                     EX   (SP),hl   ; swap			
03B0   CD BA 03               CALL   putStr   
03B3   23                     INC   hl   ; inc past null
03B4   E3                     EX   (SP),hl   ; put it back	
03B5   C9                     RET      
03B6                PUTSTR0:      ;=9
03B6   CD 85 00               CALL   putchar   
03B9   23                     INC   hl   
03BA                PUTSTR:      
03BA   7E                     LD   A,(hl)   
03BB   B7                     OR   A   
03BC   20 F8                  JR   NZ,putStr0   
03BE   C9                     RET      
03BF                RPUSH:       ;=11
03BF   DD 2B                  DEC   IX   
03C1   DD 74 00               LD   (IX+0),H   
03C4   DD 2B                  DEC   IX   
03C6   DD 75 00               LD   (IX+0),L   
03C9   C9                     RET      
03CA                RPOP:        ;=11
03CA   DD 6E 00               LD   L,(IX+0)   
03CD   DD 23                  INC   IX   
03CF   DD 66 00               LD   H,(IX+0)   
03D2   DD 23                  INC   IX   
03D4                RPOP2:       
03D4   C9                     RET      
03D5                WRITECHAR:      ;=5
03D5   77                     LD   (hl),A   
03D6   23                     INC   hl   
03D7   C3 85 00               JP   putchar   
03DA                ENTER:       ;=9
03DA   60 69                  LD   hl,BC   
03DC   CD BF 03               CALL   rpush   ; save Instruction Pointer
03DF   C1                     POP   BC   
03E0   0B                     DEC   BC   
03E1   FD E9                  JP   (IY)   
03E3                             ; **********************************************************************			
03E3                             ; Page 4 primitive routines
03E3                             ; **********************************************************************
03E3                          ALIGN   $100   
0400                PAGE4:       
0400                AMPER_:      
0400                AND_:        
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                PIPE_:       
040B                OR_:         
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                CARET_:      
0414                XOR_:        
0414   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0415   E1                     POP   hl   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                PLUS_:       ; add the top 2 members of the stack
041D                ADD_:        
041D   D1                     POP   de   
041E   E1                     POP   hl   
041F   19                     ADD   hl,de   
0420   E5                     PUSH   hl   
0421   C3 73 05               JP   carry   
0424                CALL_:       
0424   0A                     LD   A,(BC)   
0425   CD 39 03               CALL   lookupRef1   
0428   5E                     LD   E,(hl)   
0429   23                     INC   hl   
042A   56                     LD   D,(hl)   
042B   C3 43 06               JP   go1   
042E                DOT_:        
042E   E1                     POP   hl   
042F   CD 1E 07               CALL   printDec   
0432                DOT2:        
0432   3E 20                  LD   A," "   
0434   CD 85 00               CALL   putChar   
0437   FD E9                  JP   (IY)   
0439                COMMA_:      ; print hexadecimal
0439                HDOT_:       
0439   E1                     POP   hl   
043A   CD 54 03               CALL   printhex   
043D   18 F3                  JR   dot2   
043F                QUOTE_:      ; Discard the top member of the stack
043F                DROP_:       
043F   E1                     POP   hl   
0440   FD E9                  JP   (IY)   
0442                DQUOTE_:      
0442                DUP_:        
0442   E1                     POP   hl   ; Duplicate the top member of the stack
0443   E5                     PUSH   hl   
0444   E5                     PUSH   hl   
0445   FD E9                  JP   (IY)   
0447                PERCENT_:      
0447                OVER_:       
0447   E1                     POP   hl   ; Duplicate 2nd element of the stack
0448   D1                     POP   de   
0449   D5                     PUSH   de   
044A   E5                     PUSH   hl   
044B   D5                     PUSH   de   ; and push it to top of stack
044C   FD E9                  JP   (IY)   
044E                SEMI_:       
044E                RET_:        
044E   CD CA 03               CALL   rpop   ; Restore Instruction pointer
0451   44 4D                  LD   BC,hl   
0453   FD E9                  JP   (IY)   
0455                TILDE_:      ; a b c -- b c a
0455                ROTATE_:      
0455   D1                     POP   de   ; a b                   de = c
0456   E1                     POP   hl   ; a                     hl = b
0457   E3                     EX   (SP),hl   ; b                     hl = a
0458   D5                     PUSH   de   ; b c
0459   E5                     PUSH   hl   ; b c a
045A   FD E9                  JP   (IY)   
045C                             ;  Left shift { is multiply by 2		
045C                LBRACE_:      
045C                SHL_:        
045C   E1                     POP   hl   ; Duplicate the top member of the stack
045D   29                     ADD   hl,hl   
045E   E5                     PUSH   hl   ; shift left fallthrough into plus_
045F   FD E9                  JP   (IY)   ; 
0461                             ;  Right shift } is a divide by 2		
0461                RBRACE_:      
0461                SHR_:        
0461   E1                     POP   hl   ; Get the top member of the stack
0462                SHR1:        
0462   CB 3C                  SRL   H   
0464   CB 1D                  RR   L   
0466   E5                     PUSH   hl   
0467   FD E9                  JP   (IY)   ; 
0469                BANG_:       ; Store the value at the address placed on the top of the stack
0469                STORE_:      
0469                ASSIGN:      
0469   D1                     POP   de   ; discard last accessed value
046A   D1                     POP   de   ; de = new value
046B                ASSIGN0:      
046B   2A A0 0C               LD   hl,(vPointer)   ; hl = pointer
046E                ASSIGN1:      
046E   73                     LD   (hl),e   ; ignore byte mode to allow assigning to vByteMode
046F   23                     INC   hl   
0470   72                     LD   (hl),d   
0471   FD E9                  JP   (iy)   
0473                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0473                DOLLAR_:      
0473                SWAP_:       
0473   E1                     POP   hl   
0474   E3                     EX   (SP),hl   
0475   E5                     PUSH   hl   
0476   FD E9                  JP   (IY)   
0478                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0478                SUB_:        
0478   03                     INC   bc   ; check if sign of a number
0479   0A                     LD   a,(bc)   
047A   0B                     DEC   bc   
047B   FE 30                  CP   "0"   
047D   38 05                  JR   c,sub1   
047F   FE 3A                  CP   "9"+1   
0481   DA 90 06               JP   c,num   
0484                SUB1:        
0484   D1                     POP   de   ; 
0485   E1                     POP   hl   ;      Entry point for INVert
0486                SUB2:        
0486   A7                     AND   A   ;      Entry point for NEGate
0487   ED 52                  SBC   hl,de   ; 
0489   E5                     PUSH   hl   ; 
048A   C3 73 05               JP   carry   
048D                             ; 5
048D                EQ_:         
048D   E1                     POP   hl   
048E   D1                     POP   de   
048F   A7                     AND   A   ; reset the carry flag
0490   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0492   28 16                  JR   Z,equal   
0494   21 00 00               LD   hl,0   
0497   18 12                  JR   less   ; hl = 1
0499                GT_:         
0499   D1                     POP   de   
049A   E1                     POP   hl   
049B   18 02                  JR   cmp_   
049D                LT_:         
049D   E1                     POP   hl   
049E   D1                     POP   de   
049F                CMP_:        
049F   A7                     AND   A   ; reset the carry flag
04A0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A2   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04A4   21 00 00               LD   hl,0   
04A7   FA AB 04               JP   M,less   
04AA                EQUAL:       
04AA   2C                     INC   L   ; hl = 1
04AB                LESS:        
04AB   E5                     PUSH   hl   
04AC   FD E9                  JP   (IY)   
04AE                VAR_:        
04AE   0A                     LD   A,(BC)   
04AF   CD 3F 03               CALL   lookupRef2   
04B2                VAR1:        
04B2   16 00                  LD   d,0   
04B4   5E                     LD   e,(hl)   
04B5   3A 88 0C               LD   a,(vByteMode)   
04B8   3D                     DEC   a   ; is it byte?
04B9   28 02                  JR   z,var2   
04BB   23                     INC   hl   
04BC   56                     LD   d,(hl)   
04BD                VAR2:        
04BD   D5                     PUSH   de   
04BE   FD E9                  JP   (iy)   
04C0                GRAVE_:      
04C0                STR:         
04C0   03                     INC   BC   
04C1                STR1:        
04C1   0A                     LD   A,(BC)   
04C2   03                     INC   BC   
04C3   FE 60                  CP   "`"   ; ` is the string terminator
04C5   28 05                  JR   Z,str2   
04C7   CD 85 00               CALL   putchar   
04CA   18 F5                  JR   str1   
04CC                STR2:        
04CC   0B                     DEC   BC   
04CD   FD E9                  JP   (IY)   
04CF                HASH_:       
04CF                HEX:         
04CF   21 00 00               LD   hl,0   ; Clear hl to accept the number
04D2                HEX1:        
04D2   03                     INC   BC   
04D3   0A                     LD   A,(BC)   ; Get the character which is a numeral
04D4   CB 77                  BIT   6,A   ; is it uppercase alpha?
04D6   CA BC 07               JP   Z,hex2   ; no a decimal
04D9   D6 07                  SUB   7   ; sub 7  to make $A - $F
04DB   C3 BC 07               JP   hex2   
04DE                AT_:         ; Fetch the value from the address placed on the top of the stack
04DE                LPAREN_:      
04DE                RPAREN_:      
04DE                NOP_:        
04DE   C3 AE 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
04E1                NUM_:        
04E1   C3 90 06               JP   num   
04E4                LBRACK_:      
04E4   C3 66 07               JP   arrDef   
04E7                RBRACK_:      
04E7   C3 74 07               JP   arrEnd   
04EA                COLON_:      
04EA   C3 F0 06               JP   def   
04ED   18 1C        UNDERSCORE_:   JR   arrIndex   
04EF   18 21        STAR_:    JR   mul   
04F1   18 3B        SLASH_:   JR   div   
04F3                BSLASH_:      
04F3                             ;*******************************************************************
04F3                             ; Page 5 primitive routines
04F3                             ;*******************************************************************
04F3                             ;falls through
04F3                ALT:         ;=11
04F3   03                     INC   BC   
04F4   0A                     LD   A,(BC)   
04F5   21 5E 0B               LD   hl,altCodes   
04F8   D6 21                  SUB   "!"   
04FA   85                     ADD   A,L   
04FB   6F                     LD   L,A   
04FC                ALT2:        
04FC   7E                     LD   A,(hl)   ;       get low jump address
04FD   21 00 06               LD   hl,page6   
0500   6F                     LD   L,A   
0501   E9                     JP   (hl)   ;       Jump to routine
0502                QUESTION_:      
0502   CD 81 00               CALL   getchar   
0505   26 00                  LD   H,0   
0507   6F                     LD   L,A   
0508   E5                     PUSH   hl   
0509   FD E9                  JP   (IY)   
050B                ARRINDEX:      
050B   E1                     POP   hl   ; hl = index
050C   D1                     POP   de   ; de = array
050D   29                     ADD   hl,hl   ; if data width = 2 then double
050E   19                     ADD   hl,de   ; add addr
050F   E5                     PUSH   hl   
0510   FD E9                  JP   (iy)   
0512                MUL:         ;=19
0512   D1                     POP   de   ; get first value
0513   E1                     POP   hl   
0514   C5                     PUSH   BC   ; Preserve the IP
0515   44                     LD   B,H   ; BC = 2nd value
0516   4D                     LD   C,L   
0517   21 00 00               LD   hl,0   
051A   3E 10                  LD   A,16   
051C                MUL2:        
051C   29                     ADD   hl,hl   
051D   CB 13                  RL   E   
051F   CB 12                  RL   D   
0521   30 04                  JR   NC,$+6   
0523   09                     ADD   hl,BC   
0524   30 01                  JR   NC,$+3   
0526   13                     INC   de   
0527   3D                     DEC   A   
0528   20 F2                  JR   NZ,mul2   
052A   C1                     POP   BC   ; Restore the IP
052B   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
052C   FD E9                  JP   (IY)   
052E                DIV:         
052E   60 69                  LD   hl,bc   ; hl = IP
0530   C1                     POP   bc   ; bc = denominator
0531   E3                     EX   (sp),hl   ; save IP, hl = numerator
0532   7C                     LD   a,h   
0533   A8                     XOR   b   
0534   F5                     PUSH   af   
0535   A8                     XOR   b   
0536   F2 3F 05               JP   p,absBC   
0539                             ;absHL
0539   AF                     XOR   a   
053A   95                     SUB   l   
053B   6F                     LD   l,a   
053C   9F                     SBC   a,a   
053D   94                     SUB   h   
053E   67                     LD   h,a   
053F                ABSBC:       
053F   A8                     XOR   b   
0540   F2 49 05               JP   p,$+9   
0543   AF                     XOR   a   
0544   91                     SUB   c   
0545   4F                     LD   c,a   
0546   9F                     SBC   a,a   
0547   90                     SUB   b   
0548   47                     LD   b,a   
0549   29                     ADD   hl,hl   
054A   3E 0F                  LD   a,15   
054C   11 00 00               LD   de,0   
054F   EB                     EX   de,hl   
0550   18 04                  JR   jumpin   
0552                LOOP1:       
0552   09                     ADD   hl,bc   ;--
0553                LOOP2:       
0553   3D                     DEC   a   ;4
0554   28 0E                  JR   z,EndSDiv   ;12|7
0556                JUMPIN:      
0556   CB 23                  SLA   e   ;8
0558   CB 12                  RL   d   ;8
055A   ED 6A                  ADC   hl,hl   ;15
055C   ED 42                  SBC   hl,bc   ;15
055E   38 F2                  JR   c,Loop1   ;23-2b
0560   1C                     INC   e   ;--
0561   C3 53 05               JP   Loop2   ;--
0564                ENDSDIV:      
0564   F1                     POP   af   
0565   F2 6E 05               JP   p,div10   
0568   AF                     XOR   a   
0569   93                     SUB   e   
056A   5F                     LD   e,a   
056B   9F                     SBC   a,a   
056C   92                     SUB   d   
056D   57                     LD   d,a   
056E                DIV10:       
056E   C1                     POP   bc   
056F   D5                     PUSH   de   ; quotient
0570   E5                     PUSH   hl   ; remainder
0571   FD E9                  JP   (iy)   
0573                             ;=57
0573                CARRY:       ;=10
0573   21 00 00               LD   hl,0   
0576   CB 15                  RL   l   
0578   22 86 0C               LD   (vCarry),hl   
057B   FD E9                  JP   (iy)   
057D                             ; **************************************************************************
057D                             ; Page 6 Alt primitives
057D                             ; **************************************************************************
057D                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   D6 20                  SUB   "a" - ((altVars - mintVars)/2)   
0603   87                     ADD   A,A   
0604   26 0C                  LD   H,msb(mintVars)   
0606   6F                     LD   L,A   
0607   E5                     PUSH   hl   
0608                ANOP_:       
0608   FD E9                  JP   (IY)   
060A                ARRSIZE_:      
060A                ARRSIZE:      
060A   E1                     POP   hl   
060B   2B                     DEC   hl   ; msb size
060C   56                     LD   d,(hl)   
060D   2B                     DEC   hl   ; lsb size
060E   5E                     LD   e,(hl)   
060F   D5                     PUSH   de   
0610   FD E9                  JP   (iy)   
0612                COMMENT_:      
0612   03                     INC   BC   ; point to next char
0613   0A                     LD   A,(BC)   
0614   FE 0D                  CP   "\r"   ; terminate at cr
0616   20 FA                  JR   NZ,comment_   
0618   0B                     DEC   BC   
0619   FD E9                  JP   (IY)   
061B                DEPTH_:      
061B                DEPTH:       
061B   21 00 00               LD   hl,0   
061E   39                     ADD   hl,SP   
061F   EB                     EX   de,hl   
0620   21 00 0A               LD   hl,DSTACK   
0623   B7                     OR   A   
0624   ED 52                  SBC   hl,de   
0626   C3 62 04               JP   shr1   
0629                EMIT_:       
0629   E1                     POP   hl   
062A   7D                     LD   A,L   
062B   CD 85 00               CALL   putchar   
062E   FD E9                  JP   (IY)   
0630                EXEC_:       
0630   CD 35 06               CALL   exec1   
0633   FD E9                  JP   (IY)   
0635                EXEC1:       
0635   E1                     POP   hl   
0636   E3                     EX   (SP),hl   
0637   E9                     JP   (hl)   
0638                EDITDEF_:      
0638   CD C0 06               CALL   editDef   
063B   FD E9                  JP   (IY)   
063D                PROMPT_:      
063D   CD 9F 03               CALL   prompt   
0640   FD E9                  JP   (IY)   
0642                GO_:         ;\^
0642   D1                     POP   de   
0643                GO1:         
0643   7A                     LD   A,D   ; skip if destination address is null
0644   B3                     OR   E   
0645   28 0E                  JR   Z,go3   
0647   60 69                  LD   hl,BC   
0649   03                     INC   BC   ; read next char from source
064A   0A                     LD   A,(BC)   ; if ; to tail call optimise
064B   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
064D   28 03                  JR   Z,go2   
064F   CD BF 03               CALL   rpush   ; save Instruction Pointer
0652                GO2:         
0652   42 4B                  LD   BC,de   
0654   0B                     DEC   BC   
0655                GO3:         
0655   FD E9                  JP   (IY)   
0657                INPORT_:      ; \<
0657   E1                     POP   hl   
0658   79                     LD   A,C   
0659   4D                     LD   C,L   
065A   ED 68                  IN   L,(C)   
065C   26 00                  LD   H,0   
065E   4F                     LD   C,A   
065F   E5                     PUSH   hl   
0660   FD E9                  JP   (IY)   
0662                NEWLN_:      
0662   CD A8 03               CALL   crlf   
0665   FD E9                  JP   (IY)   
0667                OUTPORT_:      
0667   E1                     POP   hl   
0668   59                     LD   E,C   
0669   4D                     LD   C,L   
066A   E1                     POP   hl   
066B   ED 69                  OUT   (C),L   
066D   4B                     LD   C,E   
066E   FD E9                  JP   (IY)   
0670                PRINTSTK_:      
0670                PRINTSTK:      ;=40
0670                             ; Mondo: \a@2- \- 1- ("@ \b@ \(,)(.) 2-) '
0670   CD DA 03               CALL   ENTER   
0673   60 3D 3E 20 60 5C 61 40 32 2D 20 5C 2D 20 31 2D 28 22 40 2E 32 2D 29 27 5C 4E 00 .CSTR   "`=> `\\a@2- \\- 1-(",$22,"@.2-)'\\N"   
068E   FD E9                  JP   (IY)   
0690                             ;*******************************************************************
0690                             ; Page 5 primitive routines continued
0690                             ;*******************************************************************
0690                NUM:         
0690   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0693   0A                     LD   a,(bc)   ; Get numeral or -
0694   FE 2D                  CP   "-"   
0696   20 01                  JR   nz,num0   
0698   03                     INC   bc   ; move to next char, no flags affected
0699                NUM0:        
0699   08                     EX   af,af'   ; save zero flag = 0 for later
069A                NUM1:        
069A   0A                     LD   a,(bc)   ; read digit
069B   D6 30                  SUB   "0"   ; less than 0?
069D   38 13                  JR   c,num2   ; not a digit, exit loop
069F   FE 0A                  CP   10   ; greater that 9?
06A1   30 0F                  JR   nc,num2   ; not a digit, exit loop
06A3   03                     INC   bc   ; inc IP
06A4   54 5D                  LD   de,hl   ; multiply hl * 10
06A6   29                     ADD   hl,hl   
06A7   29                     ADD   hl,hl   
06A8   19                     ADD   hl,de   
06A9   29                     ADD   hl,hl   
06AA   85                     ADD   a,l   ; add digit in a to hl
06AB   6F                     LD   l,a   
06AC   3E 00                  LD   a,0   
06AE   8C                     ADC   a,h   
06AF   67                     LD   h,a   
06B0   18 E8                  JR   num1   
06B2                NUM2:        
06B2   0B                     DEC   bc   
06B3   08                     EX   af,af'   ; restore zero flag
06B4   20 07                  JR   nz,num3   
06B6   EB                     EX   de,hl   ; negate the value of hl
06B7   21 00 00               LD   hl,0   
06BA   B7                     OR   a   ; jump to sub2
06BB   ED 52                  SBC   hl,de   
06BD                NUM3:        
06BD   E5                     PUSH   hl   ; Put the number on the stack
06BE   FD E9                  JP   (iy)   ; and process the next character
06C0                             ;*******************************************************************
06C0                             ; Subroutines
06C0                             ;*******************************************************************
06C0                EDITDEF:      ;=50 lookup up def based on number
06C0   E1                     POP   hl   ; pop ret address
06C1   E3                     EX   (SP),hl   ; swap with TOS
06C2   7D                     LD   A,L   
06C3   08                     EX   AF,AF'   
06C4   7D                     LD   A,L   
06C5   CD 33 03               CALL   lookupRef   
06C8   5E                     LD   E,(hl)   
06C9   23                     INC   hl   
06CA   56                     LD   D,(hl)   
06CB   7A                     LD   A,D   
06CC   B3                     OR   E   
06CD   21 00 08               LD   hl,TIB   
06D0   28 14                  JR   Z,editDef3   
06D2   3E 3A                  LD   A,":"   
06D4   CD D5 03               CALL   writeChar   
06D7   08                     EX   AF,AF'   
06D8   CD D5 03               CALL   writeChar   
06DB   18 01                  JR   editDef2   
06DD                EDITDEF1:      
06DD   13                     INC   de   
06DE                EDITDEF2:      
06DE   1A                     LD   A,(de)   
06DF   CD D5 03               CALL   writeChar   
06E2   FE 3B                  CP   ";"   
06E4   20 F7                  JR   NZ,editDef1   
06E6                EDITDEF3:      
06E6   11 00 08               LD   de,TIB   
06E9   B7                     OR   A   
06EA   ED 52                  SBC   hl,de   
06EC   22 A8 0C               LD   (vTIBPtr),hl   
06EF   C9                     RET      
06F0                             ; **************************************************************************
06F0                             ; def is used to create a colon definition
06F0                             ; When a colon is detected, the next character (usually uppercase alpha)
06F0                             ; is looked up in the vector table to get its associated code field address
06F0                             ; This CFA is updated to point to the character after uppercase alpha
06F0                             ; The remainder of the characters are then skipped until after a semicolon
06F0                             ; is found.
06F0                             ; ***************************************************************************
06F0                DEF:         ; Create a colon definition
06F0   03                     INC   BC   
06F1   0A                     LD   A,(BC)   ; Get the next character
06F2   FE 3A                  CP   ":"   ; is it anonymouse
06F4   20 09                  JR   nz,def0   
06F6   03                     INC   BC   
06F7   ED 5B 90 0C            LD   de,(vHeapPtr)   ; return start of definition
06FB   D5                     PUSH   de   
06FC   C3 0D 07               JP   def1   
06FF                DEF0:        
06FF   32 8A 0C               LD   (vLastDef),A   
0702   CD 33 03               CALL   lookupRef   
0705   ED 5B 90 0C            LD   de,(vHeapPtr)   ; start of defintion
0709   73                     LD   (hl),E   ; Save low byte of address in CFA
070A   23                     INC   hl   
070B   72                     LD   (hl),D   ; Save high byte of address in CFA+1
070C   03                     INC   BC   
070D                DEF1:        ; Skip to end of definition
070D   0A                     LD   A,(BC)   ; Get the next character
070E   03                     INC   BC   ; Point to next character
070F   12                     LD   (de),A   
0710   13                     INC   de   
0711   FE 3B                  CP   ";"   ; Is it a semicolon
0713   28 02                  JR   Z,def2   ; end the definition
0715   18 F6                  JR   def1   ; get the next element
0717                DEF2:        
0717   0B                     DEC   BC   
0718                DEF3:        
0718   ED 53 90 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
071C   FD E9                  JP   (IY)   
071E                             ; hl = value
071E                PRINTDEC:      
071E   CB 7C                  BIT   7,h   
0720   28 0B                  JR   z,printDec2   
0722   3E 2D                  LD   a,"-"   
0724   CD 85 00               CALL   putchar   
0727   AF                     XOR   a   
0728   95                     SUB   l   
0729   6F                     LD   l,a   
072A   9F                     SBC   a,a   
072B   94                     SUB   h   
072C   67                     LD   h,a   
072D                PRINTDEC2:      
072D   C5                     PUSH   bc   
072E   0E 00                  LD   c,0   ; leading zeros flag = false
0730   11 F0 D8               LD   de,-10000   
0733   CD 4F 07               CALL   printDec4   
0736   11 18 FC               LD   de,-1000   
0739   CD 4F 07               CALL   printDec4   
073C   11 9C FF               LD   de,-100   
073F   CD 4F 07               CALL   printDec4   
0742   1E F6                  LD   e,-10   
0744   CD 4F 07               CALL   printDec4   
0747   0C                     INC   c   ; flag = true for at least digit
0748   1E FF                  LD   e,-1   
074A   CD 4F 07               CALL   printDec4   
074D   C1                     POP   bc   
074E   C9                     RET      
074F                PRINTDEC4:      
074F   06 2F                  LD   b,"0"-1   
0751                PRINTDEC5:      
0751   04                     INC   b   
0752   19                     ADD   hl,de   
0753   38 FC                  JR   c,printDec5   
0755   ED 52                  SBC   hl,de   
0757   3E 30                  LD   a,"0"   
0759   B8                     CP   b   
075A   20 05                  JR   nz,printDec6   
075C   AF                     XOR   a   
075D   B1                     OR   c   
075E   C8                     RET   z   
075F   18 01                  JR   printDec7   
0761                PRINTDEC6:      
0761   0C                     INC   c   
0762                PRINTDEC7:      
0762   78                     LD   a,b   
0763   C3 85 00               JP   putchar   
0766                ARRDEF:      
0766   3E 00                  LD   A,FALSE   
0768                ARRDEF1:      
0768   32 88 0C               LD   (vByteMode),A   
076B   21 00 00               LD   hl,0   
076E   39                     ADD   hl,sp   ; save
076F   CD BF 03               CALL   rpush   
0772   FD E9                  JP   (iy)   
0774                ARREND:      
0774   ED 43 34 0C            LD   (vTemp1),bc   ; save IP
0778   CD CA 03               CALL   rpop   
077B   22 36 0C               LD   (vTemp2),hl   ; save old SP
077E   54 5D                  LD   de,hl   ; de = hl = old SP
0780   B7                     OR   a   
0781   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0783   CB 3C                  SRL   h   ; num items = num bytes / 2
0785   CB 1D                  RR   l   
0787   44 4D                  LD   bc,hl   ; bc = count
0789   2A 90 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
078C   71                     LD   (hl),c   ; write num items in length word
078D   23                     INC   hl   
078E   70                     LD   (hl),b   
078F   23                     INC   hl   ; hl = array[0], bc = count
0790                             ; de = old SP, hl = array[0], bc = count
0790   18 11                  JR   arrayEnd2   
0792                ARRAYEND1:      
0792   0B                     DEC   bc   ; dec items count
0793   1B                     DEC   de   
0794   1B                     DEC   de   
0795   1A                     LD   a,(de)   ; a = lsb of stack item
0796   77                     LD   (hl),a   ; write lsb of array item
0797   23                     INC   hl   ; move to msb of array item
0798   3A 88 0C               LD   a,(vByteMode)   ; vByteMode=1?
079B   3D                     DEC   a   
079C   28 05                  JR   z,arrayEnd2   
079E   13                     INC   de   
079F   1A                     LD   a,(de)   ; a = msb of stack item
07A0   1B                     DEC   de   
07A1   77                     LD   (hl),a   ; write msb of array item
07A2   23                     INC   hl   ; move to next word in array
07A3                ARRAYEND2:      
07A3   79                     LD   a,c   ; if not zero loop
07A4   B0                     OR   b   
07A5   20 EB                  JR   nz,arrayEnd1   
07A7   EB                     EX   de,hl   ; de = end of array
07A8   2A 36 0C               LD   hl,(vTemp2)   
07AB   F9                     LD   sp,hl   ; SP = old SP
07AC   2A 90 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
07AF   23                     INC   hl   
07B0   23                     INC   hl   
07B1   E5                     PUSH   hl   ; return array[0]
07B2   ED 53 90 0C            LD   (vHeapPtr),de   ; move heap* to end of array
07B6   ED 4B 34 0C            LD   bc,(vTemp1)   ; restore IP
07BA   FD E9                  JP   (iy)   
07BC                             ; hex continued
07BC                HEX2:        
07BC   D6 30                  SUB   $30   ; Form decimal digit
07BE   DA B2 06               JP   C,num2   
07C1   FE 10                  CP   $0F+1   
07C3   D2 B2 06               JP   NC,num2   
07C6   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
07C7   29                     ADD   hl,hl   ; 4X
07C8   29                     ADD   hl,hl   ; 8X
07C9   29                     ADD   hl,hl   ; 16X
07CA   85                     ADD   A,L   ; add into bottom of hl
07CB   6F                     LD   L,A   ; 
07CC   C3 D2 04               JP   hex1   
07CF                DSIZE:    EQU   $80   
07CF                RSIZE:    EQU   $80   
07CF                LSIZE:    EQU   $80   
07CF                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07CF                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   $80-32-1-5   
0BB8                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                TBPTR:    DS   2   ; reserved for tests
0C34                VTEMP1:   DS   2   ; 
0C36                VTEMP2:   DS   2   ; 
0C38                RST08:    DS   2   
0C3A                RST10:    DS   2   
0C3C                RST18:    DS   2   
0C3E                RST20:    DS   2   
0C40                RST28:    DS   2   
0C42                RST30:    DS   2   ; 
0C44                BAUD:     DS   2   ; 
0C46                INTVEC:   DS   2   ; 
0C48                NMIVEC:   DS   2   ; 
0C4A                GETCVEC:   DS   2   ; 
0C4C                PUTCVEC:   DS   2   ; 
0C4E                          DS   26*2   
0C82                ALTVARS:      
0C82                VS0:      DS   2   ; a
0C84                VBASE16:   DS   2   ; b
0C86                VCARRY:   DS   2   ; c
0C88                VBYTEMODE:   DS   2   ; d
0C8A                VLASTDEF:   DS   2   ; e
0C8C                          DS   2   ; f
0C8E                          DS   2   ; g
0C90                VHEAPPTR:   DS   2   ; h
0C92                          DS   2   ; i
0C94                          DS   2   ; j
0C96                          DS   2   ; k
0C98                          DS   2   ; l
0C9A                          DS   2   ; m
0C9C                          DS   2   ; n
0C9E                          DS   2   ; o
0CA0                VPOINTER:   DS   2   ; p
0CA2                          DS   2   ; q
0CA4                          DS   2   ; r
0CA6                          DS   2   ; s
0CA8                VTIBPTR:   DS   2   ; t
0CAA                          DS   2   ; u
0CAC                          DS   2   ; v
0CAE                          DS   2   ; w
0CB0                          DS   2   ; x
0CB2                          DS   2   ; y
0CB4                          DS   2   ; z
0CB6                             ; .align $40
0CB6                VARS:     DS   VARS_SIZE   
0D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 41 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 47 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 49 IN MAIN.asm
EDIT_:              0187 DEFINED AT LINE 52 IN MAIN.asm
LIST_:              0191 DEFINED AT LINE 55 IN MAIN.asm
PRINTSTACK_:        01AC DEFINED AT LINE 58 IN MAIN.asm
IOPCODES:           01B2 DEFINED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
IALTCODES:          01DC DEFINED AT LINE 108 IN MAIN.asm
BACKSPACE:          0200 DEFINED AT LINE 192 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
START:              0210 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          0225 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
INTERPRET2:         022F DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
INTERPRET3:         0237 DEFINED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
INTERPRET4:         023D DEFINED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
WAITCHAR:           0242 DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
MACRO:              0271 DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
WAITCHAR1:          0282 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
WAITCHAR3:          0290 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
WAITCHAR4:          02A6 DEFINED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
NEXT:               02AE DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
EXIT:               02C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
ETX:                02CC DEFINED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
ETX1:               02D5 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
INIT:               02D8 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
INIT1:              02EB DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
INITOPS:            030F DEFINED AT LINE 378 IN MAIN.asm
INITOPS1:           0318 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
INITOPS2:           0328 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
INITOPS2A:          032D DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
LOOKUPREF:          0333 DEFINED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
LOOKUPREF0:         0335 DEFINED AT LINE 408 IN MAIN.asm
LOOKUPREF1:         0339 DEFINED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
LOOKUPREF2:         033F DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
LOOKUPREF3:         0343 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
PRINTHEX:           0354 DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
PRINTHEX2:          035F DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
PRINTHEX3:          0368 DEFINED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
NESTING:            0373 DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
NESTING1A:          037E DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
NESTING1:           0381 DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
NESTING2:           0390 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
NESTING3:           0392 DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
NESTING4:           039D DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
PROMPT:             039F DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
CRLF:               03A8 DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
PRINTSTR:           03AF DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
PUTSTR0:            03B6 DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
PUTSTR:             03BA DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
RPUSH:              03BF DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
RPOP:               03CA DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
RPOP2:              03D4 DEFINED AT LINE 538 IN MAIN.asm
WRITECHAR:          03D5 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
ENTER:              03DA DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 558 IN MAIN.asm
AMPER_:             0400 DEFINED AT LINE 560 IN MAIN.asm
AND_:               0400 DEFINED AT LINE 561 IN MAIN.asm
AND1:               0407 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
PIPE_:              040B DEFINED AT LINE 575 IN MAIN.asm
OR_:                040B DEFINED AT LINE 576 IN MAIN.asm
CARET_:             0414 DEFINED AT LINE 586 IN MAIN.asm
XOR_:               0414 DEFINED AT LINE 587 IN MAIN.asm
PLUS_:              041D DEFINED AT LINE 597 IN MAIN.asm
ADD_:               041D DEFINED AT LINE 598 IN MAIN.asm
CALL_:              0424 DEFINED AT LINE 605 IN MAIN.asm
DOT_:               042E DEFINED AT LINE 613 IN MAIN.asm
DOT2:               0432 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
COMMA_:             0439 DEFINED AT LINE 621 IN MAIN.asm
HDOT_:              0439 DEFINED AT LINE 622 IN MAIN.asm
QUOTE_:             043F DEFINED AT LINE 627 IN MAIN.asm
DROP_:              043F DEFINED AT LINE 628 IN MAIN.asm
DQUOTE_:            0442 DEFINED AT LINE 632 IN MAIN.asm
DUP_:               0442 DEFINED AT LINE 633 IN MAIN.asm
PERCENT_:           0447 DEFINED AT LINE 639 IN MAIN.asm
OVER_:              0447 DEFINED AT LINE 640 IN MAIN.asm
SEMI_:              044E DEFINED AT LINE 648 IN MAIN.asm
RET_:               044E DEFINED AT LINE 649 IN MAIN.asm
TILDE_:             0455 DEFINED AT LINE 654 IN MAIN.asm
ROTATE_:            0455 DEFINED AT LINE 655 IN MAIN.asm
LBRACE_:            045C DEFINED AT LINE 664 IN MAIN.asm
SHL_:               045C DEFINED AT LINE 665 IN MAIN.asm
RBRACE_:            0461 DEFINED AT LINE 672 IN MAIN.asm
SHR_:               0461 DEFINED AT LINE 673 IN MAIN.asm
SHR1:               0462 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
BANG_:              0469 DEFINED AT LINE 681 IN MAIN.asm
STORE_:             0469 DEFINED AT LINE 682 IN MAIN.asm
ASSIGN:             0469 DEFINED AT LINE 683 IN MAIN.asm
ASSIGN0:            046B DEFINED AT LINE 686 IN MAIN.asm
ASSIGN1:            046E DEFINED AT LINE 688 IN MAIN.asm
DOLLAR_:            0473 DEFINED AT LINE 695 IN MAIN.asm
SWAP_:              0473 DEFINED AT LINE 696 IN MAIN.asm
MINUS_:             0478 DEFINED AT LINE 702 IN MAIN.asm
SUB_:               0478 DEFINED AT LINE 703 IN MAIN.asm
SUB1:               0484 DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
SUB2:               0486 DEFINED AT LINE 714 IN MAIN.asm
EQ_:                048D DEFINED AT LINE 720 IN MAIN.asm
GT_:                0499 DEFINED AT LINE 729 IN MAIN.asm
LT_:                049D DEFINED AT LINE 734 IN MAIN.asm
CMP_:               049F DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
EQUAL:              04AA DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
LESS:               04AB DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
VAR_:               04AE DEFINED AT LINE 750 IN MAIN.asm
VAR1:               04B2 DEFINED AT LINE 753 IN MAIN.asm
VAR2:               04BD DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
GRAVE_:             04C0 DEFINED AT LINE 765 IN MAIN.asm
STR:                04C0 DEFINED AT LINE 766 IN MAIN.asm
STR1:               04C1 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
STR2:               04CC DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
HASH_:              04CF DEFINED AT LINE 780 IN MAIN.asm
HEX:                04CF DEFINED AT LINE 781 IN MAIN.asm
HEX1:               04D2 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
AT_:                04DE DEFINED AT LINE 791 IN MAIN.asm
LPAREN_:            04DE DEFINED AT LINE 792 IN MAIN.asm
RPAREN_:            04DE DEFINED AT LINE 793 IN MAIN.asm
NOP_:               04DE DEFINED AT LINE 794 IN MAIN.asm
NUM_:               04E1 DEFINED AT LINE 797 IN MAIN.asm
LBRACK_:            04E4 DEFINED AT LINE 799 IN MAIN.asm
RBRACK_:            04E7 DEFINED AT LINE 801 IN MAIN.asm
COLON_:             04EA DEFINED AT LINE 803 IN MAIN.asm
UNDERSCORE_:        04ED DEFINED AT LINE 806 IN MAIN.asm
STAR_:              04EF DEFINED AT LINE 807 IN MAIN.asm
SLASH_:             04F1 DEFINED AT LINE 808 IN MAIN.asm
BSLASH_:            04F3 DEFINED AT LINE 809 IN MAIN.asm
ALT:                04F3 DEFINED AT LINE 815 IN MAIN.asm
ALT2:               04FC DEFINED AT LINE 822 IN MAIN.asm
QUESTION_:          0502 DEFINED AT LINE 828 IN MAIN.asm
ARRINDEX:           050B DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
MUL:                0512 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
MUL2:               051C DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
DIV:                052E DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ABSBC:              053F DEFINED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
LOOP1:              0552 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
LOOP2:              0553 DEFINED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
JUMPIN:             0556 DEFINED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
ENDSDIV:            0564 DEFINED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
DIV10:              056E DEFINED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
CARRY:              0573 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
ALTVAR_:            0600 DEFINED AT LINE 938 IN MAIN.asm
ANOP_:              0608 DEFINED AT LINE 945 IN MAIN.asm
ARRSIZE_:           060A DEFINED AT LINE 948 IN MAIN.asm
ARRSIZE:            060A DEFINED AT LINE 949 IN MAIN.asm
COMMENT_:           0612 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
DEPTH_:             061B DEFINED AT LINE 966 IN MAIN.asm
DEPTH:              061B DEFINED AT LINE 967 IN MAIN.asm
EMIT_:              0629 DEFINED AT LINE 976 IN MAIN.asm
EXEC_:              0630 DEFINED AT LINE 982 IN MAIN.asm
EXEC1:              0635 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
EDITDEF_:           0638 DEFINED AT LINE 990 IN MAIN.asm
PROMPT_:            063D DEFINED AT LINE 994 IN MAIN.asm
GO_:                0642 DEFINED AT LINE 999 IN MAIN.asm
GO1:                0643 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
GO2:                0652 DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
GO3:                0655 DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
INPORT_:            0657 DEFINED AT LINE 1017 IN MAIN.asm
NEWLN_:             0662 DEFINED AT LINE 1027 IN MAIN.asm
OUTPORT_:           0667 DEFINED AT LINE 1031 IN MAIN.asm
PRINTSTK_:          0670 DEFINED AT LINE 1040 IN MAIN.asm
PRINTSTK:           0670 DEFINED AT LINE 1041 IN MAIN.asm
NUM:                0690 DEFINED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
NUM0:               0699 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
NUM1:               069A DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
NUM2:               06B2 DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
NUM3:               06BD DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
EDITDEF:            06C0 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
EDITDEF1:           06DD DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
EDITDEF2:           06DE DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
EDITDEF3:           06E6 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
DEF:                06F0 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DEF0:               06FF DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
DEF1:               070D DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
DEF2:               0717 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
DEF3:               0718 DEFINED AT LINE 1163 IN MAIN.asm
PRINTDEC:           071E DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
PRINTDEC2:          072D DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
PRINTDEC4:          074F DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
PRINTDEC5:          0751 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
PRINTDEC6:          0761 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
PRINTDEC7:          0762 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
ARRDEF:             0766 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
ARRDEF1:            0768 DEFINED AT LINE 1217 IN MAIN.asm
ARREND:             0774 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
ARRAYEND1:          0792 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
ARRAYEND2:          07A3 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
HEX2:               07BC DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 78 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 355 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 202 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 353 IN MAIN.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 380 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 818 IN MAIN.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 940 IN MAIN.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 354 IN MAIN.asm
TBPTR:              0C32 DEFINED AT LINE 31 IN ram.asm
VTEMP1:             0C34 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
VTEMP2:             0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
RST08:              0C38 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C3A DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3C DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C3E DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C40 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C42 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C44 DEFINED AT LINE 41 IN ram.asm
INTVEC:             0C46 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C48 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C4A DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4C DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C82 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
VS0:                0C82 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 365 IN MAIN.asm
VBASE16:            0C84 DEFINED AT LINE 51 IN ram.asm
VCARRY:             0C86 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 928 IN MAIN.asm
VBYTEMODE:          0C88 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
VLASTDEF:           0C8A DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
VHEAPPTR:           0C90 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
VPOINTER:           0CA0 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
VTIBPTR:            0CA8 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
VARS:               0CB6 DEFINED AT LINE 78 IN ram.asm
                    > USED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
HEAP:               0D1E DEFINED AT LINE 80 IN ram.asm
                    > USED AT LINE 368 IN MAIN.asm
