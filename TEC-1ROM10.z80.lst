0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 38 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 3A 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3C 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3E 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 40 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 42 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 46 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 48 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 4A 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4C 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 38 0C               LD   (RST08),HL   
0094   22 3A 0C               LD   (RST10),HL   
0097   22 3C 0C               LD   (RST18),HL   
009A   22 3E 0C               LD   (RST20),HL   
009D   22 40 0C               LD   (RST28),HL   
00A0   22 42 0C               LD   (RST30),HL   
00A3   22 46 0C               LD   (INTVEC),HL   
00A6   22 48 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 4A 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4C 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 08 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       Mondo Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   ; not FF, for Mondo
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Mondo)
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Mondo code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mondo and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 65 5C 40 5C 4C 3B   DB   "\\e\\@\\L;"   ; remembers last line edited
0187                EDIT_:       
0187   60 3F 60 3F 5C 50 5C 4C 3B 00 .CSTR   "`?`?\\P\\L;"   
0191                LIST_:       
0191   5C 4E 32 36 28 5C 69 40 36 35 2B 5C 4C 5C 74 40 30 3E 28 5C 4E 29 29 5C 50 3B 00 .CSTR   "\\N26(\\i@65+\\L\\t@0>(\\N))\\P;"   
01AC                PRINTSTACK_:      
01AC   5C 54 5C 50 3B 00      .CSTR   "\\T\\P;"   
01B2                IOPCODES:      
01B2                          ;*Macro unroll:  LITDAT 15
01B2   0F                     DB   15   
01B3   69                     DB   lsb(bang_)   ;   !
01B4   42                     DB   lsb(dquote_)   ;   "
01B5   E2                     DB   lsb(hash_)   ;    #
01B6   73                     DB   lsb(dollar_)   ;    $
01B7   47                     DB   lsb(percent_)   ;    %
01B8   00                     DB   lsb(amper_)   ;    &
01B9   3F                     DB   lsb(quote_)   ;    '
01BA   D2                     DB   lsb(lparen_)   ;    (
01BB   D2                     DB   lsb(rparen_)   ;    )
01BC   E4                     DB   lsb(star_)   ;    *
01BD   1D                     DB   lsb(plus_)   ;    +
01BE   39                     DB   lsb(comma_)   ;    ,
01BF   78                     DB   lsb(minus_)   ;    -
01C0   2E                     DB   lsb(dot_)   ;    .
01C1   E6                     DB   lsb(slash_)   ;    /	;/MOD
01C2                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C2   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01C3   D5                     DB   lsb(num_)   
01C4                          ;*Macro unroll:  LITDAT 7
01C4   07                     DB   7   
01C5   DB                     DB   lsb(colon_)   ;    :
01C6   4E                     DB   lsb(semi_)   ;    ;
01C7   9D                     DB   lsb(lt_)   ;    <
01C8   8D                     DB   lsb(eq_)   ;    =
01C9   99                     DB   lsb(gt_)   ;    >
01CA   17                     DB   lsb(question_)   ;    ?   ( -- val )  read a char from input
01CB   D2                     DB   lsb(at_)   ;    @
01CC                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command A, B ....Z
01CC   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01CD   24                     DB   lsb(call_)   
01CE                          ;*Macro unroll:  LITDAT 6
01CE   06                     DB   6   
01CF   DE                     DB   lsb(lbrack_)   ;    [
01D0   E8                     DB   lsb(bslash_)   ;    \
01D1   D8                     DB   lsb(rbrack_)   ;    ]
01D2   14                     DB   lsb(caret_)   ;    ^
01D3   E0                     DB   lsb(underscore_)   ;    _
01D4   C3                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01D5                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01D5   9A                     DB   (26 | $80)   ; a b c .....z
01D6   AE                     DB   lsb(var_)   
01D7                          ;*Macro unroll:  LITDAT 4
01D7   04                     DB   4   
01D8   5C                     DB   lsb(lbrace_)   ;    {
01D9   0B                     DB   lsb(pipe_)   ;    |
01DA   61                     DB   lsb(rbrace_)   ;    }
01DB   55                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01DC                IALTCODES:      
01DC                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01DC   83                     DB   (3 | $80)   
01DD   06                     DB   lsb(aNop_)   
01DE                             ;A
01DE                             ;B
01DE                             ;C
01DE                          ;*Macro unroll:  LITDAT 17
01DE   11                     DB   17   
01DF   08                     DB   lsb(depth_)   ;D      num items on stack
01E0   16                     DB   lsb(emit_)   ;E      emit a char
01E1   06                     DB   lsb(aNop_)   ;F
01E2   2F                     DB   lsb(go_)   ;G      execute Mondo code
01E3   06                     DB   lsb(aNop_)   ;H
01E4   44                     DB   lsb(inPort_)   ;I      input from port
01E5   06                     DB   lsb(aNop_)   ;J
01E6   06                     DB   lsb(aNop_)   ;K
01E7   25                     DB   lsb(editDef_)   ;L      edit line
01E8   06                     DB   lsb(aNop_)   ;M
01E9   4F                     DB   lsb(newln_)   ;N      prints a newline to output
01EA   54                     DB   lsb(outPort_)   ;O      output to port
01EB   2A                     DB   lsb(prompt_)   ;P      print Mondo prompt
01EC   06                     DB   lsb(aNop_)   ;Q
01ED   06                     DB   lsb(aNop_)   ;R
01EE   00                     DB   lsb(arrSize_)   ;S      array size
01EF   5D                     DB   lsb(printStk_)   ;T      non-destructively prints stack
01F0                          ;*Macro unroll:  REPDAT 2, lsb(aNop_)
01F0   82                     DB   (2 | $80)   
01F1   06                     DB   lsb(aNop_)   
01F2                             ;U
01F2                             ;V
01F2                             ;W
01F2                          ;*Macro unroll:  LITDAT 2
01F2   02                     DB   2   
01F3   7D                     DB   lsb(while_)   ;W      while
01F4   1D                     DB   lsb(exec_)   ;X      execute machine code
01F5                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01F5   83                     DB   (3 | $80)   
01F6   06                     DB   lsb(aNop_)   
01F7                             ;Y
01F7                             ;Z
01F7                          ;*Macro unroll:  ENDDAT
01F7   00                     DB   0   
01F8                BACKSPACE:      
01F8   79                     LD   a,c   
01F9   B0                     OR   b   
01FA   CA 27 02               JP   z,interpret2   
01FD   0B                     DEC   bc   
01FE   CD C9 03               CALL   printStr   
0201   08 20 08 00            .CSTR   "\b \b"   
0205   C3 27 02               JP   interpret2   
0208                START:       
0208   31 00 0A               LD   SP,DSTACK   ; start of Mondo
020B   CD D0 02               CALL   init   ; setups
020E   CD C9 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0211   4D 6F 6E 64 6F 20 30 2E 31 0D 0A 00 .CSTR   "Mondo 0.1\r\n"   
021D                INTERPRET:      
021D   CD B9 03               CALL   prompt   
0220   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
0223   ED 43 A8 0C            LD   (vTIBPtr),BC   
0227                INTERPRET2:      ; calc nesting (a macro might have changed it)
0227   1E 00                  LD   E,0   ; initilize nesting value
0229   C5                     PUSH   BC   ; save offset into TIB,
022A                             ; BC is also the count of chars in TIB
022A   21 00 08               LD   hl,TIB   ; hl is start of TIB
022D   18 06                  JR   interpret4   
022F                INTERPRET3:      
022F   7E                     LD   A,(hl)   ; A = char in TIB
0230   23                     INC   hl   ; inc pointer into TIB
0231   0B                     DEC   BC   ; dec count of chars in TIB
0232   CD 8D 03               CALL   nesting   ; update nesting value
0235                INTERPRET4:      
0235   79                     LD   A,C   ; is count zero?
0236   B0                     OR   B   
0237   20 F6                  JR   NZ,interpret3   ; if not loop
0239   C1                     POP   BC   ; restore offset into TIB
023A                             ; *******************************************************************
023A                             ; Wait for a character from the serial input (keyboard)
023A                             ; and store it in the text buffer. Keep accepting characters,
023A                             ; increasing the instruction pointer BC - until a newline received.
023A                             ; *******************************************************************
023A                WAITCHAR:      
023A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
023D   FE 20                  CP   $20   ; compare to space
023F   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0241   FE 00                  CP   $0   ; is it end of string? null end of string
0243   28 59                  JR   Z,waitchar4   
0245   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0247   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0249   FE 08                  CP   CTRL_H   
024B   28 AB                  JR   z,backSpace   
024D   16 01                  LD   d,msb(macros)   
024F   FE 05                  CP   CTRL_E   
0251   1E 87                  LD   e,lsb(edit_)   
0253   28 14                  JR   z,macro   
0255   FE 0A                  CP   CTRL_J   
0257   1E 80                  LD   e,lsb(reedit_)   
0259   28 0E                  JR   z,macro   
025B   FE 0C                  CP   CTRL_L   
025D   1E 91                  LD   e,lsb(list_)   
025F   28 08                  JR   z,macro   
0261   FE 10                  CP   CTRL_P   
0263   1E AC                  LD   e,lsb(printStack_)   
0265   28 02                  JR   z,macro   
0267   18 BE                  JR   interpret2   
0269                MACRO:       ;=25
0269   ED 43 A8 0C            LD   (vTIBPtr),BC   
026D   D5                     PUSH   de   
026E   CD F4 03               CALL   ENTER   ;Mondo go operation and jump to it
0271   5C 47 00               .CSTR   "\\G"   
0274   ED 4B A8 0C            LD   BC,(vTIBPtr)   
0278   18 AD                  JR   interpret2   
027A                WAITCHAR1:      
027A   21 00 08               LD   hl,TIB   
027D   09                     ADD   hl,BC   
027E   77                     LD   (hl),A   ; store the character in textbuf
027F   03                     INC   BC   
0280   CD 85 00               CALL   putchar   ; echo character to screen
0283   CD 8D 03               CALL   nesting   
0286   18 B2                  JR   waitchar   ; wait for next character
0288                WAITCHAR3:      
0288   21 00 08               LD   hl,TIB   
028B   09                     ADD   hl,BC   
028C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
028E   23                     INC   hl   
028F   36 0A                  LD   (hl),"\n"   
0291   23                     INC   hl   ; ????
0292   03                     INC   BC   
0293   03                     INC   BC   
0294   CD C2 03               CALL   crlf   ; echo character to screen
0297   7B                     LD   A,E   ; if zero nesting append and ETX after \r
0298   B7                     OR   A   
0299   20 9F                  JR   NZ,waitchar   
029B   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
029D   03                     INC   BC   
029E                WAITCHAR4:      
029E   ED 43 A8 0C            LD   (vTIBPtr),BC   
02A2   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02A5   0B                     DEC   BC   
02A6                             ; ********************************************************************************
02A6                             ; 
02A6                             ; Dispatch Routine.
02A6                             ; 
02A6                             ; Get the next character and form a 1 byte jump address
02A6                             ; 
02A6                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
02A6                             ; jump to the selected function.
02A6                             ; 
02A6                             ; Individual handler routines will deal with each category:
02A6                             ; 
02A6                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02A6                             ; 
02A6                             ; 2. Detect characters a-z and jump to the variable handler routine
02A6                             ; 
02A6                             ; 3. All other characters are punctuation and cause a jump to the associated
02A6                             ; primitive code.
02A6                             ; 
02A6                             ; Instruction Pointer IP BC is incremented
02A6                             ; 
02A6                             ; *********************************************************************************
02A6                NEXT:        ; 
02A6   03                     INC   BC   ;       Increment the IP
02A7   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02A8   B7                     OR   a   ; is it NUL?
02A9   28 0F                  JR   z,exit   
02AB   FE 03                  CP   CTRL_C   
02AD   28 15                  JR   z,etx   
02AF   D6 21                  SUB   "!"   
02B1   38 F3                  JR   c,NEXT   
02B3   6F                     LD   L,A   ;       Index into table
02B4   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02B6   6E                     LD   L,(hl)   ;       get low jump address
02B7   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02B9   E9                     JP   (hl)   ;       Jump to routine
02BA                EXIT:        
02BA   03                     INC   BC   ; store offests into a table of bytes, smaller
02BB   50 59                  LD   de,BC   
02BD   CD E4 03               CALL   rpop   ; Restore Instruction pointer
02C0   44 4D                  LD   BC,hl   
02C2   EB                     EX   de,hl   
02C3   E9                     JP   (hl)   
02C4                ETX:         ;=12
02C4   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02C7   39                     ADD   hl,SP   
02C8   30 03                  JR   NC,etx1   
02CA   31 00 0A               LD   SP,DSTACK   
02CD                ETX1:        
02CD   C3 1D 02               JP   interpret   
02D0                INIT:        ;=68
02D0   21 80 0A               LD   hl,LSTACK   
02D3   22 30 0C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
02D6   DD 21 80 09            LD   ix,RSTACK   
02DA   FD 21 A6 02            LD   iy,NEXT   ; iy provides a faster jump to NEXT
02DE   21 82 0C               LD   hl,altVars   ; init altVars to 0
02E1   06 34                  LD   b,26 * 2   
02E3                INIT1:       
02E3   36 00                  LD   (hl),0   
02E5   23                     INC   hl   
02E6   10 FB                  DJNZ   init1   
02E8   21 00 0A               LD   hl,dStack   
02EB   22 82 0C               LD   (vS0),hl   
02EE   21 41 00               LD   hl,65   
02F1   22 8A 0C               LD   (vLastDef),hl   
02F4   21 1E 0D               LD   hl,HEAP   
02F7   22 90 0C               LD   (vHeapPtr),hl   
02FA   21 B6 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
02FD   54 5D                  LD   de,hl   
02FF   13                     INC   de   
0300   36 00                  LD   (hl),0   
0302   01 68 00               LD   BC,VARS_SIZE   
0305   ED B0                  LDIR      
0307                INITOPS:      
0307   21 B2 01               LD   hl,iOpcodes   
030A   11 00 0B               LD   de,opcodes   
030D   01 00 01               LD   BC,256   
0310                INITOPS1:      
0310   7E                     LD   A,(hl)   
0311   23                     INC   hl   
0312   CB 27                  SLA   A   
0314   C8                     RET   Z   
0315   38 09                  JR   C,initOps2   
0317   CB 3F                  SRL   A   
0319   4F                     LD   C,A   
031A   06 00                  LD   B,0   
031C   ED B0                  LDIR      
031E   18 F0                  JR   initOps1   
0320                INITOPS2:      
0320   CB 3F                  SRL   A   
0322   47                     LD   B,A   
0323   7E                     LD   A,(hl)   
0324   23                     INC   hl   
0325                INITOPS2A:      
0325   12                     LD   (de),A   
0326   13                     INC   de   
0327   10 FC                  DJNZ   initOps2a   
0329   18 E5                  JR   initOps1   
032B                LOOKUP:      
032B   D6 41                  SUB   "A"   
032D   18 02                  JR   lookup2   
032F                LOOKUP1:      
032F   D6 2D                  SUB   "a" - 26*2   
0331                LOOKUP2:      
0331   87                     ADD   A,A   
0332   21 B6 0C               LD   hl,VARS   
0335   85                     ADD   A,L   
0336   6F                     LD   L,A   
0337   3E 00                  LD   A,0   
0339   8C                     ADC   A,H   
033A   67                     LD   H,A   
033B   AF                     XOR   A   
033C   B3                     OR   E   ; sets Z flag if A-Z
033D   C9                     RET      
033E                PRINTHEX:      ;=31
033E                             ; Display hl as a 16-bit number in hex.
033E   C5                     PUSH   BC   ; preserve the IP
033F   7C                     LD   A,H   
0340   CD 49 03               CALL   printhex2   
0343   7D                     LD   A,L   
0344   CD 49 03               CALL   printhex2   
0347   C1                     POP   BC   
0348   C9                     RET      
0349                PRINTHEX2:      
0349   4F                     LD   C,A   
034A   1F                     RRA      
034B   1F                     RRA      
034C   1F                     RRA      
034D   1F                     RRA      
034E   CD 52 03               CALL   printhex3   
0351   79                     LD   A,C   
0352                PRINTHEX3:      
0352   E6 0F                  AND   0x0F   
0354   C6 90                  ADD   A,0x90   
0356   27                     DAA      
0357   CE 40                  ADC   A,0x40   
0359   27                     DAA      
035A   C3 85 00               JP   putchar   
035D                EDITDEF:      ;=50 lookup up def based on number
035D   E1                     POP   hl   ; pop ret address
035E   E3                     EX   (SP),hl   ; swap with TOS
035F   7D                     LD   A,L   
0360   08                     EX   AF,AF'   
0361   7D                     LD   A,L   
0362   CD 2B 03               CALL   lookup   
0365   5E                     LD   E,(hl)   
0366   23                     INC   hl   
0367   56                     LD   D,(hl)   
0368   7A                     LD   A,D   
0369   B3                     OR   E   
036A   21 00 08               LD   hl,TIB   
036D   28 14                  JR   Z,editDef3   
036F   3E 3A                  LD   A,":"   
0371   CD EF 03               CALL   writeChar   
0374   08                     EX   AF,AF'   
0375   CD EF 03               CALL   writeChar   
0378   18 01                  JR   editDef2   
037A                EDITDEF1:      
037A   13                     INC   de   
037B                EDITDEF2:      
037B   1A                     LD   A,(de)   
037C   CD EF 03               CALL   writeChar   
037F   FE 3B                  CP   ";"   
0381   20 F7                  JR   NZ,editDef1   
0383                EDITDEF3:      
0383   11 00 08               LD   de,TIB   
0386   B7                     OR   A   
0387   ED 52                  SBC   hl,de   
0389   22 A8 0C               LD   (vTIBPtr),hl   
038C   C9                     RET      
038D                             ; **************************************************************************
038D                             ; calculate nesting value
038D                             ; A is char to be tested,
038D                             ; E is the nesting value (initially 0)
038D                             ; E is increased by ( and [
038D                             ; E is decreased by ) and ]
038D                             ; E has its bit 7 toggled by `
038D                             ; limited to 127 levels
038D                             ; **************************************************************************
038D                NESTING:      ;=44
038D   FE 60                  CP   "`"   
038F   20 0A                  JR   NZ,nesting1   
0391   CB 7B                  BIT   7,E   
0393   28 03                  JR   Z,nesting1a   
0395   CB BB                  RES   7,E   
0397   C9                     RET      
0398                NESTING1A:      
0398   CB FB                  SET   7,E   
039A   C9                     RET      
039B                NESTING1:      
039B   CB 7B                  BIT   7,E   
039D   C0                     RET   NZ   
039E   FE 3A                  CP   ":"   
03A0   28 08                  JR   Z,nesting2   
03A2   FE 5B                  CP   "["   
03A4   28 04                  JR   Z,nesting2   
03A6   FE 28                  CP   "("   
03A8   20 02                  JR   NZ,nesting3   
03AA                NESTING2:      
03AA   1C                     INC   E   
03AB   C9                     RET      
03AC                NESTING3:      
03AC   FE 3B                  CP   ";"   
03AE   28 07                  JR   Z,nesting4   
03B0   FE 5D                  CP   "]"   
03B2   28 03                  JR   Z,nesting4   
03B4   FE 29                  CP   ")"   
03B6   C0                     RET   NZ   
03B7                NESTING4:      
03B7   1D                     DEC   E   
03B8   C9                     RET      
03B9                PROMPT:      ;=9
03B9   CD C9 03               CALL   printStr   
03BC   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03C1   C9                     RET      
03C2                CRLF:        ;=7
03C2   CD C9 03               CALL   printStr   
03C5   0D 0A 00               .CSTR   "\r\n"   
03C8   C9                     RET      
03C9                PRINTSTR:      ;=7
03C9   E3                     EX   (SP),hl   ; swap			
03CA   CD D4 03               CALL   putStr   
03CD   23                     INC   hl   ; inc past null
03CE   E3                     EX   (SP),hl   ; put it back	
03CF   C9                     RET      
03D0                PUTSTR0:      ;=9
03D0   CD 85 00               CALL   putchar   
03D3   23                     INC   hl   
03D4                PUTSTR:      
03D4   7E                     LD   A,(hl)   
03D5   B7                     OR   A   
03D6   20 F8                  JR   NZ,putStr0   
03D8   C9                     RET      
03D9                RPUSH:       ;=11
03D9   DD 2B                  DEC   ix   
03DB   DD 74 00               LD   (ix+0),H   
03DE   DD 2B                  DEC   ix   
03E0   DD 75 00               LD   (ix+0),L   
03E3   C9                     RET      
03E4                RPOP:        ;=11
03E4   DD 6E 00               LD   L,(ix+0)   
03E7   DD 23                  INC   ix   
03E9   DD 66 00               LD   H,(ix+0)   
03EC   DD 23                  INC   ix   
03EE                RPOP2:       
03EE   C9                     RET      
03EF                WRITECHAR:      ;=5
03EF   77                     LD   (hl),A   
03F0   23                     INC   hl   
03F1   C3 85 00               JP   putchar   
03F4                ENTER:       ;=9
03F4   60 69                  LD   hl,BC   
03F6   CD D9 03               CALL   rpush   ; save Instruction Pointer
03F9   C1                     POP   BC   
03FA   0B                     DEC   BC   
03FB   FD E9                  JP   (iy)   
03FD                             ; **********************************************************************			
03FD                             ; Page 4 primitive routines
03FD                             ; **********************************************************************
03FD                          ALIGN   $100   
0400                PAGE4:       
0400                AMPER_:      
0400                AND_:        
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (iy)   ; 
040B                             ; 
040B                PIPE_:       
040B                OR_:         
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                CARET_:      
0414                XOR_:        
0414   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0415   E1                     POP   hl   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                PLUS_:       ; add the top 2 members of the stack
041D                ADD_:        
041D   D1                     POP   de   
041E   E1                     POP   hl   
041F   19                     ADD   hl,de   
0420   E5                     PUSH   hl   
0421   C3 AC 05               JP   carry   
0424                CALL_:       
0424   0A                     LD   A,(BC)   
0425   CD 2B 03               CALL   lookup   
0428   5E                     LD   E,(hl)   
0429   23                     INC   hl   
042A   56                     LD   D,(hl)   
042B   C3 30 06               JP   go1   
042E                DOT_:        
042E   E1                     POP   hl   
042F   CD E5 06               CALL   printDec   
0432                DOT2:        
0432   3E 20                  LD   A," "   
0434   CD 85 00               CALL   putChar   
0437   FD E9                  JP   (iy)   
0439                COMMA_:      ; print hexadecimal
0439                HDOT_:       
0439   E1                     POP   hl   
043A   CD 3E 03               CALL   printhex   
043D   18 F3                  JR   dot2   
043F                QUOTE_:      ; Discard the top member of the stack
043F                DROP_:       
043F   E1                     POP   hl   
0440   FD E9                  JP   (iy)   
0442                DQUOTE_:      
0442                DUP_:        
0442   E1                     POP   hl   ; Duplicate the top member of the stack
0443   E5                     PUSH   hl   
0444   E5                     PUSH   hl   
0445   FD E9                  JP   (iy)   
0447                PERCENT_:      
0447                OVER_:       
0447   E1                     POP   hl   ; Duplicate 2nd element of the stack
0448   D1                     POP   de   
0449   D5                     PUSH   de   
044A   E5                     PUSH   hl   
044B   D5                     PUSH   de   ; and push it to top of stack
044C   FD E9                  JP   (iy)   
044E                SEMI_:       
044E                RET_:        
044E   CD E4 03               CALL   rpop   ; Restore Instruction pointer
0451   44 4D                  LD   BC,hl   
0453   FD E9                  JP   (iy)   
0455                TILDE_:      ; a b c -- b c a
0455                ROTATE_:      
0455   D1                     POP   de   ; a b                   de = c
0456   E1                     POP   hl   ; a                     hl = b
0457   E3                     EX   (SP),hl   ; b                     hl = a
0458   D5                     PUSH   de   ; b c
0459   E5                     PUSH   hl   ; b c a
045A   FD E9                  JP   (iy)   
045C                             ;  Left shift { is multiply by 2		
045C                LBRACE_:      
045C                SHL_:        
045C   E1                     POP   hl   ; Duplicate the top member of the stack
045D   29                     ADD   hl,hl   
045E   E5                     PUSH   hl   ; shift left fallthrough into plus_
045F   FD E9                  JP   (iy)   ; 
0461                             ;  Right shift } is a divide by 2		
0461                RBRACE_:      
0461                SHR_:        
0461   E1                     POP   hl   ; Get the top member of the stack
0462                SHR1:        
0462   CB 3C                  SRL   H   
0464   CB 1D                  RR   L   
0466   E5                     PUSH   hl   
0467   FD E9                  JP   (iy)   ; 
0469                BANG_:       ; Store the value at the address placed on the top of the stack
0469                STORE_:      
0469                ASSIGN:      
0469   D1                     POP   de   ; discard last accessed value
046A   D1                     POP   de   ; de = new value
046B                ASSIGN0:      
046B   2A A0 0C               LD   hl,(vPointer)   ; hl = pointer
046E                ASSIGN1:      
046E   73                     LD   (hl),e   ; ignore byte mode to allow assigning to vByteMode
046F   23                     INC   hl   
0470   72                     LD   (hl),d   
0471   FD E9                  JP   (iy)   
0473                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0473                DOLLAR_:      
0473                SWAP_:       
0473   E1                     POP   hl   
0474   E3                     EX   (SP),hl   
0475   E5                     PUSH   hl   
0476   FD E9                  JP   (iy)   
0478                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0478                SUB_:        
0478   03                     INC   bc   ; check if sign of a number
0479   0A                     LD   a,(bc)   
047A   0B                     DEC   bc   
047B   FE 30                  CP   "0"   
047D   38 05                  JR   c,sub1   
047F   FE 3A                  CP   "9"+1   
0481   DA B5 06               JP   c,num   
0484                SUB1:        
0484   D1                     POP   de   ; 
0485   E1                     POP   hl   ;      Entry point for INVert
0486                SUB2:        
0486   A7                     AND   A   ;      Entry point for NEGate
0487   ED 52                  SBC   hl,de   ; 
0489   E5                     PUSH   hl   ; 
048A   C3 AC 05               JP   carry   
048D                             ; 5
048D                EQ_:         
048D   E1                     POP   hl   
048E   D1                     POP   de   
048F   A7                     AND   A   ; reset the carry flag
0490   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0492   28 16                  JR   Z,equal   
0494   21 00 00               LD   hl,0   
0497   18 12                  JR   less   ; hl = 1
0499                GT_:         
0499   D1                     POP   de   
049A   E1                     POP   hl   
049B   18 02                  JR   cmp_   
049D                LT_:         
049D   E1                     POP   hl   
049E   D1                     POP   de   
049F                CMP_:        
049F   A7                     AND   A   ; reset the carry flag
04A0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A2   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04A4   21 00 00               LD   hl,0   
04A7   FA AB 04               JP   M,less   
04AA                EQUAL:       
04AA   2C                     INC   L   ; hl = 1
04AB                LESS:        
04AB   E5                     PUSH   hl   
04AC   FD E9                  JP   (iy)   
04AE                VAR_:        
04AE   0A                     LD   A,(BC)   
04AF   CD 2F 03               CALL   lookup1   
04B2                VAR1:        
04B2   22 A0 0C               LD   (vPointer),hl   
04B5   16 00                  LD   d,0   
04B7   5E                     LD   e,(hl)   
04B8   3A 88 0C               LD   a,(vByteMode)   
04BB   3D                     DEC   a   ; is it byte?
04BC   28 02                  JR   z,var2   
04BE   23                     INC   hl   
04BF   56                     LD   d,(hl)   
04C0                VAR2:        
04C0   D5                     PUSH   de   
04C1   FD E9                  JP   (iy)   
04C3                GRAVE_:      
04C3                STR:         
04C3   03                     INC   BC   
04C4                STR1:        
04C4   0A                     LD   A,(BC)   
04C5   03                     INC   BC   
04C6   FE 60                  CP   "`"   ; ` is the string terminator
04C8   28 05                  JR   Z,str2   
04CA   CD 85 00               CALL   putchar   
04CD   18 F5                  JR   str1   
04CF                STR2:        
04CF   0B                     DEC   BC   
04D0   FD E9                  JP   (iy)   
04D2                AT_:         ; Fetch the value from the address placed on the top of the stack
04D2                LPAREN_:      
04D2                RPAREN_:      
04D2                NOP_:        
04D2   C3 A6 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
04D5                NUM_:        
04D5   C3 B5 06               JP   num   
04D8                RBRACK_:      
04D8   C3 B6 05               JP   arrEnd   
04DB                COLON_:      
04DB   C3 87 06               JP   def   
04DE                LBRACK_:      
04DE   18 2E                  JR   arrDef   
04E0                UNDERSCORE_:      
04E0   18 3E                  JR   arrAccess   
04E2                HASH_:       
04E2   18 49                  JR   hex   
04E4                STAR_:       
04E4   18 65                  JR   mul   
04E6                SLASH_:      
04E6   18 7F                  JR   div   
04E8                BSLASH_:      
04E8                             ;*******************************************************************
04E8                             ; Page 5 primitive routines
04E8                             ;*******************************************************************
04E8                             ;falls through
04E8                ALT:         ;=11
04E8   03                     INC   BC   
04E9   0A                     LD   A,(BC)   
04EA   FE 5C                  CP   BSLASH   
04EC   CA 43 07               JP   z,comment   
04EF   FE 61                  CP   "a"   
04F1   30 04                  JR   nc,alt2   
04F3   FE 41                  CP   "A"   
04F5   18 0B                  JR   alt3   
04F7                ALT2:        
04F7   D6 61                  SUB   "a"   
04F9   87                     ADD   A,A   
04FA   21 82 0C               LD   hl,altVars   
04FD   85                     ADD   a,l   
04FE   6F                     LD   l,a   
04FF   C3 B2 04               JP   var1   
0502                ALT3:        
0502   21 5E 0B               LD   hl,altCodes   
0505   D6 41                  SUB   "A"   
0507   85                     ADD   a,l   
0508   6F                     LD   l,a   
0509   7E                     LD   a,(hl)   ;       get low jump address
050A   26 06                  LD   h,msb(page6)   
050C   6F                     LD   L,A   
050D   E9                     JP   (hl)   ;       Jump to routine
050E                ARRDEF:      
050E   21 00 00               LD   hl,0   
0511   39                     ADD   hl,sp   ; save
0512   CD D9 03               CALL   rpush   
0515   FD E9                  JP   (iy)   
0517                QUESTION_:      
0517   CD 81 00               CALL   getchar   
051A   26 00                  LD   H,0   
051C   6F                     LD   L,A   
051D   E5                     PUSH   hl   
051E   FD E9                  JP   (iy)   
0520                ARRACCESS:      
0520   E1                     POP   hl   ; hl = index
0521   D1                     POP   de   ; de = array
0522   3A 88 0C               LD   a,(vByteMode)   ; a = data width
0525   3D                     DEC   a   
0526   28 01                  JR   z,arrAccess1   
0528                ARRACCESS0:      
0528   29                     ADD   hl,hl   ; if data width = 2 then double
0529                ARRACCESS1:      
0529   19                     ADD   hl,de   ; add addr
052A   C3 B2 04               JP   var1   
052D                HEX:         
052D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0530                HEX1:        
0530   03                     INC   BC   
0531   0A                     LD   A,(BC)   ; Get the character which is a numeral
0532   CB 77                  BIT   6,A   ; is it uppercase alpha?
0534   CA 39 05               JP   Z,hex2   ; no a decimal
0537   D6 07                  SUB   7   ; sub 7  to make $A - $F
0539                HEX2:        
0539   D6 30                  SUB   $30   ; Form decimal digit
053B   DA D7 06               JP   C,num2   
053E   FE 10                  CP   $0F+1   
0540   D2 D7 06               JP   NC,num2   
0543   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0544   29                     ADD   hl,hl   ; 4X
0545   29                     ADD   hl,hl   ; 8X
0546   29                     ADD   hl,hl   ; 16X
0547   85                     ADD   A,L   ; add into bottom of hl
0548   6F                     LD   L,A   ; 
0549   18 E5                  JR   hex1   
054B                MUL:         ;=19
054B   D1                     POP   de   ; get first value
054C   E1                     POP   hl   
054D   C5                     PUSH   BC   ; Preserve the IP
054E   44                     LD   B,H   ; BC = 2nd value
054F   4D                     LD   C,L   
0550   21 00 00               LD   hl,0   
0553   3E 10                  LD   A,16   
0555                MUL2:        
0555   29                     ADD   hl,hl   
0556   CB 13                  RL   E   
0558   CB 12                  RL   D   
055A   30 04                  JR   NC,$+6   
055C   09                     ADD   hl,BC   
055D   30 01                  JR   NC,$+3   
055F   13                     INC   de   
0560   3D                     DEC   A   
0561   20 F2                  JR   NZ,mul2   
0563   C1                     POP   BC   ; Restore the IP
0564   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0565   FD E9                  JP   (iy)   
0567                DIV:         
0567   60 69                  LD   hl,bc   ; hl = IP
0569   C1                     POP   bc   ; bc = denominator
056A   E3                     EX   (sp),hl   ; save IP, hl = numerator
056B   7C                     LD   a,h   
056C   A8                     XOR   b   
056D   F5                     PUSH   af   
056E   A8                     XOR   b   
056F   F2 78 05               JP   p,absBC   
0572                             ;absHL
0572   AF                     XOR   a   
0573   95                     SUB   l   
0574   6F                     LD   l,a   
0575   9F                     SBC   a,a   
0576   94                     SUB   h   
0577   67                     LD   h,a   
0578                ABSBC:       
0578   A8                     XOR   b   
0579   F2 82 05               JP   p,$+9   
057C   AF                     XOR   a   
057D   91                     SUB   c   
057E   4F                     LD   c,a   
057F   9F                     SBC   a,a   
0580   90                     SUB   b   
0581   47                     LD   b,a   
0582   29                     ADD   hl,hl   
0583   3E 0F                  LD   a,15   
0585   11 00 00               LD   de,0   
0588   EB                     EX   de,hl   
0589   18 04                  JR   jumpin   
058B                LOOP1:       
058B   09                     ADD   hl,bc   ;--
058C                LOOP2:       
058C   3D                     DEC   a   ;4
058D   28 0E                  JR   z,EndSDiv   ;12|7
058F                JUMPIN:      
058F   CB 23                  SLA   e   ;8
0591   CB 12                  RL   d   ;8
0593   ED 6A                  ADC   hl,hl   ;15
0595   ED 42                  SBC   hl,bc   ;15
0597   38 F2                  JR   c,Loop1   ;23-2b
0599   1C                     INC   e   ;--
059A   C3 8C 05               JP   Loop2   ;--
059D                ENDSDIV:      
059D   F1                     POP   af   
059E   F2 A7 05               JP   p,div10   
05A1   AF                     XOR   a   
05A2   93                     SUB   e   
05A3   5F                     LD   e,a   
05A4   9F                     SBC   a,a   
05A5   92                     SUB   d   
05A6   57                     LD   d,a   
05A7                DIV10:       
05A7   C1                     POP   bc   
05A8   D5                     PUSH   de   ; quotient
05A9   E5                     PUSH   hl   ; remainder
05AA   FD E9                  JP   (iy)   
05AC                             ;=57
05AC                CARRY:       ;=10
05AC   21 00 00               LD   hl,0   
05AF   CB 15                  RL   l   
05B1   22 86 0C               LD   (vCarry),hl   
05B4   FD E9                  JP   (iy)   
05B6                ARREND:      
05B6   ED 43 34 0C            LD   (vTemp1),bc   ; save IP
05BA   CD E4 03               CALL   rpop   
05BD   22 36 0C               LD   (vTemp2),hl   ; save old SP
05C0   54 5D                  LD   de,hl   ; de = hl = old SP
05C2   B7                     OR   a   
05C3   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05C5   CB 3C                  SRL   h   ; num items = num bytes / 2
05C7   CB 1D                  RR   l   
05C9   44 4D                  LD   bc,hl   ; bc = count
05CB   2A 90 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
05CE   71                     LD   (hl),c   ; write num items in length word
05CF   23                     INC   hl   
05D0   70                     LD   (hl),b   
05D1   23                     INC   hl   ; hl = array[0], bc = count
05D2                             ; de = old SP, hl = array[0], bc = count
05D2   18 11                  JR   arrayEnd2   
05D4                ARRAYEND1:      
05D4   0B                     DEC   bc   ; dec items count
05D5   1B                     DEC   de   
05D6   1B                     DEC   de   
05D7   1A                     LD   a,(de)   ; a = lsb of stack item
05D8   77                     LD   (hl),a   ; write lsb of array item
05D9   23                     INC   hl   ; move to msb of array item
05DA   3A 88 0C               LD   a,(vByteMode)   ; vByteMode=1?
05DD   3D                     DEC   a   
05DE   28 05                  JR   z,arrayEnd2   
05E0   13                     INC   de   
05E1   1A                     LD   a,(de)   ; a = msb of stack item
05E2   1B                     DEC   de   
05E3   77                     LD   (hl),a   ; write msb of array item
05E4   23                     INC   hl   ; move to next word in array
05E5                ARRAYEND2:      
05E5   79                     LD   a,c   ; if not zero loop
05E6   B0                     OR   b   
05E7   20 EB                  JR   nz,arrayEnd1   
05E9   EB                     EX   de,hl   ; de = end of array
05EA   2A 36 0C               LD   hl,(vTemp2)   
05ED   F9                     LD   sp,hl   ; SP = old SP
05EE   2A 90 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
05F1   23                     INC   hl   
05F2   23                     INC   hl   
05F3   E5                     PUSH   hl   ; return array[0]
05F4   ED 53 90 0C            LD   (vHeapPtr),de   ; move heap* to end of array
05F8   ED 4B 34 0C            LD   bc,(vTemp1)   ; restore IP
05FC   FD E9                  JP   (iy)   
05FE                             ; **************************************************************************
05FE                             ; Page 6 Alt primitives
05FE                             ; **************************************************************************
05FE                          ALIGN   $100   
0600                PAGE6:       
0600                ARRSIZE_:      
0600                ARRSIZE:      
0600   E1                     POP   hl   
0601   2B                     DEC   hl   ; msb size
0602   56                     LD   d,(hl)   
0603   2B                     DEC   hl   ; lsb size
0604   5E                     LD   e,(hl)   
0605   D5                     PUSH   de   
0606                ANOP_:       
0606   FD E9                  JP   (iy)   
0608                DEPTH_:      
0608                DEPTH:       
0608   21 00 00               LD   hl,0   
060B   39                     ADD   hl,SP   
060C   EB                     EX   de,hl   
060D   21 00 0A               LD   hl,DSTACK   
0610   B7                     OR   A   
0611   ED 52                  SBC   hl,de   
0613   C3 62 04               JP   shr1   
0616                EMIT_:       
0616   E1                     POP   hl   
0617   7D                     LD   A,L   
0618   CD 85 00               CALL   putchar   
061B   FD E9                  JP   (iy)   
061D                EXEC_:       
061D   CD 22 06               CALL   exec1   
0620   FD E9                  JP   (iy)   
0622                EXEC1:       
0622   E1                     POP   hl   
0623   E3                     EX   (SP),hl   
0624   E9                     JP   (hl)   
0625                EDITDEF_:      
0625   CD 5D 03               CALL   editDef   
0628   FD E9                  JP   (iy)   
062A                PROMPT_:      
062A   CD B9 03               CALL   prompt   
062D   FD E9                  JP   (iy)   
062F                GO_:         ;\^
062F   D1                     POP   de   
0630                GO1:         
0630   7A                     LD   A,D   ; skip if destination address is null
0631   B3                     OR   E   
0632   28 0E                  JR   Z,go3   
0634   60 69                  LD   hl,BC   
0636   03                     INC   BC   ; read next char from source
0637   0A                     LD   A,(BC)   ; if ; to tail call optimise
0638   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
063A   28 03                  JR   Z,go2   
063C   CD D9 03               CALL   rpush   ; save Instruction Pointer
063F                GO2:         
063F   42 4B                  LD   BC,de   
0641   0B                     DEC   BC   
0642                GO3:         
0642   FD E9                  JP   (iy)   
0644                INPORT_:      ; \<
0644   E1                     POP   hl   
0645   79                     LD   A,C   
0646   4D                     LD   C,L   
0647   ED 68                  IN   L,(C)   
0649   26 00                  LD   H,0   
064B   4F                     LD   C,A   
064C   E5                     PUSH   hl   
064D   FD E9                  JP   (iy)   
064F                NEWLN_:      
064F   CD C2 03               CALL   crlf   
0652   FD E9                  JP   (iy)   
0654                OUTPORT_:      
0654   E1                     POP   hl   
0655   59                     LD   E,C   
0656   4D                     LD   C,L   
0657   E1                     POP   hl   
0658   ED 69                  OUT   (C),L   
065A   4B                     LD   C,E   
065B   FD E9                  JP   (iy)   
065D                PRINTSTK_:      
065D                PRINTSTK:      ;=40
065D                             ; Mondo: \a@2- \- 1- ("@ \b@ \(,)(.) 2-) '
065D   CD F4 03               CALL   ENTER   
0660   60 3D 3E 20 60 5C 61 40 32 2D 20 5C 2D 20 31 2D 28 22 40 2E 32 2D 29 27 5C 4E 00 .CSTR   "`=> `\\a@2- \\- 1-(",$22,"@.2-)'\\N"   
067B   FD E9                  JP   (iy)   
067D                WHILE_:      
067D                WHILE:       
067D   E1                     POP   hl   
067E   7D                     LD   a,l   
067F   B4                     OR   h   
0680   20 03                  JR   nz,while2   
0682   C1                     POP   bc   ; IP = )
0683   C1                     POP   bc   ; IP = (
0684   03                     INC   bc   ; IP = one after )
0685                WHILE2:      
0685   FD E9                  JP   (iy)   
0687                             ;*******************************************************************
0687                             ; Page 5 primitive routines continued
0687                             ;*******************************************************************
0687                DEF:         ; Create a colon definition
0687   03                     INC   BC   
0688   0A                     LD   A,(BC)   ; Get the next character
0689   FE 3A                  CP   ":"   ; is it anonymouse
068B   20 09                  JR   nz,def0   
068D   03                     INC   BC   
068E   ED 5B 90 0C            LD   de,(vHeapPtr)   ; return start of definition
0692   D5                     PUSH   de   
0693   C3 A4 06               JP   def1   
0696                DEF0:        
0696   32 8A 0C               LD   (vLastDef),A   
0699   CD 2B 03               CALL   lookup   
069C   ED 5B 90 0C            LD   de,(vHeapPtr)   ; start of defintion
06A0   73                     LD   (hl),E   ; Save low byte of address in CFA
06A1   23                     INC   hl   
06A2   72                     LD   (hl),D   ; Save high byte of address in CFA+1
06A3   03                     INC   BC   
06A4                DEF1:        ; Skip to end of definition
06A4   0A                     LD   A,(BC)   ; Get the next character
06A5   03                     INC   BC   ; Point to next character
06A6   12                     LD   (de),A   
06A7   13                     INC   de   
06A8   FE 3B                  CP   ";"   ; Is it a semicolon
06AA   28 02                  JR   Z,def2   ; end the definition
06AC   18 F6                  JR   def1   ; get the next element
06AE                DEF2:        
06AE   0B                     DEC   BC   
06AF                DEF3:        
06AF   ED 53 90 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
06B3   FD E9                  JP   (iy)   
06B5                NUM:         
06B5   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06B8   0A                     LD   a,(bc)   ; Get numeral or -
06B9   FE 2D                  CP   "-"   
06BB   20 01                  JR   nz,num0   
06BD   03                     INC   bc   ; move to next char, no flags affected
06BE                NUM0:        
06BE   08                     EX   af,af'   ; save zero flag = 0 for later
06BF                NUM1:        
06BF   0A                     LD   a,(bc)   ; read digit
06C0   D6 30                  SUB   "0"   ; less than 0?
06C2   38 13                  JR   c,num2   ; not a digit, exit loop
06C4   FE 0A                  CP   10   ; greater that 9?
06C6   30 0F                  JR   nc,num2   ; not a digit, exit loop
06C8   03                     INC   bc   ; inc IP
06C9   54 5D                  LD   de,hl   ; multiply hl * 10
06CB   29                     ADD   hl,hl   
06CC   29                     ADD   hl,hl   
06CD   19                     ADD   hl,de   
06CE   29                     ADD   hl,hl   
06CF   85                     ADD   a,l   ; add digit in a to hl
06D0   6F                     LD   l,a   
06D1   3E 00                  LD   a,0   
06D3   8C                     ADC   a,h   
06D4   67                     LD   h,a   
06D5   18 E8                  JR   num1   
06D7                NUM2:        
06D7   0B                     DEC   bc   
06D8   08                     EX   af,af'   ; restore zero flag
06D9   20 07                  JR   nz,num3   
06DB   EB                     EX   de,hl   ; negate the value of hl
06DC   21 00 00               LD   hl,0   
06DF   B7                     OR   a   ; jump to sub2
06E0   ED 52                  SBC   hl,de   
06E2                NUM3:        
06E2   E5                     PUSH   hl   ; Put the number on the stack
06E3   FD E9                  JP   (iy)   ; and process the next character
06E5                             ;*******************************************************************
06E5                             ; Subroutines
06E5                             ;*******************************************************************
06E5                             ; hl = value
06E5                PRINTDEC:      
06E5   CB 7C                  BIT   7,h   
06E7   28 0B                  JR   z,printDec2   
06E9   3E 2D                  LD   a,"-"   
06EB   CD 85 00               CALL   putchar   
06EE   AF                     XOR   a   
06EF   95                     SUB   l   
06F0   6F                     LD   l,a   
06F1   9F                     SBC   a,a   
06F2   94                     SUB   h   
06F3   67                     LD   h,a   
06F4                PRINTDEC2:      
06F4   C5                     PUSH   bc   
06F5   0E 00                  LD   c,0   ; leading zeros flag = false
06F7   11 F0 D8               LD   de,-10000   
06FA   CD 16 07               CALL   printDec4   
06FD   11 18 FC               LD   de,-1000   
0700   CD 16 07               CALL   printDec4   
0703   11 9C FF               LD   de,-100   
0706   CD 16 07               CALL   printDec4   
0709   1E F6                  LD   e,-10   
070B   CD 16 07               CALL   printDec4   
070E   0C                     INC   c   ; flag = true for at least digit
070F   1E FF                  LD   e,-1   
0711   CD 16 07               CALL   printDec4   
0714   C1                     POP   bc   
0715   C9                     RET      
0716                PRINTDEC4:      
0716   06 2F                  LD   b,"0"-1   
0718                PRINTDEC5:      
0718   04                     INC   b   
0719   19                     ADD   hl,de   
071A   38 FC                  JR   c,printDec5   
071C   ED 52                  SBC   hl,de   
071E   3E 30                  LD   a,"0"   
0720   B8                     CP   b   
0721   20 05                  JR   nz,printDec6   
0723   AF                     XOR   a   
0724   B1                     OR   c   
0725   C8                     RET   z   
0726   18 01                  JR   printDec7   
0728                PRINTDEC6:      
0728   0C                     INC   c   
0729                PRINTDEC7:      
0729   78                     LD   a,b   
072A   C3 85 00               JP   putchar   
072D                             ; loop start
072D                LPAREN:      
072D                BEGIN:       
072D   C5                     PUSH   bc   ; save IP
072E   1E 01                  LD   E,1   ; skip to loop end, nesting = 1
0730                BEGIN2:      
0730   03                     INC   BC   
0731   0A                     LD   A,(BC)   
0732   CD 8D 03               CALL   nesting   
0735   AF                     XOR   A   
0736   B3                     OR   E   
0737   20 F7                  JR   NZ,begin2   
0739   E1                     POP   hl   ; hl = after (
073A   C5                     PUSH   bc   ; (sp) = after )
073B   E5                     PUSH   hl   ; (sp) = start (sp+2) = end+1
073C   FD E9                  JP   (iy)   ; interp ) after NEXT
073E                RPAREN:      
073E                AGAIN:       
073E   C1                     POP   bc   ; IP = start
073F   C5                     PUSH   bc   ; (sp) = ) (sp+2) = (
0740   03                     INC   bc   ; IP = one after (
0741   FD E9                  JP   (iy)   
0743                COMMENT:      
0743   03                     INC   BC   ; point to next char
0744   0A                     LD   A,(BC)   
0745   FE 0D                  CP   "\r"   ; terminate at cr
0747   20 FA                  JR   NZ,comment   
0749   0B                     DEC   BC   
074A   FD E9                  JP   (iy)   
074C                DSIZE:    EQU   $80   
074C                RSIZE:    EQU   $80   
074C                LSIZE:    EQU   $80   
074C                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
074C                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   $80-32-1-5   
0BB8                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                TBPTR:    DS   2   ; reserved for tests
0C34                VTEMP1:   DS   2   ; 
0C36                VTEMP2:   DS   2   ; 
0C38                RST08:    DS   2   
0C3A                RST10:    DS   2   
0C3C                RST18:    DS   2   
0C3E                RST20:    DS   2   
0C40                RST28:    DS   2   
0C42                RST30:    DS   2   ; 
0C44                BAUD:     DS   2   ; 
0C46                INTVEC:   DS   2   ; 
0C48                NMIVEC:   DS   2   ; 
0C4A                GETCVEC:   DS   2   ; 
0C4C                PUTCVEC:   DS   2   ; 
0C4E                          DS   26*2   
0C82                ALTVARS:      
0C82                VS0:      DS   2   ; a
0C84                VBASE16:   DS   2   ; b
0C86                VCARRY:   DS   2   ; c
0C88                VBYTEMODE:   DS   2   ; d
0C8A                VLASTDEF:   DS   2   ; e
0C8C                          DS   2   ; f
0C8E                          DS   2   ; g
0C90                VHEAPPTR:   DS   2   ; h
0C92                          DS   2   ; i
0C94                          DS   2   ; j
0C96                          DS   2   ; k
0C98                          DS   2   ; l
0C9A                          DS   2   ; m
0C9C                          DS   2   ; n
0C9E                          DS   2   ; o
0CA0                VPOINTER:   DS   2   ; p
0CA2                          DS   2   ; q
0CA4                          DS   2   ; r
0CA6                          DS   2   ; s
0CA8                VTIBPTR:   DS   2   ; t
0CAA                          DS   2   ; u
0CAC                          DS   2   ; v
0CAE                          DS   2   ; w
0CB0                          DS   2   ; x
0CB2                          DS   2   ; y
0CB4                          DS   2   ; z
0CB6                             ; .align $40
0CB6                VARS:     DS   VARS_SIZE   
0D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 49 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 51 IN MAIN.asm
EDIT_:              0187 DEFINED AT LINE 54 IN MAIN.asm
LIST_:              0191 DEFINED AT LINE 57 IN MAIN.asm
PRINTSTACK_:        01AC DEFINED AT LINE 60 IN MAIN.asm
IOPCODES:           01B2 DEFINED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
IALTCODES:          01DC DEFINED AT LINE 110 IN MAIN.asm
BACKSPACE:          01F8 DEFINED AT LINE 149 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
START:              0208 DEFINED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          021D DEFINED AT LINE 164 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
INTERPRET2:         0227 DEFINED AT LINE 170 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
INTERPRET3:         022F DEFINED AT LINE 177 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
INTERPRET4:         0235 DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
WAITCHAR:           023A DEFINED AT LINE 194 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
MACRO:              0269 DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
WAITCHAR1:          027A DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
WAITCHAR3:          0288 DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
WAITCHAR4:          029E DEFINED AT LINE 252 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
NEXT:               02A6 DEFINED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
EXIT:               02BA DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
ETX:                02C4 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 284 IN MAIN.asm
ETX1:               02CD DEFINED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
INIT:               02D0 DEFINED AT LINE 309 IN MAIN.asm
                    > USED AT LINE 160 IN MAIN.asm
INIT1:              02E3 DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
INITOPS:            0307 DEFINED AT LINE 335 IN MAIN.asm
INITOPS1:           0310 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
INITOPS2:           0320 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
INITOPS2A:          0325 DEFINED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
LOOKUP:             032B DEFINED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
LOOKUP1:            032F DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
LOOKUP2:            0331 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 365 IN MAIN.asm
PRINTHEX:           033E DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
PRINTHEX2:          0349 DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
PRINTHEX3:          0352 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
EDITDEF:            035D DEFINED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
EDITDEF1:           037A DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
EDITDEF2:           037B DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
EDITDEF3:           0383 DEFINED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
NESTING:            038D DEFINED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
NESTING1A:          0398 DEFINED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
NESTING1:           039B DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NESTING2:           03AA DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
NESTING3:           03AC DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
NESTING4:           03B7 DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
PROMPT:             03B9 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 165 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
CRLF:               03C2 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
PRINTSTR:           03C9 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
PUTSTR0:            03D0 DEFINED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
PUTSTR:             03D4 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
RPUSH:              03D9 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
RPOP:               03E4 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
RPOP2:              03EE DEFINED AT LINE 519 IN MAIN.asm
WRITECHAR:          03EF DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ENTER:              03F4 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 539 IN MAIN.asm
AMPER_:             0400 DEFINED AT LINE 541 IN MAIN.asm
AND_:               0400 DEFINED AT LINE 542 IN MAIN.asm
AND1:               0407 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
PIPE_:              040B DEFINED AT LINE 556 IN MAIN.asm
OR_:                040B DEFINED AT LINE 557 IN MAIN.asm
CARET_:             0414 DEFINED AT LINE 567 IN MAIN.asm
XOR_:               0414 DEFINED AT LINE 568 IN MAIN.asm
PLUS_:              041D DEFINED AT LINE 578 IN MAIN.asm
ADD_:               041D DEFINED AT LINE 579 IN MAIN.asm
CALL_:              0424 DEFINED AT LINE 586 IN MAIN.asm
DOT_:               042E DEFINED AT LINE 594 IN MAIN.asm
DOT2:               0432 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
COMMA_:             0439 DEFINED AT LINE 602 IN MAIN.asm
HDOT_:              0439 DEFINED AT LINE 603 IN MAIN.asm
QUOTE_:             043F DEFINED AT LINE 608 IN MAIN.asm
DROP_:              043F DEFINED AT LINE 609 IN MAIN.asm
DQUOTE_:            0442 DEFINED AT LINE 613 IN MAIN.asm
DUP_:               0442 DEFINED AT LINE 614 IN MAIN.asm
PERCENT_:           0447 DEFINED AT LINE 620 IN MAIN.asm
OVER_:              0447 DEFINED AT LINE 621 IN MAIN.asm
SEMI_:              044E DEFINED AT LINE 629 IN MAIN.asm
RET_:               044E DEFINED AT LINE 630 IN MAIN.asm
TILDE_:             0455 DEFINED AT LINE 635 IN MAIN.asm
ROTATE_:            0455 DEFINED AT LINE 636 IN MAIN.asm
LBRACE_:            045C DEFINED AT LINE 645 IN MAIN.asm
SHL_:               045C DEFINED AT LINE 646 IN MAIN.asm
RBRACE_:            0461 DEFINED AT LINE 653 IN MAIN.asm
SHR_:               0461 DEFINED AT LINE 654 IN MAIN.asm
SHR1:               0462 DEFINED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
BANG_:              0469 DEFINED AT LINE 662 IN MAIN.asm
STORE_:             0469 DEFINED AT LINE 663 IN MAIN.asm
ASSIGN:             0469 DEFINED AT LINE 664 IN MAIN.asm
ASSIGN0:            046B DEFINED AT LINE 667 IN MAIN.asm
ASSIGN1:            046E DEFINED AT LINE 669 IN MAIN.asm
DOLLAR_:            0473 DEFINED AT LINE 676 IN MAIN.asm
SWAP_:              0473 DEFINED AT LINE 677 IN MAIN.asm
MINUS_:             0478 DEFINED AT LINE 683 IN MAIN.asm
SUB_:               0478 DEFINED AT LINE 684 IN MAIN.asm
SUB1:               0484 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
SUB2:               0486 DEFINED AT LINE 695 IN MAIN.asm
EQ_:                048D DEFINED AT LINE 701 IN MAIN.asm
GT_:                0499 DEFINED AT LINE 710 IN MAIN.asm
LT_:                049D DEFINED AT LINE 715 IN MAIN.asm
CMP_:               049F DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
EQUAL:              04AA DEFINED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
LESS:               04AB DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
VAR_:               04AE DEFINED AT LINE 731 IN MAIN.asm
VAR1:               04B2 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
VAR2:               04C0 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE_:             04C3 DEFINED AT LINE 747 IN MAIN.asm
STR:                04C3 DEFINED AT LINE 748 IN MAIN.asm
STR1:               04C4 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
STR2:               04CF DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
AT_:                04D2 DEFINED AT LINE 762 IN MAIN.asm
LPAREN_:            04D2 DEFINED AT LINE 763 IN MAIN.asm
RPAREN_:            04D2 DEFINED AT LINE 764 IN MAIN.asm
NOP_:               04D2 DEFINED AT LINE 765 IN MAIN.asm
NUM_:               04D5 DEFINED AT LINE 768 IN MAIN.asm
RBRACK_:            04D8 DEFINED AT LINE 770 IN MAIN.asm
COLON_:             04DB DEFINED AT LINE 772 IN MAIN.asm
LBRACK_:            04DE DEFINED AT LINE 775 IN MAIN.asm
UNDERSCORE_:        04E0 DEFINED AT LINE 777 IN MAIN.asm
HASH_:              04E2 DEFINED AT LINE 779 IN MAIN.asm
STAR_:              04E4 DEFINED AT LINE 781 IN MAIN.asm
SLASH_:             04E6 DEFINED AT LINE 783 IN MAIN.asm
BSLASH_:            04E8 DEFINED AT LINE 785 IN MAIN.asm
ALT:                04E8 DEFINED AT LINE 791 IN MAIN.asm
ALT2:               04F7 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
ALT3:               0502 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
ARRDEF:             050E DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
QUESTION_:          0517 DEFINED AT LINE 825 IN MAIN.asm
ARRACCESS:          0520 DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
ARRACCESS0:         0528 DEFINED AT LINE 838 IN MAIN.asm
ARRACCESS1:         0529 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
HEX:                052D DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
HEX1:               0530 DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
HEX2:               0539 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
MUL:                054B DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
MUL2:               0555 DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
DIV:                0567 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
ABSBC:              0578 DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
LOOP1:              058B DEFINED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
LOOP2:              058C DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
JUMPIN:             058F DEFINED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
ENDSDIV:            059D DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
DIV10:              05A7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
CARRY:              05AC DEFINED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
ARREND:             05B6 DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
ARRAYEND1:          05D4 DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
ARRAYEND2:          05E5 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 1004 IN MAIN.asm
ARRSIZE_:           0600 DEFINED AT LINE 1007 IN MAIN.asm
ARRSIZE:            0600 DEFINED AT LINE 1008 IN MAIN.asm
ANOP_:              0606 DEFINED AT LINE 1015 IN MAIN.asm
DEPTH_:             0608 DEFINED AT LINE 1018 IN MAIN.asm
DEPTH:              0608 DEFINED AT LINE 1019 IN MAIN.asm
EMIT_:              0616 DEFINED AT LINE 1028 IN MAIN.asm
EXEC_:              061D DEFINED AT LINE 1034 IN MAIN.asm
EXEC1:              0622 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
EDITDEF_:           0625 DEFINED AT LINE 1042 IN MAIN.asm
PROMPT_:            062A DEFINED AT LINE 1046 IN MAIN.asm
GO_:                062F DEFINED AT LINE 1051 IN MAIN.asm
GO1:                0630 DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
GO2:                063F DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
GO3:                0642 DEFINED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
INPORT_:            0644 DEFINED AT LINE 1069 IN MAIN.asm
NEWLN_:             064F DEFINED AT LINE 1079 IN MAIN.asm
OUTPORT_:           0654 DEFINED AT LINE 1083 IN MAIN.asm
PRINTSTK_:          065D DEFINED AT LINE 1092 IN MAIN.asm
PRINTSTK:           065D DEFINED AT LINE 1093 IN MAIN.asm
WHILE_:             067D DEFINED AT LINE 1099 IN MAIN.asm
WHILE:              067D DEFINED AT LINE 1100 IN MAIN.asm
WHILE2:             0685 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
DEF:                0687 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DEF0:               0696 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
DEF1:               06A4 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
DEF2:               06AE DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
DEF3:               06AF DEFINED AT LINE 1143 IN MAIN.asm
NUM:                06B5 DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
NUM0:               06BE DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
NUM1:               06BF DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
NUM2:               06D7 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
NUM3:               06E2 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
PRINTDEC:           06E5 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
PRINTDEC2:          06F4 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
PRINTDEC4:          0716 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
PRINTDEC5:          0718 DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
PRINTDEC6:          0728 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
PRINTDEC7:          0729 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
LPAREN:             072D DEFINED AT LINE 1238 IN MAIN.asm
BEGIN:              072D DEFINED AT LINE 1239 IN MAIN.asm
BEGIN2:             0730 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
RPAREN:             073E DEFINED AT LINE 1254 IN MAIN.asm
AGAIN:              073E DEFINED AT LINE 1255 IN MAIN.asm
COMMENT:            0743 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 78 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 310 IN MAIN.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 337 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 810 IN MAIN.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 311 IN MAIN.asm
TBPTR:              0C32 DEFINED AT LINE 31 IN ram.asm
VTEMP1:             0C34 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
VTEMP2:             0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
RST08:              0C38 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C3A DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3C DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C3E DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C40 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C42 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C44 DEFINED AT LINE 41 IN ram.asm
INTVEC:             0C46 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C48 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C4A DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4C DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C82 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
VS0:                0C82 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 322 IN MAIN.asm
VBASE16:            0C84 DEFINED AT LINE 51 IN ram.asm
VCARRY:             0C86 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 950 IN MAIN.asm
VBYTEMODE:          0C88 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
VLASTDEF:           0C8A DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
VHEAPPTR:           0C90 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
VPOINTER:           0CA0 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
VTIBPTR:            0CA8 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 435 IN MAIN.asm
VARS:               0CB6 DEFINED AT LINE 78 IN ram.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
HEAP:               0D1E DEFINED AT LINE 80 IN ram.asm
                    > USED AT LINE 325 IN MAIN.asm
