0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 38 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 3A 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3C 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3E 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 40 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 42 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 46 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 48 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 4A 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4C 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 38 0C               LD   (RST08),HL   
0094   22 3A 0C               LD   (RST10),HL   
0097   22 3C 0C               LD   (RST18),HL   
009A   22 3E 0C               LD   (RST20),HL   
009D   22 40 0C               LD   (RST28),HL   
00A0   22 42 0C               LD   (RST30),HL   
00A3   22 46 0C               LD   (INTVEC),HL   
00A6   22 48 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 4A 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4C 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 F0 01               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       Mondo Minimal Interpreter for the z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIc LIcENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LIcENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   $FFFF   ; not FF, for Mondo
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Mondo)
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                BSLASH:   EQU   $5c   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Mondo code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mondo and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   2F 65 2F 55 45 3B      DB   "/e/UE;"   ; remembers last line edited
0186                EDIT_:       
0186   60 3F 60 3F 2F 55 50 2F 55 45 3B 00 .CSTR   "`?`?/UP/UE;"   
0192                LIST_:       
0192                             ; .cstr "/N26(/i@65+/UE/t@0>(/N))/UP;"
0192                PRINTSTACK_:      
0192   5C 55 53 5C 55 50 3B 00 .CSTR   "\\US\\UP;"   
019A                IOPCODES:      
019A                          ;*Macro unroll:  LITDAT 15
019A   0F                     DB   15   
019B   66                     DB   lsb(bang_)   ;    !
019C   00                     DB   lsb(dquote_)   ;    "
019D   44                     DB   lsb(hash_)   ;    #
019E   49                     DB   lsb(dollar_)   ;    $
019F   4E                     DB   lsb(percent_)   ;    %
01A0   02                     DB   lsb(amper_)   ;    &
01A1   E8                     DB   lsb(quote_)   ;    '
01A2   D9                     DB   lsb(lparen_)   ;    (
01A3   DC                     DB   lsb(rparen_)   ;    )
01A4   EA                     DB   lsb(star_)   ;    *
01A5   1F                     DB   lsb(plus_)   ;    +
01A6   3B                     DB   lsb(comma_)   ;    ,
01A7   70                     DB   lsb(minus_)   ;    -
01A8   30                     DB   lsb(dot_)   ;    .
01A9   EC                     DB   lsb(slash_)   ;    /	;/MOD
01AA                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01AA   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01AB   DF                     DB   lsb(num_)   
01AC                          ;*Macro unroll:  LITDAT 7
01AC   07                     DB   7   
01AD   E2                     DB   lsb(colon_)   ;    :
01AE   55                     DB   lsb(semi_)   ;    ;
01AF   94                     DB   lsb(lt_)   ;    <
01B0   85                     DB   lsb(eq_)   ;    =
01B1   90                     DB   lsb(gt_)   ;    >
01B2   00                     DB   lsb(question_)   ;    ?   ( -- val )  read a char from input
01B3   CC                     DB   lsb(at_)   ;    @
01B4                          ;*Macro unroll:  REPDAT 26, lsb(call_)	; call a command A, B ....z
01B4   9A                     DB   (26 | $80)   ; call a command A, B ....z
01B5   26                     DB   lsb(call_)   
01B6                          ;*Macro unroll:  LITDAT 6
01B6   06                     DB   6   
01B7   C3                     DB   lsb(lbrack_)   ;    [
01B8   00                     DB   lsb(bslash_)   ;    \
01B9   E5                     DB   lsb(rbrack_)   ;    ]
01BA   16                     DB   lsb(caret_)   ;    ^
01BB   41                     DB   lsb(underscore_)   ;    _
01BC   B4                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01BD                          ;*Macro unroll:  REPDAT 26, lsb(var_)	; a b c .....z
01BD   9A                     DB   (26 | $80)   ; a b c .....z
01BE   9F                     DB   lsb(var_)   
01BF                          ;*Macro unroll:  LITDAT 4
01BF   04                     DB   4   
01C0   00                     DB   lsb(lbrace_)   ;    {
01C1   0D                     DB   lsb(pipe_)   ;    |
01C2   00                     DB   lsb(rbrace_)   ;    }
01C3   5C                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01C4                IALTCODES:      
01C4                          ;*Macro unroll:  LITDAT 24
01C4   18                     DB   24   
01C5   06                     DB   lsb(aNop_)   ;A
01C6   08                     DB   lsb(bmode_)   ;B      byte mode
01C7   06                     DB   lsb(aNop_)   ;C
01C8   06                     DB   lsb(aNop_)   ;D
01C9   2C                     DB   lsb(emit_)   ;E      emit a char
01CA   1A                     DB   lsb(false_)   ;F      false
01CB   44                     DB   lsb(go_)   ;G      execute Mondo code
01CC   20                     DB   lsb(hmode_)   ;H      hex mode
01CD   59                     DB   lsb(inPort_)   ;I      input from port
01CE   06                     DB   lsb(aNop_)   ;J
01CF   3B                     DB   lsb(key_)   ;K
01D0   72                     DB   lsb(shl_)   ;L
01D1   06                     DB   lsb(aNop_)   ;M
01D2   64                     DB   lsb(newln_)   ;N      prints a newline to output
01D3   69                     DB   lsb(outPort_)   ;O      output to port
01D4   06                     DB   lsb(aNop_)   ;P      print Mondo prompt
01D5   06                     DB   lsb(aNop_)   ;Q
01D6   82                     DB   lsb(shr_)   ;R
01D7   00                     DB   lsb(arrSize_)   ;S      array size
01D8   95                     DB   lsb(true_)   ;T      true
01D9   9B                     DB   lsb(utility_)   ;U
01DA   06                     DB   lsb(aNop_)   ;V
01DB   E2                     DB   lsb(while_)   ;W      word mode
01DC   33                     DB   lsb(exec_)   ;X      execute machine code
01DD                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01DD   83                     DB   (3 | $80)   
01DE   06                     DB   lsb(aNop_)   
01DF                             ;Y
01DF                             ;Z
01DF                          ;*Macro unroll:  ENDDAT
01DF   00                     DB   0   
01E0                BACKSPACE:      
01E0   79                     LD   a,c   
01E1   B0                     OR   b   
01E2   CA 0F 02               JP   z,interpret2   
01E5   0B                     DEC   bc   
01E6   CD BA 03               CALL   printStr   
01E9   08 20 08 00            .CSTR   "\b \b"   
01ED   C3 0F 02               JP   interpret2   
01F0                START:       
01F0   31 00 0A               LD   SP,DSTACK   ; start of Mondo
01F3   CD B8 02               CALL   init   ; setups
01F6   CD BA 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
01F9   4D 6F 6E 64 6F 20 30 2E 31 0D 0A 00 .CSTR   "Mondo 0.1\r\n"   
0205                INTERPRET:      
0205   CD AA 03               CALL   prompt   
0208   01 00 00               LD   bc,0   ; load bc with offset into TIb, decide char into tib or execute or control
020B   ED 43 A8 0C            LD   (vTIBPtr),bc   
020F                INTERPRET2:      ; calc nesting (a macro might have changed it)
020F   1E 00                  LD   e,0   ; initilize nesting value
0211   C5                     PUSH   bc   ; save offset into TIb,
0212                             ; bc is also the count of chars in TIB
0212   21 00 08               LD   hl,TIB   ; hl is start of TIB
0215   18 06                  JR   interpret4   
0217                INTERPRET3:      
0217   7E                     LD   a,(hl)   ; A = char in TIB
0218   23                     INC   hl   ; inc pointer into TIB
0219   0B                     DEC   bc   ; dec count of chars in TIB
021A   CD 76 03               CALL   nesting   ; update nesting value
021D                INTERPRET4:      
021D   79                     LD   a,c   ; is count zero?
021E   B0                     OR   B   
021F   20 F6                  JR   nz,interpret3   ; if not loop
0221   C1                     POP   bc   ; restore offset into TIB
0222                WAITCHAR:      
0222   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0225   FE 20                  CP   $20   ; compare to space
0227   30 39                  JR   nc,waitchar1   ; if >= space, if below 20 set cary flag
0229   FE 00                  CP   $0   ; is it end of string? null end of string
022B   28 59                  JR   z,waitchar4   
022D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
022F   28 3F                  JR   z,waitchar3   ; if anything else its macro/control
0231   FE 08                  CP   cTRL_H   
0233   28 AB                  JR   z,backSpace   
0235   16 01                  LD   d,msb(macros)   
0237   FE 05                  CP   cTRL_E   
0239   1E 86                  LD   e,lsb(edit_)   
023B   28 14                  JR   z,macro   
023D   FE 0A                  CP   cTRL_J   
023F   1E 80                  LD   e,lsb(reedit_)   
0241   28 0E                  JR   z,macro   
0243   FE 0C                  CP   cTRL_L   
0245   1E 92                  LD   e,lsb(list_)   
0247   28 08                  JR   z,macro   
0249   FE 10                  CP   cTRL_P   
024B   1E 92                  LD   e,lsb(printStack_)   
024D   28 02                  JR   z,macro   
024F   18 BE                  JR   interpret2   
0251                MACRO:       ;=25
0251   ED 43 A8 0C            LD   (vTIBPtr),bc   
0255   D5                     PUSH   de   
0256   CD E5 03               CALL   ENTER   ;Mondo go operation and jump to it
0259   2F 47 00               .CSTR   "/G"   
025C   ED 4B A8 0C            LD   bc,(vTIBPtr)   
0260   18 AD                  JR   interpret2   
0262                WAITCHAR1:      
0262   21 00 08               LD   hl,TIB   
0265   09                     ADD   hl,bc   
0266   77                     LD   (hl),A   ; store the character in textbuf
0267   03                     INC   bc   
0268   CD 85 00               CALL   putchar   ; echo character to screen
026B   CD 76 03               CALL   nesting   
026E   18 B2                  JR   waitchar   ; wait for next character
0270                WAITCHAR3:      
0270   21 00 08               LD   hl,TIB   
0273   09                     ADD   hl,bc   
0274   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0276   23                     INC   hl   
0277   36 0A                  LD   (hl),"\n"   
0279   23                     INC   hl   ; ????
027A   03                     INC   bc   
027B   03                     INC   bc   
027C   CD B3 03               CALL   crlf   ; echo character to screen
027F   7B                     LD   a,E   ; if zero nesting append and ETX after \r
0280   B7                     OR   A   
0281   20 9F                  JR   nz,waitchar   
0283   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
0285   03                     INC   bc   
0286                WAITCHAR4:      
0286   ED 43 A8 0C            LD   (vTIBPtr),bc   
028A   01 00 08               LD   bc,TIB   ; Instructions stored on heap at address HERe, we pressed enter
028D   0B                     DEC   bc   
028E                NEXT:        ; 
028E   03                     INC   bc   ;       Increment the IP
028F   0A                     LD   a,(bc)   ;       Get the next character and dispatch
0290   B7                     OR   a   ; is it NUL?
0291   28 0F                  JR   z,exit   
0293   FE 03                  CP   cTRL_c   
0295   28 15                  JR   z,etx   
0297   D6 21                  SUB   "!"   
0299   38 F3                  JR   c,NexT   
029B   6F                     LD   L,A   ;       Index into table
029C   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
029E   6E                     LD   L,(hl)   ;       get low jump address
029F   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02A1   E9                     JP   (hl)   ;       Jump to routine
02A2                EXIT:        
02A2   03                     INC   bc   ; store offests into a table of bytes, smaller
02A3   50 59                  LD   de,bc   
02A5   CD D5 03               CALL   rpop   ; Restore Instruction pointer
02A8   44 4D                  LD   bc,hl   
02AA   EB                     EX   de,hl   
02AB   E9                     JP   (hl)   
02AC                ETX:         ;=12
02AC   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02AF   39                     ADD   hl,SP   
02B0   30 03                  JR   nc,etx1   
02B2   31 00 0A               LD   SP,DSTACK   
02B5                ETX1:        
02B5   C3 05 02               JP   interpret   
02B8                INIT:        ;=68
02B8   21 80 0A               LD   hl,lSTAcK   
02BB   22 30 0C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
02BE   DD 21 80 09            LD   ix,RSTAcK   
02C2   FD 21 8E 02            LD   iy,NexT   ; iy provides a faster jump to NexT
02C6   21 82 0C               LD   hl,altVars   ; init altVars to 0
02C9   06 34                  LD   b,26 * 2   
02CB                INIT1:       
02CB   36 00                  LD   (hl),0   
02CD   23                     INC   hl   
02CE   10 FB                  DJNZ   init1   
02D0   21 00 0A               LD   hl,DSTACK   
02D3   22 A6 0C               LD   (vS0),hl   
02D6   21 41 00               LD   hl,65   
02D9   22 8A 0C               LD   (vLastDef),hl   
02DC   21 1E 0D               LD   hl,hEAP   
02DF   22 90 0C               LD   (vHeapPtr),hl   
02E2   21 B6 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
02E5   54 5D                  LD   de,hl   
02E7   13                     INC   de   
02E8   36 00                  LD   (hl),0   
02EA   01 68 00               LD   bc,VARS_SIZE   
02ED   ED B0                  LDIR      
02EF                INITOPS:      
02EF   21 9A 01               LD   hl,iOpcodes   
02F2   11 00 0B               LD   de,opcodes   
02F5   01 00 01               LD   bc,256   
02F8                INITOPS1:      
02F8   7E                     LD   a,(hl)   
02F9   23                     INC   hl   
02FA   CB 27                  SLA   A   
02FC   C8                     RET   z   
02FD   38 09                  JR   c,initOps2   
02FF   CB 3F                  SRL   A   
0301   4F                     LD   c,A   
0302   06 00                  LD   b,0   
0304   ED B0                  LDIR      
0306   18 F0                  JR   initOps1   
0308                INITOPS2:      
0308   CB 3F                  SRL   A   
030A   47                     LD   b,A   
030B   7E                     LD   a,(hl)   
030C   23                     INC   hl   
030D                INITOPS2A:      
030D   12                     LD   (de),A   
030E   13                     INC   de   
030F   10 FC                  DJNZ   initOps2a   
0311   18 E5                  JR   initOps1   
0313                LOOKUP:      
0313   D6 41                  SUB   "A"   
0315   18 02                  JR   lookup2   
0317                LOOKUP1:      
0317   D6 2D                  SUB   "a" - 26*2   
0319                LOOKUP2:      
0319   87                     ADD   A,A   
031A   21 B6 0C               LD   hl,VARS   
031D   85                     ADD   A,l   
031E   6F                     LD   l,a   
031F   3E 00                  LD   a,0   
0321   8C                     ADC   a,h   
0322   67                     LD   h,a   
0323   AF                     XOR   a   
0324   B3                     OR   E   ; sets z flag if A-z
0325   C9                     RET      
0326                PRINTHEX:      ;=31
0326                             ; Display hl as a 16-bit number in hex.
0326   C5                     PUSH   bc   ; preserve the IP
0327   7C                     LD   a,h   
0328   CD 31 03               CALL   printhex2   
032B   7D                     LD   a,l   
032C   CD 31 03               CALL   printhex2   
032F   C1                     POP   bc   
0330   C9                     RET      
0331                PRINTHEX2:      
0331   4F                     LD   c,A   
0332   1F                     RRA      
0333   1F                     RRA      
0334   1F                     RRA      
0335   1F                     RRA      
0336   CD 3A 03               CALL   printhex3   
0339   79                     LD   a,c   
033A                PRINTHEX3:      
033A   E6 0F                  AND   0x0F   
033C   C6 90                  ADD   A,0x90   
033E   27                     DAA      
033F   CE 40                  ADC   A,0x40   
0341   27                     DAA      
0342   C3 85 00               JP   putchar   
0345                EDITDEF:      ;=50 lookup up def based on number
0345   E1                     POP   hl   ; pop ret address
0346   E3                     EX   (SP),hl   ; swap with TOS
0347   7D                     LD   a,l   
0348   08                     EX   AF,AF'   
0349   7D                     LD   a,l   
034A   CD 13 03               CALL   lookup   
034D   5E                     LD   e,(hl)   
034E   23                     INC   hl   
034F   56                     LD   d,(hl)   
0350   7A                     LD   a,D   
0351   B3                     OR   E   
0352   21 00 08               LD   hl,TIB   
0355   28 14                  JR   z,editDef3   
0357   3E 3A                  LD   a,":"   
0359   CD E0 03               CALL   writechar   
035C   08                     EX   AF,AF'   
035D   CD E0 03               CALL   writechar   
0360   18 01                  JR   editDef2   
0362                EDITDEF1:      
0362   13                     INC   de   
0363                EDITDEF2:      
0363   1A                     LD   a,(de)   
0364   CD E0 03               CALL   writechar   
0367   FE 3B                  CP   ";"   
0369   20 F7                  JR   nz,editDef1   
036B                EDITDEF3:      
036B   11 00 08               LD   de,TIB   
036E   B7                     OR   A   
036F   ED 52                  SBC   hl,de   
0371   22 A8 0C               LD   (vTIBPtr),hl   
0374   FD E9                  JP   (iy)   
0376                             ; **************************************************************************
0376                             ; calculate nesting value
0376                             ; A is char to be tested,
0376                             ; E is the nesting value (initially 0)
0376                             ; E is increased by ( and [
0376                             ; E is decreased by ) and ]
0376                             ; E has its bit 7 toggled by `
0376                             ; limited to 127 levels
0376                             ; **************************************************************************
0376                NESTING:      ;=44
0376   FE 60                  CP   "`"   
0378   20 0A                  JR   nz,nesting1   
037A   CB 7B                  BIT   7,E   
037C   28 03                  JR   z,nesting1a   
037E   CB BB                  RES   7,E   
0380   C9                     RET      
0381                NESTING1A:      
0381   CB FB                  SET   7,E   
0383   C9                     RET      
0384                NESTING1:      
0384   CB 7B                  BIT   7,E   
0386   C0                     RET   nz   
0387   FE 3A                  CP   ":"   
0389   28 0C                  JR   z,nesting2   
038B   FE 5B                  CP   "["   
038D   28 08                  JR   z,nesting2   
038F   FE 7B                  CP   "{"   
0391   28 04                  JR   z,nesting2   
0393   FE 28                  CP   "("   
0395   20 02                  JR   nz,nesting3   
0397                NESTING2:      
0397   1C                     INC   E   
0398   C9                     RET      
0399                NESTING3:      
0399   FE 3B                  CP   ";"   
039B   28 0B                  JR   z,nesting4   
039D   FE 5D                  CP   "]"   
039F   28 07                  JR   z,nesting4   
03A1   FE 7D                  CP   "}"   
03A3   28 03                  JR   z,nesting4   
03A5   FE 29                  CP   ")"   
03A7   C0                     RET   nz   
03A8                NESTING4:      
03A8   1D                     DEC   E   
03A9   C9                     RET      
03AA                PROMPT:      ;=9
03AA   CD BA 03               CALL   printStr   
03AD   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03B2   C9                     RET      
03B3                CRLF:        ;=7
03B3   CD BA 03               CALL   printStr   
03B6   0D 0A 00               .CSTR   "\r\n"   
03B9   C9                     RET      
03BA                PRINTSTR:      ;=7
03BA   E3                     EX   (SP),hl   ; swap			
03BB   CD C5 03               CALL   putStr   
03BE   23                     INC   hl   ; inc past null
03BF   E3                     EX   (SP),hl   ; put it back	
03C0   C9                     RET      
03C1                PUTSTR0:      ;=9
03C1   CD 85 00               CALL   putchar   
03C4   23                     INC   hl   
03C5                PUTSTR:      
03C5   7E                     LD   a,(hl)   
03C6   B7                     OR   A   
03C7   20 F8                  JR   nz,putStr0   
03C9   C9                     RET      
03CA                RPUSH:       ;=11
03CA   DD 2B                  DEC   ix   
03CC   DD 74 00               LD   (ix+0),h   
03CF   DD 2B                  DEC   ix   
03D1   DD 75 00               LD   (ix+0),l   
03D4   C9                     RET      
03D5                RPOP:        ;=11
03D5   DD 6E 00               LD   L,(ix+0)   
03D8   DD 23                  INC   ix   
03DA   DD 66 00               LD   H,(ix+0)   
03DD   DD 23                  INC   ix   
03DF                RPOP2:       
03DF   C9                     RET      
03E0                WRITECHAR:      ;=5
03E0   77                     LD   (hl),A   
03E1   23                     INC   hl   
03E2   C3 85 00               JP   putchar   
03E5                ENTER:       ;=9
03E5   60 69                  LD   hl,bc   
03E7   CD CA 03               CALL   rpush   ; save Instruction Pointer
03EA   C1                     POP   bc   
03EB   0B                     DEC   bc   
03EC   FD E9                  JP   (iy)   
03EE                             ; **********************************************************************			
03EE                             ; Page 4 primitive routines
03EE                             ; **********************************************************************
03EE                          ALIGN   $100   
0400                PAGE4:       
0400                BSLASH_:      
0400                DQUOTE_:      
0400                QUESTION_:      
0400                LBRACE_:      
0400                RBRACE_:      
0400                NOP_:        
0400   FD E9                  JP   (iy)   
0402                AMPER_:      
0402                AND_:        
0402   D1                     POP   de   ;     bitwise and the top 2 elements of the stack
0403   E1                     POP   hl   ; 
0404   7B                     LD   A,E   ; 
0405   A5                     AND   L   ; 
0406   6F                     LD   L,A   ; 
0407   7A                     LD   A,D   ; 
0408   A4                     AND   H   ; 
0409                AND1:        
0409   67                     LD   H,A   ; 
040A   E5                     PUSH   hl   ; 
040B   FD E9                  JP   (iy)   ; 
040D                             ; 
040D                PIPE_:       
040D                OR_:         
040D   D1                     POP   de   ; bitwise or the top 2 elements of the stack
040E   E1                     POP   hl   
040F   7B                     LD   A,E   
0410   B5                     OR   L   
0411   6F                     LD   L,A   
0412   7A                     LD   A,D   
0413   B4                     OR   H   
0414   18 F3                  JR   and1   
0416                CARET_:      
0416                XOR_:        
0416   D1                     POP   de   ; bitwise xor the top 2 elements of the stack
0417   E1                     POP   hl   
0418   7B                     LD   A,E   
0419   AD                     XOR   L   
041A   6F                     LD   L,A   
041B   7A                     LD   A,D   
041C   AC                     XOR   H   
041D   18 EA                  JR   and1   
041F                PLUS_:       ; add the top 2 members of the stack
041F                ADD_:        
041F   D1                     POP   de   
0420   E1                     POP   hl   
0421   19                     ADD   hl,de   
0422   E5                     PUSH   hl   
0423   C3 9C 07               JP   carry   
0426                CALL_:       
0426   0A                     LD   a,(bc)   
0427   CD 13 03               CALL   lookup   
042A   5E                     LD   e,(hl)   
042B   23                     INC   hl   
042C   56                     LD   d,(hl)   
042D   C3 45 06               JP   go1   
0430                DOT_:        
0430   E1                     POP   hl   
0431   CD 4B 07               CALL   printDec   
0434                DOT2:        
0434   3E 20                  LD   a," "   
0436   CD 85 00               CALL   putchar   
0439   FD E9                  JP   (iy)   
043B                COMMA_:      ; print hexadecimal
043B                HDOT_:       
043B   E1                     POP   hl   
043C   CD 26 03               CALL   printhex   
043F   18 F3                  JR   dot2   
0441                UNDERSCORE_:      
0441                DROP_:       
0441   E1                     POP   hl   
0442   FD E9                  JP   (iy)   
0444                HASH_:       
0444                DUP_:        
0444   E1                     POP   hl   ; Duplicate the top member of the stack
0445   E5                     PUSH   hl   
0446   E5                     PUSH   hl   
0447   FD E9                  JP   (iy)   
0449                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0449                DOLLAR_:      
0449                SWAP_:       
0449   E1                     POP   hl   
044A   E3                     EX   (SP),hl   
044B   E5                     PUSH   hl   
044C   FD E9                  JP   (iy)   
044E                PERCENT_:      
044E                OVER_:       
044E   E1                     POP   hl   ; Duplicate 2nd element of the stack
044F   D1                     POP   de   
0450   D5                     PUSH   de   
0451   E5                     PUSH   hl   
0452   D5                     PUSH   de   ; and push it to top of stack
0453   FD E9                  JP   (iy)   
0455                SEMI_:       
0455                RET_:        
0455   CD D5 03               CALL   rpop   ; Restore Instruction pointer
0458   44 4D                  LD   bc,hl   
045A   FD E9                  JP   (iy)   
045C                TILDE_:      
045C                NOT:         
045C   E1                     POP   hl   
045D   7D                     LD   a,l   
045E   2F                     CPL      
045F   6F                     LD   l,a   
0460   7C                     LD   a,h   
0461   2F                     CPL      
0462   67                     LD   h,a   
0463   E5                     PUSH   hl   
0464   FD E9                  JP   (iy)   
0466                BANG_:       ; Store the value at the address placed on the top of the stack
0466                STORE_:      
0466                ASSIGN:      
0466   D1                     POP   de   ; discard last accessed value
0467   D1                     POP   de   ; de = new value
0468                ASSIGN0:      
0468   2A A0 0C               LD   hl,(vPointer)   ; hl = pointer
046B                ASSIGN1:      
046B   73                     LD   (hl),e   ; ignore byte mode to allow assigning to vByteMode
046C   23                     INC   hl   
046D   72                     LD   (hl),d   
046E   FD E9                  JP   (iy)   
0470                MINUS_:      ; Subtract the value 2nd on stack from top of stack
0470                SUB_:        
0470   03                     INC   bc   ; check if sign of a number
0471   0A                     LD   a,(bc)   
0472   0B                     DEC   bc   
0473   FE 30                  CP   "0"   
0475   38 05                  JR   c,sub1   
0477   FE 3A                  CP   "9"+1   
0479   DA 1B 07               JP   c,num   
047C                SUB1:        
047C   D1                     POP   de   ; 
047D   E1                     POP   hl   ;      Entry point for INVert
047E                SUB2:        
047E   A7                     AND   A   ;      Entry point for NEGate
047F   ED 52                  SBC   hl,de   ; 
0481   E5                     PUSH   hl   ; 
0482   C3 9C 07               JP   carry   
0485                             ; 5
0485                EQ_:         
0485   E1                     POP   hl   
0486   D1                     POP   de   
0487   B7                     OR   a   ; reset the carry flag
0488   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
048A   CA 95 06               JP   z,true_   
048D   C3 1A 06               JP   false_   
0490                GT_:         
0490   E1                     POP   hl   
0491   D1                     POP   de   
0492   18 02                  JR   lt1_   
0494                LT_:         
0494   D1                     POP   de   
0495   E1                     POP   hl   
0496                LT1_:        
0496   B7                     OR   a   ; reset the carry flag
0497   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0499   DA 95 06               JP   c,true_   
049C   C3 1A 06               JP   false_   
049F                VAR_:        
049F   0A                     LD   a,(bc)   
04A0   CD 17 03               CALL   lookup1   
04A3                VAR1:        
04A3   22 A0 0C               LD   (vPointer),hl   
04A6   16 00                  LD   d,0   
04A8   5E                     LD   e,(hl)   
04A9   3A 84 0C               LD   a,(vByteMode)   
04AC   3C                     INC   a   ; is it byte?
04AD   28 02                  JR   z,var2   
04AF   23                     INC   hl   
04B0   56                     LD   d,(hl)   
04B1                VAR2:        
04B1   D5                     PUSH   de   
04B2   FD E9                  JP   (iy)   
04B4                GRAVE_:      
04B4                STR:         
04B4   03                     INC   bc   
04B5                STR1:        
04B5   0A                     LD   a,(bc)   
04B6   03                     INC   bc   
04B7   FE 60                  CP   "`"   ; ` is the string terminator
04B9   28 05                  JR   z,str2   
04BB   CD 85 00               CALL   putchar   
04BE   18 F5                  JR   str1   
04C0                STR2:        
04C0   0B                     DEC   bc   
04C1   FD E9                  JP   (iy)   
04C3                LBRACK_:      
04C3                ARRDEF:      
04C3   21 00 00               LD   hl,0   
04C6   39                     ADD   hl,sp   ; save
04C7   CD CA 03               CALL   rpush   
04CA   FD E9                  JP   (iy)   
04CC                AT_:         
04CC                ARRACCESS:      
04CC   E1                     POP   hl   ; hl = index
04CD   D1                     POP   de   ; de = array
04CE   3A 84 0C               LD   a,(vByteMode)   ; a = data width
04D1   3C                     INC   a   
04D2   28 01                  JR   z,arrAccess1   
04D4                ARRACCESS0:      
04D4   29                     ADD   hl,hl   ; if data width = 2 then double
04D5                ARRACCESS1:      
04D5   19                     ADD   hl,de   ; add addr
04D6   C3 A3 04               JP   var1   
04D9                LPAREN_:      
04D9   C3 A6 07               JP   begin   
04DC                RPAREN_:      
04DC   C3 D8 07               JP   again   
04DF                NUM_:        
04DF   C3 1B 07               JP   num   
04E2                COLON_:      
04E2   C3 ED 06               JP   def   
04E5                RBRACK_:      
04E5   C3 AC 05               JP   arrEnd   
04E8                QUOTE_:      ; Discard the top member of the stack
04E8   18 3D                  JR   hex   
04EA                STAR_:       
04EA   18 59                  JR   mul   
04EC                SLASH_:      
04EC                             ; jr div
04EC                             ;*******************************************************************
04EC                             ; Page 5 primitive routines
04EC                             ;*******************************************************************
04EC                             ;falls through
04EC                SLASH:       ;=11
04EC   03                     INC   bc   
04ED   0A                     LD   a,(bc)   
04EE   FE 2F                  CP   "/"   
04F0   CA 93 07               JP   z,comment   
04F3   FE 61                  CP   "a"   
04F5   38 19                  JR   c,alt1   
04F7   FE 7B                  CP   "z"+1   
04F9   30 29                  JR   nc,alt2   
04FB   FE 69                  CP   "i"   
04FD   CA 06 08               JP   z,loopI   
0500   FE 6A                  CP   "j"   
0502   CA 0C 08               JP   z,loopJ   
0505   D6 61                  SUB   "a"   
0507   87                     ADD   A,A   
0508   21 82 0C               LD   hl,altVars   
050B   85                     ADD   a,l   
050C   6F                     LD   l,a   
050D   C3 A3 04               JP   var1   
0510                ALT1:        
0510   FE 41                  CP   "A"   
0512   38 10                  JR   c,alt2   
0514   FE 5B                  CP   "Z"+1   
0516   30 0C                  JR   nc,alt2   
0518   21 5E 0B               LD   hl,altcodes   
051B   D6 41                  SUB   "A"   
051D   85                     ADD   a,l   
051E   6F                     LD   l,a   
051F   7E                     LD   a,(hl)   ;       get low jump address
0520   26 06                  LD   h,msb(page6)   
0522   6F                     LD   L,A   
0523   E9                     JP   (hl)   ;       Jump to routine
0524                ALT2:        
0524   0B                     DEC   bc   
0525   18 3E                  JR   div   
0527                HEX:         
0527   21 00 00               LD   hl,0   ; clear hl to accept the number
052A                HEX1:        
052A   03                     INC   bc   
052B   0A                     LD   a,(bc)   ; Get the character which is a numeral
052C   CB 77                  BIT   6,A   ; is it uppercase alpha?
052E   CA 33 05               JP   z,hex2   ; no a decimal
0531   D6 07                  SUB   7   ; sub 7  to make $A - $F
0533                HEX2:        
0533   D6 30                  SUB   $30   ; Form decimal digit
0535   DA 3D 07               JP   c,num2   
0538   FE 10                  CP   $0F+1   
053A   D2 3D 07               JP   nc,num2   
053D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
053E   29                     ADD   hl,hl   ; 4X
053F   29                     ADD   hl,hl   ; 8X
0540   29                     ADD   hl,hl   ; 16X
0541   85                     ADD   A,l   ; add into bottom of hl
0542   6F                     LD   L,A   
0543   18 E5                  JR   hex1   
0545                MUL:         
0545   D1                     POP   de   ; de = 2nd factor
0546   E1                     POP   hl   
0547   C5                     PUSH   bc   ; Preserve the IP
0548   44                     LD   b,h   ; bc = 2nd value
0549   4D                     LD   c,l   
054A   21 00 00               LD   hl,0   
054D   3E 10                  LD   A,16   
054F                MUL2:        
054F   29                     ADD   hl,hl   
0550   CB 13                  RL   e   
0552   CB 12                  RL   d   
0554   30 04                  JR   nc,$+6   
0556   09                     ADD   hl,bc   
0557   30 01                  JR   nc,$+3   
0559   13                     INC   de   
055A   3D                     DEC   A   
055B   20 F2                  JR   nz,mul2   
055D   C1                     POP   bc   ; Restore the IP
055E   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
055F   ED 53 A4 0C            LD   (vRemain),de   
0563   FD E9                  JP   (iy)   
0565                DIV:         
0565   60 69                  LD   hl,bc   ; hl = IP
0567   C1                     POP   bc   ; bc = denominator
0568   E3                     EX   (sp),hl   ; save IP, hl = numerator
0569   7C                     LD   a,h   
056A   A8                     XOR   b   
056B   F5                     PUSH   af   
056C   A8                     XOR   b   
056D   F2 76 05               JP   p,absbc   
0570                             ;abshl
0570   AF                     XOR   a   
0571   95                     SUB   l   
0572   6F                     LD   l,a   
0573   9F                     SBC   a,a   
0574   94                     SUB   h   
0575   67                     LD   h,a   
0576                ABSBC:       
0576   A8                     XOR   b   
0577   F2 80 05               JP   p,$+9   
057A   AF                     XOR   a   
057B   91                     SUB   c   
057C   4F                     LD   c,a   
057D   9F                     SBC   a,a   
057E   90                     SUB   b   
057F   47                     LD   b,a   
0580   29                     ADD   hl,hl   
0581   3E 0F                  LD   a,15   
0583   11 00 00               LD   de,0   
0586   EB                     EX   de,hl   
0587   18 04                  JR   jumpin   
0589                LOOP1:       
0589   09                     ADD   hl,bc   ;--
058A                LOOP2:       
058A   3D                     DEC   a   ;4
058B   28 0E                  JR   z,EndSDiv   ;12|7
058D                JUMPIN:      
058D   CB 23                  SLA   e   ;8
058F   CB 12                  RL   d   ;8
0591   ED 6A                  ADC   hl,hl   ;15
0593   ED 42                  SBC   hl,bc   ;15
0595   38 F2                  JR   c,loop1   ;23-2b
0597   1C                     INC   e   ;--
0598   C3 8A 05               JP   Loop2   ;--
059B                ENDSDIV:      
059B   F1                     POP   af   
059C   F2 A5 05               JP   p,div10   
059F   AF                     XOR   a   
05A0   93                     SUB   e   
05A1   5F                     LD   e,a   
05A2   9F                     SBC   a,a   
05A3   92                     SUB   d   
05A4   57                     LD   d,a   
05A5                DIV10:       
05A5   C1                     POP   bc   
05A6   D5                     PUSH   de   ; quotient
05A7   22 A4 0C               LD   (vRemain),hl   ; remainder
05AA   FD E9                  JP   (iy)   
05AC                ARREND:      
05AC   ED 43 34 0C            LD   (vTemp1),bc   ; save IP
05B0   CD D5 03               CALL   rpop   
05B3   22 36 0C               LD   (vTemp2),hl   ; save old SP
05B6   54 5D                  LD   de,hl   ; de = hl = old SP
05B8   B7                     OR   a   
05B9   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05BB   CB 3C                  SRL   h   ; num items = num bytes / 2
05BD   CB 1D                  RR   l   
05BF   44 4D                  LD   bc,hl   ; bc = count
05C1   2A 90 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
05C4   71                     LD   (hl),c   ; write num items in length word
05C5   23                     INC   hl   
05C6   70                     LD   (hl),b   
05C7   23                     INC   hl   ; hl = array[0], bc = count
05C8                             ; de = old SP, hl = array[0], bc = count
05C8   18 11                  JR   arrayEnd2   
05CA                ARRAYEND1:      
05CA   0B                     DEC   bc   ; dec items count
05CB   1B                     DEC   de   
05CC   1B                     DEC   de   
05CD   1A                     LD   a,(de)   ; a = lsb of stack item
05CE   77                     LD   (hl),a   ; write lsb of array item
05CF   23                     INC   hl   ; move to msb of array item
05D0   3A 84 0C               LD   a,(vByteMode)   ; vByteMode=1?
05D3   3C                     INC   a   
05D4   28 05                  JR   z,arrayEnd2   
05D6   13                     INC   de   
05D7   1A                     LD   a,(de)   ; a = msb of stack item
05D8   1B                     DEC   de   
05D9   77                     LD   (hl),a   ; write msb of array item
05DA   23                     INC   hl   ; move to next word in array
05DB                ARRAYEND2:      
05DB   79                     LD   a,c   ; if not zero loop
05DC   B0                     OR   b   
05DD   20 EB                  JR   nz,arrayEnd1   
05DF   EB                     EX   de,hl   ; de = end of array
05E0   2A 36 0C               LD   hl,(vTemp2)   
05E3   F9                     LD   sp,hl   ; SP = old SP
05E4   2A 90 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
05E7   23                     INC   hl   
05E8   23                     INC   hl   
05E9   E5                     PUSH   hl   ; return array[0]
05EA   ED 53 90 0C            LD   (vHeapPtr),de   ; move heap* to end of array
05EE   ED 4B 34 0C            LD   bc,(vTemp1)   ; restore IP
05F2   FD E9                  JP   (iy)   
05F4                             ; **************************************************************************
05F4                             ; Page 6 Alt primitives
05F4                             ; **************************************************************************
05F4                          ALIGN   $100   
0600                PAGE6:       
0600                ARRSIZE_:      
0600                ARRSIZE:      
0600   E1                     POP   hl   
0601   2B                     DEC   hl   ; msb size
0602   56                     LD   d,(hl)   
0603   2B                     DEC   hl   ; lsb size
0604   5E                     LD   e,(hl)   
0605   D5                     PUSH   de   
0606                ANOP_:       
0606   FD E9                  JP   (iy)   
0608                BMODE_:      
0608   3A 84 0C               LD   a,(vByteMode)   
060B   2F                     CPL      
060C   32 84 0C               LD   (vByteMode),a   
060F   32 85 0C               LD   (vByteMode+1),a   
0612   FD E9                  JP   (iy)   
0614                WMODE_:      
0614   21 00 00               LD   hl,FALSE   
0617   22 84 0C               LD   (vByteMode),hl   
061A                FALSE_:      
061A   21 00 00               LD   hl,FALSE   
061D   E5                     PUSH   hl   
061E   FD E9                  JP   (iy)   
0620                HMODE_:      
0620   3A B0 0C               LD   a,(vHexMode)   
0623   2F                     CPL      
0624   32 B0 0C               LD   (vHexMode),a   
0627   32 B1 0C               LD   (vHexMode+1),a   
062A   FD E9                  JP   (iy)   
062C                EMIT_:       
062C   E1                     POP   hl   
062D   7D                     LD   a,l   
062E   CD 85 00               CALL   putchar   
0631   FD E9                  JP   (iy)   
0633                EXEC_:       
0633   CD 38 06               CALL   exec1   
0636   FD E9                  JP   (iy)   
0638                EXEC1:       
0638   E1                     POP   hl   
0639   E3                     EX   (SP),hl   
063A   E9                     JP   (hl)   
063B                KEY_:        
063B   CD 81 00               CALL   getchar   
063E   26 00                  LD   H,0   
0640   6F                     LD   L,A   
0641   E5                     PUSH   hl   
0642   FD E9                  JP   (iy)   
0644                GO_:         ;\^
0644   D1                     POP   de   
0645                GO1:         
0645   7A                     LD   a,D   ; skip if destination address is null
0646   B3                     OR   E   
0647   28 0E                  JR   z,go3   
0649   60 69                  LD   hl,bc   
064B   03                     INC   bc   ; read next char from source
064C   0A                     LD   a,(bc)   ; if ; to tail call optimise
064D   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
064F   28 03                  JR   z,go2   
0651   CD CA 03               CALL   rpush   ; save Instruction Pointer
0654                GO2:         
0654   42 4B                  LD   bc,de   
0656   0B                     DEC   bc   
0657                GO3:         
0657   FD E9                  JP   (iy)   
0659                INPORT_:      ; \<
0659   E1                     POP   hl   
065A   79                     LD   a,c   
065B   4D                     LD   c,l   
065C   ED 68                  IN   L,(c)   
065E   26 00                  LD   H,0   
0660   4F                     LD   c,A   
0661   E5                     PUSH   hl   
0662   FD E9                  JP   (iy)   
0664                NEWLN_:      
0664   CD B3 03               CALL   crlf   
0667   FD E9                  JP   (iy)   
0669                OUTPORT_:      
0669   E1                     POP   hl   
066A   59                     LD   e,c   
066B   4D                     LD   c,l   
066C   E1                     POP   hl   
066D   ED 69                  OUT   (c),l   
066F   4B                     LD   c,E   
0670   FD E9                  JP   (iy)   
0672                             ; shiftLeft
0672                             ; value count
0672                SHL_:        
0672                SHIFTLEFT:      
0672   D1                     POP   de   ; de = count
0673   E1                     POP   hl   ; hl = value
0674   C5                     PUSH   bc   ; save IP
0675   7B                     LD   a,e   
0676   B7                     OR   a   
0677   CA 7E 06               JP   z,shiftLeft2   
067A   43                     LD   b,e   
067B                SHIFTLEFT1:      
067B   29                     ADD   hl,hl   ; left shift hl
067C   10 FD                  DJNZ   shiftLeft1   
067E                SHIFTLEFT2:      
067E   C1                     POP   bc   
067F   E5                     PUSH   hl   ; restore IP
0680   FD E9                  JP   (iy)   
0682                SHR_:        
0682   D1                     POP   de   ; de = count
0683   E1                     POP   hl   ; hl = value
0684   C5                     PUSH   bc   ; save IP
0685   7B                     LD   a,e   
0686   B7                     OR   a   
0687   CA 91 06               JP   z,shiftRight2   
068A   43                     LD   b,e   
068B                SHIFTRIGHT1:      
068B   CB 3C                  SRL   h   
068D   CB 1D                  RR   l   
068F   10 FA                  DJNZ   shiftRight1   
0691                SHIFTRIGHT2:      
0691   C1                     POP   bc   
0692   E5                     PUSH   hl   ; restore IP
0693   FD E9                  JP   (iy)   
0695                TRUE_:       
0695   21 FF FF               LD   hl,TRUE   
0698   E5                     PUSH   hl   
0699   FD E9                  JP   (iy)   
069B                             ;/D -> /UD depth            depth
069B                             ;/L -> /UE edit def         editDef
069B                             ;/P -> /UP prompt           prompt
069B                             ;/T -> /US print stack      printStk
069B                UTILITY_:      
069B                UTILITY:      
069B   03                     INC   bc   
069C   0A                     LD   a,(bc)   
069D   FE 44                  CP   "D"   
069F   20 12                  JR   nz,utility1   
06A1                             ; depth:
06A1   21 00 00               LD   hl,0   
06A4   39                     ADD   hl,SP   
06A5   EB                     EX   de,hl   
06A6   21 00 0A               LD   hl,DSTACK   
06A9   B7                     OR   A   
06AA   ED 52                  SBC   hl,de   
06AC   CB 3C                  SRL   h   
06AE   CB 1D                  RR   l   
06B0   E5                     PUSH   hl   
06B1   FD E9                  JP   (iy)   ; 
06B3                UTILITY1:      
06B3   FE 45                  CP   "E"   
06B5   C3 45 03               JP   editDef   
06B8   FE 50                  CP   "P"   
06BA   20 09                  JR   nz,utility2   
06BC   CD AA 03               CALL   prompt   
06BF   FD E9                  JP   (iy)   
06C1   FE 53                  CP   "S"   
06C3   20 1B                  JR   nz,utility3   
06C5                UTILITY2:      
06C5                             ; printStk:
06C5                             ; Mondo: \a@2- \- 1- ("@ \b@ \(,)(.) 2-) '
06C5   CD E5 03               CALL   ENTER   
06C8   60 3D 3E 20 60 2F 73 32 2D 2F 55 44 31 2D 28 23 2E 32 2D 29 5F 2F 4E 00 .CSTR   "`=> `/s2-/UD1-(#.2-)_/N"   
06E0                UTILITY3:      
06E0   FD E9                  JP   (iy)   
06E2                WHILE_:      
06E2                WHILE:       
06E2   E1                     POP   hl   
06E3   7D                     LD   a,l   
06E4   B4                     OR   h   
06E5   20 04                  JR   nz,while2   
06E7   C3 FF 07               JP   loopEnd4   
06EA   03                     INC   bc   ; IP = one after )
06EB                WHILE2:      
06EB   FD E9                  JP   (iy)   
06ED                             ;*******************************************************************
06ED                             ; Page 5 primitive routines continued
06ED                             ;*******************************************************************
06ED                DEF:         ; create a colon definition
06ED   03                     INC   bc   
06EE   0A                     LD   A,(bc)   ; Get the next character
06EF   FE 3A                  CP   ":"   ; is it anonymouse
06F1   20 09                  JR   nz,def0   
06F3   03                     INC   bc   
06F4   ED 5B 90 0C            LD   de,(vHeapPtr)   ; return start of definition
06F8   D5                     PUSH   de   
06F9   C3 0A 07               JP   def1   
06FC                DEF0:        
06FC   32 8A 0C               LD   (vLastDef),A   
06FF   CD 13 03               CALL   lookup   
0702   ED 5B 90 0C            LD   de,(vHeapPtr)   ; start of defintion
0706   73                     LD   (hl),E   ; Save low byte of address in cFA
0707   23                     INC   hl   
0708   72                     LD   (hl),D   ; Save high byte of address in cFA+1
0709   03                     INC   bc   
070A                DEF1:        ; Skip to end of definition
070A   0A                     LD   a,(bc)   ; Get the next character
070B   03                     INC   bc   ; Point to next character
070C   12                     LD   (de),A   
070D   13                     INC   de   
070E   FE 3B                  CP   ";"   ; Is it a semicolon
0710   28 02                  JR   z,def2   ; end the definition
0712   18 F6                  JR   def1   ; get the next element
0714                DEF2:        
0714   0B                     DEC   bc   
0715                DEF3:        
0715   ED 53 90 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0719   FD E9                  JP   (iy)   
071B                NUM:         
071B   21 00 00               LD   hl,$0000   ; clear hl to accept the number
071E   0A                     LD   a,(bc)   ; Get numeral or -
071F   FE 2D                  CP   "-"   
0721   20 01                  JR   nz,num0   
0723   03                     INC   bc   ; move to next char, no flags affected
0724                NUM0:        
0724   08                     EX   af,af'   ; save zero flag = 0 for later
0725                NUM1:        
0725   0A                     LD   a,(bc)   ; read digit
0726   D6 30                  SUB   "0"   ; less than 0?
0728   38 13                  JR   c,num2   ; not a digit, exit loop
072A   FE 0A                  CP   10   ; greater that 9?
072C   30 0F                  JR   nc,num2   ; not a digit, exit loop
072E   03                     INC   bc   ; inc IP
072F   54 5D                  LD   de,hl   ; multiply hl * 10
0731   29                     ADD   hl,hl   
0732   29                     ADD   hl,hl   
0733   19                     ADD   hl,de   
0734   29                     ADD   hl,hl   
0735   85                     ADD   a,l   ; add digit in a to hl
0736   6F                     LD   l,a   
0737   3E 00                  LD   a,0   
0739   8C                     ADC   a,h   
073A   67                     LD   h,a   
073B   18 E8                  JR   num1   
073D                NUM2:        
073D   0B                     DEC   bc   
073E   08                     EX   af,af'   ; restore zero flag
073F   20 07                  JR   nz,num3   
0741   EB                     EX   de,hl   ; negate the value of hl
0742   21 00 00               LD   hl,0   
0745   B7                     OR   a   ; jump to sub2
0746   ED 52                  SBC   hl,de   
0748                NUM3:        
0748   E5                     PUSH   hl   ; Put the number on the stack
0749   FD E9                  JP   (iy)   ; and process the next character
074B                             ;*******************************************************************
074B                             ; Subroutines
074B                             ;*******************************************************************
074B                             ; hl = value
074B                PRINTDEC:      
074B   CB 7C                  BIT   7,h   
074D   28 0B                  JR   z,printDec2   
074F   3E 2D                  LD   a,"-"   
0751   CD 85 00               CALL   putchar   
0754   AF                     XOR   a   
0755   95                     SUB   l   
0756   6F                     LD   l,a   
0757   9F                     SBC   a,a   
0758   94                     SUB   h   
0759   67                     LD   h,a   
075A                PRINTDEC2:      
075A   C5                     PUSH   bc   
075B   0E 00                  LD   c,0   ; leading zeros flag = false
075D   11 F0 D8               LD   de,-10000   
0760   CD 7C 07               CALL   printDec4   
0763   11 18 FC               LD   de,-1000   
0766   CD 7C 07               CALL   printDec4   
0769   11 9C FF               LD   de,-100   
076C   CD 7C 07               CALL   printDec4   
076F   1E F6                  LD   e,-10   
0771   CD 7C 07               CALL   printDec4   
0774   0C                     INC   c   ; flag = true for at least digit
0775   1E FF                  LD   e,-1   
0777   CD 7C 07               CALL   printDec4   
077A   C1                     POP   bc   
077B   C9                     RET      
077C                PRINTDEC4:      
077C   06 2F                  LD   b,"0"-1   
077E                PRINTDEC5:      
077E   04                     INC   b   
077F   19                     ADD   hl,de   
0780   38 FC                  JR   c,printDec5   
0782   ED 52                  SBC   hl,de   
0784   3E 30                  LD   a,"0"   
0786   B8                     CP   b   
0787   20 05                  JR   nz,printDec6   
0789   AF                     XOR   a   
078A   B1                     OR   c   
078B   C8                     RET   z   
078C   18 01                  JR   printDec7   
078E                PRINTDEC6:      
078E   0C                     INC   c   
078F                PRINTDEC7:      
078F   78                     LD   a,b   
0790   C3 85 00               JP   putchar   
0793                COMMENT:      
0793   03                     INC   bc   ; point to next char
0794   0A                     LD   a,(bc)   
0795   FE 0D                  CP   "\r"   ; terminate at cr
0797   20 FA                  JR   nz,comment   
0799   0B                     DEC   bc   
079A   FD E9                  JP   (iy)   
079C                CARRY:       ;=10
079C   21 00 00               LD   hl,0   
079F   CB 15                  RL   l   
07A1   22 86 0C               LD   (vcarry),hl   
07A4   FD E9                  JP   (iy)   
07A6                             ; (val -- )
07A6                BEGIN:       
07A6                LOOPSTART:      
07A6   ED 43 34 0C            LD   (vTemp1),bc   ; save start
07AA   1E 01                  LD   e,1   ; skip to loop end, nesting = 1
07AC                LOOPSTART2:      
07AC   03                     INC   bc   
07AD   0A                     LD   a,(bc)   
07AE   CD 76 03               CALL   nesting   ; affects zero flag
07B1   20 F9                  JR   nz,loopStart2   
07B3   D1                     POP   de   ; de = limit
07B4   7B                     LD   a,e   ; is it zero?
07B5   B2                     OR   d   
07B6   28 1E                  JR   z,loopStart4   ; yes continue after skip
07B8   C6 02                  ADD   a,2   ; is it TRUE
07BA   82                     ADD   a,d   
07BB   20 03                  JR   nz,loopStart3   
07BD   11 01 00               LD   de,1   ; yes make it 1
07C0                LOOPSTART3:      
07C0   60 69                  LD   hl,bc   
07C2   CD CA 03               CALL   rpush   ; rpush loop end
07C5   0B                     DEC   bc   ; IP points to ")"
07C6   2A 34 0C               LD   hl,(vTemp1)   ; restore start
07C9   CD CA 03               CALL   rpush   ; rpush start
07CC   EB                     EX   de,hl   ; hl = limit
07CD   CD CA 03               CALL   rpush   ; rpush limit
07D0   21 FF FF               LD   hl,-1   ; hl = count = -1
07D3   CD CA 03               CALL   rpush   ; rpush count
07D6                LOOPSTART4:      
07D6   FD E9                  JP   (iy)   
07D8                AGAIN:       
07D8                LOOPEND:      
07D8   DD 7E 02               LD   a,(ix+2)   ; a = lsb(limit)
07DB   DD B6 03               OR   (ix+3)   ; if limit 0 exit loop
07DE   28 1F                  JR   z,loopEnd4   
07E0   3C                     INC   a   ; if limit -2
07E1   3C                     INC   a   
07E2   DD 86 03               ADD   a,(ix+3)   
07E5   28 08                  JR   z,loopEnd2   ; yes, loop again
07E7   DD 35 02               DEC   (ix+2)   ; dec limit
07EA   30 03                  JR   nc,loopEnd2   
07EC   DD 35 03               DEC   (ix+3)   
07EF                LOOPEND2:      
07EF   DD 34 00               INC   (ix+0)   ; inc counter
07F2   30 03                  JR   nc,loopEnd3   
07F4   DD 34 01               INC   (ix+1)   
07F7                LOOPEND3:      
07F7   DD 4E 04               LD   c,(ix+4)   ; IP = start
07FA   DD 46 05               LD   b,(ix+5)   
07FD   FD E9                  JP   (iy)   
07FF                LOOPEND4:      
07FF   11 08 00               LD   de,2*4   ; rpop frame
0802   DD 19                  ADD   ix,de   
0804   FD E9                  JP   (iy)   
0806                LOOPI:       
0806   2A 30 0C               LD   hl,(vLoopSP)   
0809   E5                     PUSH   hl   
080A   FD E9                  JP   (IY)   
080C                LOOPJ:       
080C   2A 30 0C               LD   hl,(vLoopSP)   ;the address of j is 6 bytes more than i
080F   11 06 00               LD   de,6   
0812   19                     ADD   hl,de   
0813   E5                     PUSH   hl   
0814   FD E9                  JP   (IY)   
0816                             ; 0 1 count
0816                             ; 2 3 limit
0816                             ; 4 5 start
0816                             ; 6 7 end
0816                             ; 
0816                             ; begin:
0816                             ; loopStart:
0816                             ;     pop hl                      ; hl = condition
0816                             ;     ld a,l                      ; if false skip to end
0816                             ;     or h
0816                             ;     jr z, loopStart2
0816                             ;     inc hl
0816                             ;     ld a,l                      ; if false skip to end
0816                             ;     or h
0816                             ;     dec hl
0816                             ;     jr nz, loopStart1
0816                             ;     inc hl
0816                             ;     inc hl
0816                             ; loopStart1:
0816                             ;     push hl                     ; push condition
0816                             ;     ld hl,bc                    ; rpush start
0816                             ;     call rpush                  ; rpush start
0816                             ;     jp (iy)
0816                             ; loopStart2:
0816                             ;     jp (iy)
0816                             ; again:
0816                             ; loopEnd:
0816                             ;     call rpop                   ; IP = rpeek start
0816                             ;     ld bc,hl
0816                             ;     jp (iy)
0816                             ; lparen:
0816                             ; loopStart:
0816                             ;     push bc                     ; save IP
0816                             ;     ld e,1                      ; skip to loop end, nesting = 1
0816                             ; loopStart2:
0816                             ;     inc bc
0816                             ;     ld a,(bc)
0816                             ;     call nesting
0816                             ;     xor A
0816                             ;     or E
0816                             ;     jr nz,loopStart2
0816                             ;     pop hl                      ; hl = after (
0816                             ;     push bc                     ; (sp) = after )
0816                             ;     push hl                     ; (sp) = start (sp+2) = end+1
0816                             ;     jp (iy)                     ; interp ) after NexT
0816                             ; rparen:
0816                             ; loopEnd:
0816                             ;     pop bc                      ; IP = start
0816                             ;     push bc                     ; (sp) = ) (sp+2) = (
0816                             ;     inc bc                      ; IP = one after (
0816                             ;     jp (iy)
0816                DSIZE:    EQU   $80   
0816                RSIZE:    EQU   $80   
0816                LSIZE:    EQU   $80   
0816                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
0816                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   $80-32-1-5   
0BB8                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                TBPTR:    DS   2   ; reserved for tests
0C34                VTEMP1:   DS   2   ; 
0C36                VTEMP2:   DS   2   ; 
0C38                RST08:    DS   2   
0C3A                RST10:    DS   2   
0C3C                RST18:    DS   2   
0C3E                RST20:    DS   2   
0C40                RST28:    DS   2   
0C42                RST30:    DS   2   ; 
0C44                BAUD:     DS   2   ; 
0C46                INTVEC:   DS   2   ; 
0C48                NMIVEC:   DS   2   ; 
0C4A                GETCVEC:   DS   2   ; 
0C4C                PUTCVEC:   DS   2   ; 
0C4E                          DS   26*2   
0C82                ALTVARS:      
0C82                          DS   2   ; a
0C84                VBYTEMODE:   DS   2   ; b
0C86                VCARRY:   DS   2   ; c
0C88                          DS   2   ; d
0C8A                VLASTDEF:   DS   2   ; e
0C8C                          DS   2   ; f
0C8E                          DS   2   ; g
0C90                VHEAPPTR:   DS   2   ; h
0C92                          DS   2   ; i
0C94                          DS   2   ; j
0C96                          DS   2   ; k
0C98                          DS   2   ; l
0C9A                          DS   2   ; m
0C9C                          DS   2   ; n
0C9E                          DS   2   ; o
0CA0                VPOINTER:   DS   2   ; p
0CA2                          DS   2   ; q
0CA4                VREMAIN:   DS   2   ; r
0CA6                VS0:      DS   2   ; s
0CA8                VTIBPTR:   DS   2   ; t
0CAA                          DS   2   ; u
0CAC                          DS   2   ; v
0CAE                          DS   2   ; w
0CB0                VHEXMODE:   DS   2   ; x
0CB2                          DS   2   ; y
0CB4                          DS   2   ; z
0CB6                VARS:     DS   VARS_SIZE   
0D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 43 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 184 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               FFFF DEFINED AT LINE 12 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
BSLASH:             005C DEFINED AT LINE 23 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 49 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 51 IN MAIN.asm
EDIT_:              0186 DEFINED AT LINE 54 IN MAIN.asm
LIST_:              0192 DEFINED AT LINE 57 IN MAIN.asm
PRINTSTACK_:        0192 DEFINED AT LINE 60 IN MAIN.asm
IOPCODES:           019A DEFINED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
IALTCODES:          01C4 DEFINED AT LINE 110 IN MAIN.asm
BACKSPACE:          01E0 DEFINED AT LINE 143 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
START:              01F0 DEFINED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          0205 DEFINED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
INTERPRET2:         020F DEFINED AT LINE 164 IN MAIN.asm
                    > USED AT LINE 146 IN MAIN.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
INTERPRET3:         0217 DEFINED AT LINE 171 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
INTERPRET4:         021D DEFINED AT LINE 177 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
WAITCHAR:           0222 DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
MACRO:              0251 DEFINED AT LINE 208 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
WAITCHAR1:          0262 DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
WAITCHAR3:          0270 DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
WAITCHAR4:          0286 DEFINED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
NEXT:               028E DEFINED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
EXIT:               02A2 DEFINED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
ETX:                02AC DEFINED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
ETX1:               02B5 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
INIT:               02B8 DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 154 IN MAIN.asm
INIT1:              02CB DEFINED AT LINE 285 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
INITOPS:            02EF DEFINED AT LINE 303 IN MAIN.asm
INITOPS1:           02F8 DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
INITOPS2:           0308 DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
INITOPS2A:          030D DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
LOOKUP:             0313 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
LOOKUP1:            0317 DEFINED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
LOOKUP2:            0319 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
PRINTHEX:           0326 DEFINED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
PRINTHEX2:          0331 DEFINED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
PRINTHEX3:          033A DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
EDITDEF:            0345 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
EDITDEF1:           0362 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
EDITDEF2:           0363 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
EDITDEF3:           036B DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
NESTING:            0376 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
NESTING1A:          0381 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
NESTING1:           0384 DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
NESTING2:           0397 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 434 IN MAIN.asm
NESTING3:           0399 DEFINED AT LINE 440 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
NESTING4:           03A8 DEFINED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
PROMPT:             03AA DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
CRLF:               03B3 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
PRINTSTR:           03BA DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 148 IN MAIN.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
PUTSTR0:            03C1 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
PUTSTR:             03C5 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
RPUSH:              03CA DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
RPOP:               03D5 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
RPOP2:              03DF DEFINED AT LINE 491 IN MAIN.asm
WRITECHAR:          03E0 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
ENTER:              03E5 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 511 IN MAIN.asm
BSLASH_:            0400 DEFINED AT LINE 513 IN MAIN.asm
DQUOTE_:            0400 DEFINED AT LINE 514 IN MAIN.asm
QUESTION_:          0400 DEFINED AT LINE 515 IN MAIN.asm
LBRACE_:            0400 DEFINED AT LINE 516 IN MAIN.asm
RBRACE_:            0400 DEFINED AT LINE 517 IN MAIN.asm
NOP_:               0400 DEFINED AT LINE 518 IN MAIN.asm
AMPER_:             0402 DEFINED AT LINE 521 IN MAIN.asm
AND_:               0402 DEFINED AT LINE 522 IN MAIN.asm
AND1:               0409 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
PIPE_:              040D DEFINED AT LINE 536 IN MAIN.asm
OR_:                040D DEFINED AT LINE 537 IN MAIN.asm
CARET_:             0416 DEFINED AT LINE 547 IN MAIN.asm
XOR_:               0416 DEFINED AT LINE 548 IN MAIN.asm
PLUS_:              041F DEFINED AT LINE 558 IN MAIN.asm
ADD_:               041F DEFINED AT LINE 559 IN MAIN.asm
CALL_:              0426 DEFINED AT LINE 566 IN MAIN.asm
DOT_:               0430 DEFINED AT LINE 574 IN MAIN.asm
DOT2:               0434 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
COMMA_:             043B DEFINED AT LINE 582 IN MAIN.asm
HDOT_:              043B DEFINED AT LINE 583 IN MAIN.asm
UNDERSCORE_:        0441 DEFINED AT LINE 588 IN MAIN.asm
DROP_:              0441 DEFINED AT LINE 589 IN MAIN.asm
HASH_:              0444 DEFINED AT LINE 593 IN MAIN.asm
DUP_:               0444 DEFINED AT LINE 594 IN MAIN.asm
DOLLAR_:            0449 DEFINED AT LINE 601 IN MAIN.asm
SWAP_:              0449 DEFINED AT LINE 602 IN MAIN.asm
PERCENT_:           044E DEFINED AT LINE 608 IN MAIN.asm
OVER_:              044E DEFINED AT LINE 609 IN MAIN.asm
SEMI_:              0455 DEFINED AT LINE 617 IN MAIN.asm
RET_:               0455 DEFINED AT LINE 618 IN MAIN.asm
TILDE_:             045C DEFINED AT LINE 623 IN MAIN.asm
NOT:                045C DEFINED AT LINE 624 IN MAIN.asm
BANG_:              0466 DEFINED AT LINE 635 IN MAIN.asm
STORE_:             0466 DEFINED AT LINE 636 IN MAIN.asm
ASSIGN:             0466 DEFINED AT LINE 637 IN MAIN.asm
ASSIGN0:            0468 DEFINED AT LINE 640 IN MAIN.asm
ASSIGN1:            046B DEFINED AT LINE 642 IN MAIN.asm
MINUS_:             0470 DEFINED AT LINE 648 IN MAIN.asm
SUB_:               0470 DEFINED AT LINE 649 IN MAIN.asm
SUB1:               047C DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
SUB2:               047E DEFINED AT LINE 660 IN MAIN.asm
EQ_:                0485 DEFINED AT LINE 666 IN MAIN.asm
GT_:                0490 DEFINED AT LINE 673 IN MAIN.asm
LT_:                0494 DEFINED AT LINE 677 IN MAIN.asm
LT1_:               0496 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
VAR_:               049F DEFINED AT LINE 686 IN MAIN.asm
VAR1:               04A3 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
VAR2:               04B1 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
GRAVE_:             04B4 DEFINED AT LINE 702 IN MAIN.asm
STR:                04B4 DEFINED AT LINE 703 IN MAIN.asm
STR1:               04B5 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
STR2:               04C0 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
LBRACK_:            04C3 DEFINED AT LINE 717 IN MAIN.asm
ARRDEF:             04C3 DEFINED AT LINE 718 IN MAIN.asm
AT_:                04CC DEFINED AT LINE 724 IN MAIN.asm
ARRACCESS:          04CC DEFINED AT LINE 725 IN MAIN.asm
ARRACCESS0:         04D4 DEFINED AT LINE 731 IN MAIN.asm
ARRACCESS1:         04D5 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
LPAREN_:            04D9 DEFINED AT LINE 737 IN MAIN.asm
RPAREN_:            04DC DEFINED AT LINE 739 IN MAIN.asm
NUM_:               04DF DEFINED AT LINE 742 IN MAIN.asm
COLON_:             04E2 DEFINED AT LINE 744 IN MAIN.asm
RBRACK_:            04E5 DEFINED AT LINE 746 IN MAIN.asm
QUOTE_:             04E8 DEFINED AT LINE 749 IN MAIN.asm
STAR_:              04EA DEFINED AT LINE 751 IN MAIN.asm
SLASH_:             04EC DEFINED AT LINE 753 IN MAIN.asm
SLASH:              04EC DEFINED AT LINE 760 IN MAIN.asm
ALT1:               0510 DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ALT2:               0524 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
HEX:                0527 DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
HEX1:               052A DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
HEX2:               0533 DEFINED AT LINE 804 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
MUL:                0545 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
MUL2:               054F DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
DIV:                0565 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
ABSBC:              0576 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
LOOP1:              0589 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
LOOP2:              058A DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
JUMPIN:             058D DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
ENDSDIV:            059B DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
DIV10:              05A5 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
ARREND:             05AC DEFINED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
ARRAYEND1:          05CA DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
ARRAYEND2:          05DB DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 949 IN MAIN.asm
ARRSIZE_:           0600 DEFINED AT LINE 952 IN MAIN.asm
ARRSIZE:            0600 DEFINED AT LINE 953 IN MAIN.asm
ANOP_:              0606 DEFINED AT LINE 960 IN MAIN.asm
BMODE_:             0608 DEFINED AT LINE 963 IN MAIN.asm
WMODE_:             0614 DEFINED AT LINE 971 IN MAIN.asm
FALSE_:             061A DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
HMODE_:             0620 DEFINED AT LINE 980 IN MAIN.asm
EMIT_:              062C DEFINED AT LINE 987 IN MAIN.asm
EXEC_:              0633 DEFINED AT LINE 993 IN MAIN.asm
EXEC1:              0638 DEFINED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
KEY_:               063B DEFINED AT LINE 1001 IN MAIN.asm
GO_:                0644 DEFINED AT LINE 1008 IN MAIN.asm
GO1:                0645 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
GO2:                0654 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
GO3:                0657 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
INPORT_:            0659 DEFINED AT LINE 1026 IN MAIN.asm
NEWLN_:             0664 DEFINED AT LINE 1036 IN MAIN.asm
OUTPORT_:           0669 DEFINED AT LINE 1040 IN MAIN.asm
SHL_:               0672 DEFINED AT LINE 1051 IN MAIN.asm
SHIFTLEFT:          0672 DEFINED AT LINE 1052 IN MAIN.asm
SHIFTLEFT1:         067B DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
SHIFTLEFT2:         067E DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
SHR_:               0682 DEFINED AT LINE 1068 IN MAIN.asm
SHIFTRIGHT1:        068B DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
SHIFTRIGHT2:        0691 DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
TRUE_:              0695 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
UTILITY_:           069B DEFINED AT LINE 1094 IN MAIN.asm
UTILITY:            069B DEFINED AT LINE 1095 IN MAIN.asm
UTILITY1:           06B3 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
UTILITY2:           06C5 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
UTILITY3:           06E0 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
WHILE_:             06E2 DEFINED AT LINE 1128 IN MAIN.asm
WHILE:              06E2 DEFINED AT LINE 1129 IN MAIN.asm
WHILE2:             06EB DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
DEF:                06ED DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
DEF0:               06FC DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
DEF1:               070A DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
DEF2:               0714 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
DEF3:               0715 DEFINED AT LINE 1171 IN MAIN.asm
NUM:                071B DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
NUM0:               0724 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
NUM1:               0725 DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
NUM2:               073D DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
NUM3:               0748 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
PRINTDEC:           074B DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
PRINTDEC2:          075A DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
PRINTDEC4:          077C DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
PRINTDEC5:          077E DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
PRINTDEC6:          078E DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
PRINTDEC7:          078F DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
COMMENT:            0793 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
CARRY:              079C DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
BEGIN:              07A6 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
LOOPSTART:          07A6 DEFINED AT LINE 1281 IN MAIN.asm
LOOPSTART2:         07AC DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
LOOPSTART3:         07C0 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
LOOPSTART4:         07D6 DEFINED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
AGAIN:              07D8 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
LOOPEND:            07D8 DEFINED AT LINE 1311 IN MAIN.asm
LOOPEND2:           07EF DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
LOOPEND3:           07F7 DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
LOOPEND4:           07FF DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
LOOPI:              0806 DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
LOOPJ:              080C DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 77 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 280 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 278 IN MAIN.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 305 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 784 IN MAIN.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
TBPTR:              0C32 DEFINED AT LINE 31 IN ram.asm
VTEMP1:             0C34 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
VTEMP2:             0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
RST08:              0C38 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C3A DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3C DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C3E DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C40 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C42 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C44 DEFINED AT LINE 41 IN ram.asm
INTVEC:             0C46 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C48 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C4A DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4C DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C82 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
VBYTEMODE:          0C84 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
VCARRY:             0C86 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 1276 IN MAIN.asm
VLASTDEF:           0C8A DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
VHEAPPTR:           0C90 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
VPOINTER:           0CA0 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
VREMAIN:            0CA4 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
VS0:                0CA6 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
VTIBPTR:            0CA8 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
VHEXMODE:           0CB0 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
VARS:               0CB6 DEFINED AT LINE 77 IN ram.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
HEAP:               0D1E DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 293 IN MAIN.asm
