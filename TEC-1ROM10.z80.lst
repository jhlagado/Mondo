0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $0800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 38 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 3A 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3C 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3E 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 40 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 42 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 46 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 48 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 4A 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 4C 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 38 0C               LD   (RST08),HL   
0094   22 3A 0C               LD   (RST10),HL   
0097   22 3C 0C               LD   (RST18),HL   
009A   22 3E 0C               LD   (RST20),HL   
009D   22 40 0C               LD   (RST28),HL   
00A0   22 42 0C               LD   (RST30),HL   
00A3   22 46 0C               LD   (INTVEC),HL   
00A6   22 48 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 4A 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 4C 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   C3 20 02               JP   start   
00C6                             ; 
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;       Mondo Minimal Interpreter for the Z80
00C6                             ; 
00C6                             ;       Ken Boak, John Hardy and Craig Jones.
00C6                             ; 
00C6                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00C6                             ; 
00C6                             ;       see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   1   ; not FF, for Mondo
00C6                FALSE:    EQU   0   
00C6                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in Mondo)
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                .macro LITDAT,len
00C6                             ; 
00C6                 db len
00C6                .endm
00C6                 
00C6                .macro REPDAT,len,data
00C6                             ; 
00C6                 db (len | $80)
00C6                 db data
00C6                .endm
00C6                 
00C6                .macro ENDDAT,
00C6                             ; 
00C6                 db 0
00C6                .endm
00C6                 
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put Mondo code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mondo and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                REEDIT_:      
0180   5C 65 5C 40 5C 4C 3B   DB   "\\e\\@\\L;"   ; remembers last line edited
0187                EDIT_:       
0187   60 3F 60 3F 5C 50 5C 4C 3B 00 .CSTR   "`?`?\\P\\L;"   
0191                LIST_:       
0191   5C 4E 32 36 28 5C 69 40 36 35 2B 5C 4C 5C 74 40 30 3E 28 5C 4E 29 29 5C 50 3B 00 .CSTR   "\\N26(\\i@65+\\L\\t@0>(\\N))\\P;"   
01AC                PRINTSTACK_:      
01AC   5C 54 5C 50 3B 00      .CSTR   "\\T\\P;"   
01B2                IOPCODES:      
01B2                          ;*Macro unroll:  LITDAT 15
01B2   0F                     DB   15   
01B3   70                     DB   lsb(bang_)   ;   !
01B4   42                     DB   lsb(dquote_)   ;   "
01B5   C8                     DB   lsb(hash_)   ;    #
01B6   77                     DB   lsb(dollar_)   ;    $
01B7   4E                     DB   lsb(percent_)   ;    %
01B8   00                     DB   lsb(amper_)   ;    &
01B9   3F                     DB   lsb(quote_)   ;    '
01BA   D7                     DB   lsb(lparen_)   ;    (
01BB   D7                     DB   lsb(rparen_)   ;    )
01BC   E8                     DB   lsb(star_)   ;    *
01BD   1D                     DB   lsb(plus_)   ;    +
01BE   39                     DB   lsb(comma_)   ;    ,
01BF   7C                     DB   lsb(minus_)   ;    -
01C0   2E                     DB   lsb(dot_)   ;    .
01C1   EA                     DB   lsb(slash_)   ;    /	;/MOD
01C2                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
01C2   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
01C3   DA                     DB   lsb(num_)   
01C4                          ;*Macro unroll:  LITDAT 7
01C4   07                     DB   7   
01C5   E3                     DB   lsb(colon_)   ;    :
01C6   55                     DB   lsb(semi_)   ;    ;
01C7   A1                     DB   lsb(lt_)   ;    <
01C8   91                     DB   lsb(eq_)   ;    =
01C9   9D                     DB   lsb(gt_)   ;    >
01CA   FB                     DB   lsb(question_)   ;    ?   ( -- val )  read a char from input
01CB   47                     DB   lsb(at_)   ;    @
01CC                          ;*Macro unroll:  REPDAT 26, lsb(call_)		; call a command A, B ....Z
01CC   9A                     DB   (26 | $80)   ; call a command A, B ....Z
01CD   24                     DB   lsb(call_)   
01CE                          ;*Macro unroll:  LITDAT 6
01CE   06                     DB   6   
01CF   DD                     DB   lsb(lbrack_)   ;    [
01D0   EC                     DB   lsb(bslash_)   ;    \
01D1   E0                     DB   lsb(rbrack_)   ;    ]
01D2   14                     DB   lsb(caret_)   ;    ^
01D3   E6                     DB   lsb(underscore_)   ;    _
01D4   B9                     DB   lsb(grave_)   ;    `   ; for printing `hello`
01D5                          ;*Macro unroll:  REPDAT 26, lsb(var_)		; a b c .....z
01D5   9A                     DB   (26 | $80)   ; a b c .....z
01D6   B2                     DB   lsb(var_)   
01D7                          ;*Macro unroll:  LITDAT 4
01D7   04                     DB   4   
01D8   63                     DB   lsb(lbrace_)   ;    {
01D9   0B                     DB   lsb(pipe_)   ;    |
01DA   68                     DB   lsb(rbrace_)   ;    }
01DB   5C                     DB   lsb(tilde_)   ;    ~ ( a b c -- b c a ) rotate
01DC                IALTCODES:      
01DC                          ;*Macro unroll:  LITDAT 4
01DC   04                     DB   4   
01DD   30                     DB   lsb(cStore_)   ;!  byte store
01DE   08                     DB   lsb(aNop_)   ;"  				
01DF   08                     DB   lsb(aNop_)   ;#  edit definition 				
01E0   8C                     DB   lsb(newln_)   ;$  prints a newline to output	
01E1                          ;*Macro unroll:  REPDAT 21, lsb(aNop_)
01E1   95                     DB   (21 | $80)   
01E2   08                     DB   lsb(aNop_)   
01E3                             ; %
01E3                             ; &
01E3                             ; '
01E3                             ; (
01E3                             ; )
01E3                             ; *
01E3                             ; +
01E3                             ;,
01E3                             ;-
01E3                             ;.
01E3                             ;/
01E3                             ;0
01E3                             ;1
01E3                             ;2
01E3                             ;3
01E3                             ;4
01E3                             ;5
01E3                             ;6
01E3                             ;7
01E3                             ;8
01E3                             ;9
01E3                          ;*Macro unroll:  LITDAT 1
01E3   01                     DB   1   
01E4   0A                     DB   lsb(anonDef_)   ;:  return add of a anon def, \: 1 2 3;    \\ ret add of this
01E5                          ;*Macro unroll:  REPDAT 5, lsb(aNop_)
01E5   85                     DB   (5 | $80)   
01E6   08                     DB   lsb(aNop_)   
01E7                             ; 
01E7                             ;<
01E7                             ;=
01E7                             ;>
01E7                             ;?
01E7                          ;*Macro unroll:  LITDAT 21
01E7   15                     DB   21   
01E8   20                     DB   lsb(cFetch_)   ;@      byte fetch
01E9   08                     DB   lsb(aNop_)   ;A
01EA   08                     DB   lsb(aNop_)   ;B      conditional break from loop
01EB   08                     DB   lsb(aNop_)   ;C
01EC   35                     DB   lsb(depth_)   ;D      num items on stack
01ED   43                     DB   lsb(emit_)   ;E      emit a char
01EE   08                     DB   lsb(aNop_)   ;F
01EF   5C                     DB   lsb(go_)   ;G      execute Mondo code
01F0   08                     DB   lsb(aNop_)   ;H
01F1   71                     DB   lsb(inPort_)   ;I      input from port
01F2   08                     DB   lsb(aNop_)   ;J
01F3   08                     DB   lsb(aNop_)   ;K
01F4   52                     DB   lsb(editDef_)   ;L      edit line
01F5   08                     DB   lsb(aNop_)   ;M
01F6   8C                     DB   lsb(newln_)   ;N      prints a newline to output
01F7   91                     DB   lsb(outPort_)   ;O      output to port
01F8   57                     DB   lsb(prompt_)   ;P      print Mondo prompt
01F9   08                     DB   lsb(aNop_)   ;Q
01FA   08                     DB   lsb(aNop_)   ;R
01FB   13                     DB   lsb(arrSize_)   ;S      array size
01FC   9A                     DB   lsb(printStk_)   ;T      non-destructively prints stack
01FD                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
01FD   83                     DB   (3 | $80)   
01FE   08                     DB   lsb(aNop_)   
01FF                             ;U
01FF                             ;V
01FF                             ;W
01FF                          ;*Macro unroll:  LITDAT 1
01FF   01                     DB   1   
0200   4A                     DB   lsb(exec_)   ;X      execute machine code
0201                          ;*Macro unroll:  REPDAT 2, lsb(aNop_)
0201   82                     DB   (2 | $80)   
0202   08                     DB   lsb(aNop_)   
0203                             ;Y
0203                             ;Z
0203                          ;*Macro unroll:  LITDAT 2
0203   02                     DB   2   
0204   1B                     DB   lsb(cArrDef_)   ;[      byte array
0205   27                     DB   lsb(comment_)   ;\      comment text, skips reading until end of line
0206                          ;*Macro unroll:  REPDAT 4, lsb(aNop_)
0206   84                     DB   (4 | $80)   
0207   08                     DB   lsb(aNop_)   
0208                             ; ]
0208                             ; ^
0208                             ; _
0208                             ; `
0208                          ;*Macro unroll:  REPDAT 8, lsb(altVar_)  ;a...h
0208   88                     DB   (8 | $80)   ;a...h
0209   00                     DB   lsb(altVar_)   
020A                          ;*Macro unroll:  LITDAT 2
020A   02                     DB   2   
020B   7C                     DB   lsb(i_)   ;i  returns index variable of current loop
020C   82                     DB   lsb(j_)   ;j  returns index variable of outer loop     \i+6
020D                          ;*Macro unroll:  REPDAT 16, lsb(altVar_) ;k...z
020D   90                     DB   (16 | $80)   ;k...z
020E   00                     DB   lsb(altVar_)   
020F                          ;*Macro unroll:  ENDDAT
020F   00                     DB   0   
0210                BACKSPACE:      
0210   79                     LD   a,c   
0211   B0                     OR   b   
0212   CA 3F 02               JP   z,interpret2   
0215   0B                     DEC   bc   
0216   CD BC 03               CALL   printStr   
0219   08 20 08 00            .CSTR   "\b \b"   
021D   C3 3F 02               JP   interpret2   
0220                START:       
0220   31 00 0A               LD   SP,DSTACK   ; start of Mondo
0223   CD E8 02               CALL   init   ; setups
0226   CD BC 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0229   4D 6F 6E 64 6F 20 30 2E 31 0D 0A 00 .CSTR   "Mondo 0.1\r\n"   
0235                INTERPRET:      
0235   CD AC 03               CALL   prompt   
0238   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
023B   ED 43 A8 0C            LD   (vTIBPtr),BC   
023F                INTERPRET2:      ; calc nesting (a macro might have changed it)
023F   1E 00                  LD   E,0   ; initilize nesting value
0241   C5                     PUSH   BC   ; save offset into TIB,
0242                             ; BC is also the count of chars in TIB
0242   21 00 08               LD   hl,TIB   ; hl is start of TIB
0245   18 06                  JR   interpret4   
0247                INTERPRET3:      
0247   7E                     LD   A,(hl)   ; A = char in TIB
0248   23                     INC   hl   ; inc pointer into TIB
0249   0B                     DEC   BC   ; dec count of chars in TIB
024A   CD 80 03               CALL   nesting   ; update nesting value
024D                INTERPRET4:      
024D   79                     LD   A,C   ; is count zero?
024E   B0                     OR   B   
024F   20 F6                  JR   NZ,interpret3   ; if not loop
0251   C1                     POP   BC   ; restore offset into TIB
0252                             ; *******************************************************************
0252                             ; Wait for a character from the serial input (keyboard)
0252                             ; and store it in the text buffer. Keep accepting characters,
0252                             ; increasing the instruction pointer BC - until a newline received.
0252                             ; *******************************************************************
0252                WAITCHAR:      
0252   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0255   FE 20                  CP   $20   ; compare to space
0257   30 39                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
0259   FE 00                  CP   $0   ; is it end of string? null end of string
025B   28 59                  JR   Z,waitchar4   
025D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
025F   28 3F                  JR   Z,waitchar3   ; if anything else its macro/control
0261   FE 08                  CP   CTRL_H   
0263   28 AB                  JR   z,backSpace   
0265   16 01                  LD   d,msb(macros)   
0267   FE 05                  CP   CTRL_E   
0269   1E 87                  LD   e,lsb(edit_)   
026B   28 14                  JR   z,macro   
026D   FE 0A                  CP   CTRL_J   
026F   1E 80                  LD   e,lsb(reedit_)   
0271   28 0E                  JR   z,macro   
0273   FE 0C                  CP   CTRL_L   
0275   1E 91                  LD   e,lsb(list_)   
0277   28 08                  JR   z,macro   
0279   FE 10                  CP   CTRL_P   
027B   1E AC                  LD   e,lsb(printStack_)   
027D   28 02                  JR   z,macro   
027F   18 BE                  JR   interpret2   
0281                MACRO:       ;=25
0281   ED 43 A8 0C            LD   (vTIBPtr),BC   
0285   D5                     PUSH   de   
0286   CD E7 03               CALL   ENTER   ;Mondo go operation and jump to it
0289   5C 47 00               .CSTR   "\\G"   
028C   ED 4B A8 0C            LD   BC,(vTIBPtr)   
0290   18 AD                  JR   interpret2   
0292                WAITCHAR1:      
0292   21 00 08               LD   hl,TIB   
0295   09                     ADD   hl,BC   
0296   77                     LD   (hl),A   ; store the character in textbuf
0297   03                     INC   BC   
0298   CD 85 00               CALL   putchar   ; echo character to screen
029B   CD 80 03               CALL   nesting   
029E   18 B2                  JR   waitchar   ; wait for next character
02A0                WAITCHAR3:      
02A0   21 00 08               LD   hl,TIB   
02A3   09                     ADD   hl,BC   
02A4   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
02A6   23                     INC   hl   
02A7   36 0A                  LD   (hl),"\n"   
02A9   23                     INC   hl   ; ????
02AA   03                     INC   BC   
02AB   03                     INC   BC   
02AC   CD B5 03               CALL   crlf   ; echo character to screen
02AF   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02B0   B7                     OR   A   
02B1   20 9F                  JR   NZ,waitchar   
02B3   36 03                  LD   (hl),$03   ; store end of text ETX in text buffer
02B5   03                     INC   BC   
02B6                WAITCHAR4:      
02B6   ED 43 A8 0C            LD   (vTIBPtr),BC   
02BA   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02BD   0B                     DEC   BC   
02BE                             ; ********************************************************************************
02BE                             ; 
02BE                             ; Dispatch Routine.
02BE                             ; 
02BE                             ; Get the next character and form a 1 byte jump address
02BE                             ; 
02BE                             ; This target jump address is loaded into hl, and using jp (hl) to quickly
02BE                             ; jump to the selected function.
02BE                             ; 
02BE                             ; Individual handler routines will deal with each category:
02BE                             ; 
02BE                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02BE                             ; 
02BE                             ; 2. Detect characters a-z and jump to the variable handler routine
02BE                             ; 
02BE                             ; 3. All other characters are punctuation and cause a jump to the associated
02BE                             ; primitive code.
02BE                             ; 
02BE                             ; Instruction Pointer IP BC is incremented
02BE                             ; 
02BE                             ; *********************************************************************************
02BE                NEXT:        ; 
02BE   03                     INC   BC   ;       Increment the IP
02BF   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02C0   B7                     OR   a   ; is it NUL?
02C1   28 0F                  JR   z,exit   
02C3   FE 03                  CP   CTRL_C   
02C5   28 15                  JR   z,etx   
02C7   D6 21                  SUB   "!"   
02C9   38 F3                  JR   c,NEXT   
02CB   6F                     LD   L,A   ;       Index into table
02CC   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02CE   6E                     LD   L,(hl)   ;       get low jump address
02CF   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02D1   E9                     JP   (hl)   ;       Jump to routine
02D2                EXIT:        
02D2   03                     INC   BC   ; store offests into a table of bytes, smaller
02D3   50 59                  LD   de,BC   
02D5   CD D7 03               CALL   rpop   ; Restore Instruction pointer
02D8   44 4D                  LD   BC,hl   
02DA   EB                     EX   de,hl   
02DB   E9                     JP   (hl)   
02DC                ETX:         ;=12
02DC   21 00 F6               LD   hl,-DSTACK   ; check if stack pointer is underwater
02DF   39                     ADD   hl,SP   
02E0   30 03                  JR   NC,etx1   
02E2   31 00 0A               LD   SP,DSTACK   
02E5                ETX1:        
02E5   C3 35 02               JP   interpret   
02E8                INIT:        ;=68
02E8   21 80 0A               LD   hl,LSTACK   
02EB   22 30 0C               LD   (vLoopSP),hl   ; Loop stack pointer stored in memory
02EE   DD 21 80 09            LD   IX,RSTACK   
02F2   FD 21 BE 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
02F6   21 82 0C               LD   hl,altVars   ; init altVars to 0
02F9   06 34                  LD   b,26 * 2   
02FB                INIT1:       
02FB   36 00                  LD   (hl),0   
02FD   23                     INC   hl   
02FE   10 FB                  DJNZ   init1   
0300   21 00 0A               LD   hl,dStack   
0303   22 82 0C               LD   (vS0),hl   
0306   21 41 00               LD   hl,65   
0309   22 8A 0C               LD   (vLastDef),hl   
030C   21 1E 0D               LD   hl,HEAP   
030F   22 90 0C               LD   (vHeapPtr),hl   
0312   21 B6 0C               LD   hl,VARS   ; init namespaces to 0 using LDIR
0315   54 5D                  LD   de,hl   
0317   13                     INC   de   
0318   36 00                  LD   (hl),0   
031A   01 68 00               LD   BC,VARS_SIZE   
031D   ED B0                  LDIR      
031F                INITOPS:      
031F   21 B2 01               LD   hl,iOpcodes   
0322   11 00 0B               LD   de,opcodes   
0325   01 00 01               LD   BC,256   
0328                INITOPS1:      
0328   7E                     LD   A,(hl)   
0329   23                     INC   hl   
032A   CB 27                  SLA   A   
032C   C8                     RET   Z   
032D   38 09                  JR   C,initOps2   
032F   CB 3F                  SRL   A   
0331   4F                     LD   C,A   
0332   06 00                  LD   B,0   
0334   ED B0                  LDIR      
0336   18 F0                  JR   initOps1   
0338                INITOPS2:      
0338   CB 3F                  SRL   A   
033A   47                     LD   B,A   
033B   7E                     LD   A,(hl)   
033C   23                     INC   hl   
033D                INITOPS2A:      
033D   12                     LD   (de),A   
033E   13                     INC   de   
033F   10 FC                  DJNZ   initOps2a   
0341   18 E5                  JR   initOps1   
0343                LOOKUPREF:      
0343   16 00                  LD   D,0   
0345                LOOKUPREF0:      
0345   FE 61                  CP   "a"   
0347   30 06                  JR   NC,lookupRef2   
0349                LOOKUPREF1:      
0349   D6 41                  SUB   "A"   
034B   1E 00                  LD   E,0   
034D   18 04                  JR   lookupRef3   
034F                LOOKUPREF2:      
034F   D6 61                  SUB   "a"   
0351   1E 34                  LD   E,26*2   
0353                LOOKUPREF3:      
0353   87                     ADD   A,A   
0354   83                     ADD   A,E   
0355   21 B6 0C               LD   hl,VARS   
0358   85                     ADD   A,L   
0359   6F                     LD   L,A   
035A   3E 00                  LD   A,0   
035C   8C                     ADC   A,H   
035D   67                     LD   H,A   
035E   AF                     XOR   A   
035F   B3                     OR   E   ; sets Z flag if A-Z
0360   C9                     RET      
0361                PRINTHEX:      ;=31
0361                             ; Display hl as a 16-bit number in hex.
0361   C5                     PUSH   BC   ; preserve the IP
0362   7C                     LD   A,H   
0363   CD 6C 03               CALL   printhex2   
0366   7D                     LD   A,L   
0367   CD 6C 03               CALL   printhex2   
036A   C1                     POP   BC   
036B   C9                     RET      
036C                PRINTHEX2:      
036C   4F                     LD   C,A   
036D   1F                     RRA      
036E   1F                     RRA      
036F   1F                     RRA      
0370   1F                     RRA      
0371   CD 75 03               CALL   printhex3   
0374   79                     LD   A,C   
0375                PRINTHEX3:      
0375   E6 0F                  AND   0x0F   
0377   C6 90                  ADD   A,0x90   
0379   27                     DAA      
037A   CE 40                  ADC   A,0x40   
037C   27                     DAA      
037D   C3 85 00               JP   putchar   
0380                             ; **************************************************************************
0380                             ; calculate nesting value
0380                             ; A is char to be tested,
0380                             ; E is the nesting value (initially 0)
0380                             ; E is increased by ( and [
0380                             ; E is decreased by ) and ]
0380                             ; E has its bit 7 toggled by `
0380                             ; limited to 127 levels
0380                             ; **************************************************************************
0380                NESTING:      ;=44
0380   FE 60                  CP   "`"   
0382   20 0A                  JR   NZ,nesting1   
0384   CB 7B                  BIT   7,E   
0386   28 03                  JR   Z,nesting1a   
0388   CB BB                  RES   7,E   
038A   C9                     RET      
038B                NESTING1A:      
038B   CB FB                  SET   7,E   
038D   C9                     RET      
038E                NESTING1:      
038E   CB 7B                  BIT   7,E   
0390   C0                     RET   NZ   
0391   FE 3A                  CP   ":"   
0393   28 08                  JR   Z,nesting2   
0395   FE 5B                  CP   "["   
0397   28 04                  JR   Z,nesting2   
0399   FE 28                  CP   "("   
039B   20 02                  JR   NZ,nesting3   
039D                NESTING2:      
039D   1C                     INC   E   
039E   C9                     RET      
039F                NESTING3:      
039F   FE 3B                  CP   ";"   
03A1   28 07                  JR   Z,nesting4   
03A3   FE 5D                  CP   "]"   
03A5   28 03                  JR   Z,nesting4   
03A7   FE 29                  CP   ")"   
03A9   C0                     RET   NZ   
03AA                NESTING4:      
03AA   1D                     DEC   E   
03AB   C9                     RET      
03AC                PROMPT:      ;=9
03AC   CD BC 03               CALL   printStr   
03AF   0D 0A 3E 20 00         .CSTR   "\r\n> "   
03B4   C9                     RET      
03B5                CRLF:        ;=7
03B5   CD BC 03               CALL   printStr   
03B8   0D 0A 00               .CSTR   "\r\n"   
03BB   C9                     RET      
03BC                PRINTSTR:      ;=7
03BC   E3                     EX   (SP),hl   ; swap			
03BD   CD C7 03               CALL   putStr   
03C0   23                     INC   hl   ; inc past null
03C1   E3                     EX   (SP),hl   ; put it back	
03C2   C9                     RET      
03C3                PUTSTR0:      ;=9
03C3   CD 85 00               CALL   putchar   
03C6   23                     INC   hl   
03C7                PUTSTR:      
03C7   7E                     LD   A,(hl)   
03C8   B7                     OR   A   
03C9   20 F8                  JR   NZ,putStr0   
03CB   C9                     RET      
03CC                RPUSH:       ;=11
03CC   DD 2B                  DEC   IX   
03CE   DD 74 00               LD   (IX+0),H   
03D1   DD 2B                  DEC   IX   
03D3   DD 75 00               LD   (IX+0),L   
03D6   C9                     RET      
03D7                RPOP:        ;=11
03D7   DD 6E 00               LD   L,(IX+0)   
03DA   DD 23                  INC   IX   
03DC   DD 66 00               LD   H,(IX+0)   
03DF   DD 23                  INC   IX   
03E1                RPOP2:       
03E1   C9                     RET      
03E2                WRITECHAR:      ;=5
03E2   77                     LD   (hl),A   
03E3   23                     INC   hl   
03E4   C3 85 00               JP   putchar   
03E7                ENTER:       ;=9
03E7   60 69                  LD   hl,BC   
03E9   CD CC 03               CALL   rpush   ; save Instruction Pointer
03EC   C1                     POP   BC   
03ED   0B                     DEC   BC   
03EE   FD E9                  JP   (IY)   
03F0                             ; **********************************************************************			
03F0                             ; Page 4 primitive routines
03F0                             ; **********************************************************************
03F0                          ALIGN   $100   
0400                PAGE4:       
0400                AMPER_:      
0400                AND_:        
0400   D1                     POP   de   ;     Bitwise and the top 2 elements of the stack
0401   E1                     POP   hl   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   hl   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                PIPE_:       
040B                OR_:         
040B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
040C   E1                     POP   hl   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                CARET_:      
0414                XOR_:        
0414   D1                     POP   de   ; Bitwise XOR the top 2 elements of the stack
0415   E1                     POP   hl   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                PLUS_:       ; add the top 2 members of the stack
041D                ADD_:        
041D   D1                     POP   de   
041E   E1                     POP   hl   
041F   19                     ADD   hl,de   
0420   E5                     PUSH   hl   
0421   C3 6C 05               JP   carry   
0424                CALL_:       
0424   0A                     LD   A,(BC)   
0425   CD 49 03               CALL   lookupRef1   
0428   5E                     LD   E,(hl)   
0429   23                     INC   hl   
042A   56                     LD   D,(hl)   
042B   C3 5D 06               JP   go1   
042E                DOT_:        
042E   E1                     POP   hl   
042F   CD 3B 07               CALL   printDec   
0432                DOT2:        
0432   3E 20                  LD   A," "   
0434   CD 85 00               CALL   putChar   
0437   FD E9                  JP   (IY)   
0439                COMMA_:      ; print hexadecimal
0439                HDOT_:       
0439   E1                     POP   hl   
043A   CD 61 03               CALL   printhex   
043D   18 F3                  JR   dot2   
043F                QUOTE_:      ; Discard the top member of the stack
043F                DROP_:       
043F   E1                     POP   hl   
0440   FD E9                  JP   (IY)   
0442                DQUOTE_:      
0442                DUP_:        
0442   E1                     POP   hl   ; Duplicate the top member of the stack
0443   E5                     PUSH   hl   
0444   E5                     PUSH   hl   
0445   FD E9                  JP   (IY)   
0447                AT_:         ; Fetch the value from the address placed on the top of the stack
0447                FETCH_:      
0447   E1                     POP   hl   
0448                FETCH1:      
0448   5E                     LD   E,(hl)   
0449   23                     INC   hl   
044A   56                     LD   D,(hl)   
044B   D5                     PUSH   de   
044C   FD E9                  JP   (IY)   
044E                PERCENT_:      
044E                OVER_:       
044E   E1                     POP   hl   ; Duplicate 2nd element of the stack
044F   D1                     POP   de   
0450   D5                     PUSH   de   
0451   E5                     PUSH   hl   
0452   D5                     PUSH   de   ; and push it to top of stack
0453   FD E9                  JP   (IY)   
0455                SEMI_:       
0455                RET_:        
0455   CD D7 03               CALL   rpop   ; Restore Instruction pointer
0458   44 4D                  LD   BC,hl   
045A   FD E9                  JP   (IY)   
045C                TILDE_:      ; a b c -- b c a
045C                ROTATE_:      
045C   D1                     POP   de   ; a b                   de = c
045D   E1                     POP   hl   ; a                     hl = b
045E   E3                     EX   (SP),hl   ; b                     hl = a
045F   D5                     PUSH   de   ; b c
0460   E5                     PUSH   hl   ; b c a
0461   FD E9                  JP   (IY)   
0463                             ;  Left shift { is multiply by 2		
0463                LBRACE_:      
0463                SHL_:        
0463   E1                     POP   hl   ; Duplicate the top member of the stack
0464   29                     ADD   hl,hl   
0465   E5                     PUSH   hl   ; shift left fallthrough into plus_
0466   FD E9                  JP   (IY)   ; 
0468                             ;  Right shift } is a divide by 2		
0468                RBRACE_:      
0468                SHR_:        
0468   E1                     POP   hl   ; Get the top member of the stack
0469                SHR1:        
0469   CB 3C                  SRL   H   
046B   CB 1D                  RR   L   
046D   E5                     PUSH   hl   
046E   FD E9                  JP   (IY)   ; 
0470                BANG_:       ; Store the value at the address placed on the top of the stack
0470                STORE_:      
0470   E1                     POP   hl   
0471   D1                     POP   de   
0472   73                     LD   (hl),E   
0473   23                     INC   hl   
0474   72                     LD   (hl),D   
0475   FD E9                  JP   (IY)   
0477                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
0477                DOLLAR_:      
0477                SWAP_:       
0477   E1                     POP   hl   
0478   E3                     EX   (SP),hl   
0479   E5                     PUSH   hl   
047A   FD E9                  JP   (IY)   
047C                MINUS_:      ; Subtract the value 2nd on stack from top of stack
047C                SUB_:        
047C   03                     INC   bc   ; check if sign of a number
047D   0A                     LD   a,(bc)   
047E   0B                     DEC   bc   
047F   FE 30                  CP   "0"   
0481   38 05                  JR   c,sub1   
0483   FE 3A                  CP   "9"+1   
0485   DA BA 06               JP   c,num   
0488                SUB1:        
0488   D1                     POP   de   ; 
0489   E1                     POP   hl   ;      Entry point for INVert
048A                SUB2:        
048A   A7                     AND   A   ;      Entry point for NEGate
048B   ED 52                  SBC   hl,de   ; 
048D   E5                     PUSH   hl   ; 
048E   C3 6C 05               JP   carry   
0491                             ; 5
0491                EQ_:         
0491   E1                     POP   hl   
0492   D1                     POP   de   
0493   A7                     AND   A   ; reset the carry flag
0494   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0496   28 16                  JR   Z,equal   
0498   21 00 00               LD   hl,0   
049B   18 12                  JR   less   ; hl = 1
049D                GT_:         
049D   D1                     POP   de   
049E   E1                     POP   hl   
049F   18 02                  JR   cmp_   
04A1                LT_:         
04A1   E1                     POP   hl   
04A2   D1                     POP   de   
04A3                CMP_:        
04A3   A7                     AND   A   ; reset the carry flag
04A4   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
04A6   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04A8   21 00 00               LD   hl,0   
04AB   FA AF 04               JP   M,less   
04AE                EQUAL:       
04AE   2C                     INC   L   ; hl = 1
04AF                LESS:        
04AF   E5                     PUSH   hl   
04B0   FD E9                  JP   (IY)   
04B2                VAR_:        
04B2   0A                     LD   A,(BC)   
04B3   CD 4F 03               CALL   lookupRef2   
04B6   E5                     PUSH   hl   
04B7   FD E9                  JP   (IY)   
04B9                GRAVE_:      
04B9                STR:         
04B9   03                     INC   BC   
04BA                STR1:        
04BA   0A                     LD   A,(BC)   
04BB   03                     INC   BC   
04BC   FE 60                  CP   "`"   ; ` is the string terminator
04BE   28 05                  JR   Z,str2   
04C0   CD 85 00               CALL   putchar   
04C3   18 F5                  JR   str1   
04C5                STR2:        
04C5   0B                     DEC   BC   
04C6   FD E9                  JP   (IY)   
04C8                HASH_:       
04C8                HEX:         
04C8   21 00 00               LD   hl,0   ; Clear hl to accept the number
04CB                HEX1:        
04CB   03                     INC   BC   
04CC   0A                     LD   A,(BC)   ; Get the character which is a numeral
04CD   CB 77                  BIT   6,A   ; is it uppercase alpha?
04CF   CA D9 07               JP   Z,hex2   ; no a decimal
04D2   D6 07                  SUB   7   ; sub 7  to make $A - $F
04D4   C3 D9 07               JP   hex2   
04D7                LPAREN_:      
04D7                RPAREN_:      
04D7                NOP_:        
04D7   C3 BE 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
04DA                NUM_:        
04DA   C3 BA 06               JP   num   
04DD                LBRACK_:      
04DD   C3 83 07               JP   arrDef   
04E0                RBRACK_:      
04E0   C3 91 07               JP   arrEnd   
04E3                COLON_:      
04E3   C3 1A 07               JP   def   
04E6   18 1C        UNDERSCORE_:   JR   arrIndex   
04E8   18 21        STAR_:    JR   mul   
04EA   18 3B        SLASH_:   JR   div   
04EC                BSLASH_:      
04EC                             ;*******************************************************************
04EC                             ; Page 5 primitive routines
04EC                             ;*******************************************************************
04EC                             ;falls through
04EC                ALT:         ;=11
04EC   03                     INC   BC   
04ED   0A                     LD   A,(BC)   
04EE   21 5E 0B               LD   hl,altCodes   
04F1   D6 21                  SUB   "!"   
04F3   85                     ADD   A,L   
04F4   6F                     LD   L,A   
04F5                ALT2:        
04F5   7E                     LD   A,(hl)   ;       get low jump address
04F6   21 00 06               LD   hl,page6   
04F9   6F                     LD   L,A   
04FA   E9                     JP   (hl)   ;       Jump to routine
04FB                QUESTION_:      
04FB   CD 81 00               CALL   getchar   
04FE   26 00                  LD   H,0   
0500   6F                     LD   L,A   
0501   E5                     PUSH   hl   
0502   FD E9                  JP   (IY)   
0504                ARRINDEX:      
0504   E1                     POP   hl   ; hl = index
0505   D1                     POP   de   ; de = array
0506   29                     ADD   hl,hl   ; if data width = 2 then double
0507   19                     ADD   hl,de   ; add addr
0508   E5                     PUSH   hl   
0509   FD E9                  JP   (iy)   
050B                MUL:         ;=19
050B   D1                     POP   de   ; get first value
050C   E1                     POP   hl   
050D   C5                     PUSH   BC   ; Preserve the IP
050E   44                     LD   B,H   ; BC = 2nd value
050F   4D                     LD   C,L   
0510   21 00 00               LD   hl,0   
0513   3E 10                  LD   A,16   
0515                MUL2:        
0515   29                     ADD   hl,hl   
0516   CB 13                  RL   E   
0518   CB 12                  RL   D   
051A   30 04                  JR   NC,$+6   
051C   09                     ADD   hl,BC   
051D   30 01                  JR   NC,$+3   
051F   13                     INC   de   
0520   3D                     DEC   A   
0521   20 F2                  JR   NZ,mul2   
0523   C1                     POP   BC   ; Restore the IP
0524   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0525   FD E9                  JP   (IY)   
0527                DIV:         
0527   60 69                  LD   hl,bc   ; hl = IP
0529   C1                     POP   bc   ; bc = denominator
052A   E3                     EX   (sp),hl   ; save IP, hl = numerator
052B   7C                     LD   a,h   
052C   A8                     XOR   b   
052D   F5                     PUSH   af   
052E   A8                     XOR   b   
052F   F2 38 05               JP   p,absBC   
0532                             ;absHL
0532   AF                     XOR   a   
0533   95                     SUB   l   
0534   6F                     LD   l,a   
0535   9F                     SBC   a,a   
0536   94                     SUB   h   
0537   67                     LD   h,a   
0538                ABSBC:       
0538   A8                     XOR   b   
0539   F2 42 05               JP   p,$+9   
053C   AF                     XOR   a   
053D   91                     SUB   c   
053E   4F                     LD   c,a   
053F   9F                     SBC   a,a   
0540   90                     SUB   b   
0541   47                     LD   b,a   
0542   29                     ADD   hl,hl   
0543   3E 0F                  LD   a,15   
0545   11 00 00               LD   de,0   
0548   EB                     EX   de,hl   
0549   18 04                  JR   jumpin   
054B                LOOP1:       
054B   09                     ADD   hl,bc   ;--
054C                LOOP2:       
054C   3D                     DEC   a   ;4
054D   28 0E                  JR   z,EndSDiv   ;12|7
054F                JUMPIN:      
054F   CB 23                  SLA   e   ;8
0551   CB 12                  RL   d   ;8
0553   ED 6A                  ADC   hl,hl   ;15
0555   ED 42                  SBC   hl,bc   ;15
0557   38 F2                  JR   c,Loop1   ;23-2b
0559   1C                     INC   e   ;--
055A   C3 4C 05               JP   Loop2   ;--
055D                ENDSDIV:      
055D   F1                     POP   af   
055E   F2 67 05               JP   p,div10   
0561   AF                     XOR   a   
0562   93                     SUB   e   
0563   5F                     LD   e,a   
0564   9F                     SBC   a,a   
0565   92                     SUB   d   
0566   57                     LD   d,a   
0567                DIV10:       
0567   C1                     POP   bc   
0568   D5                     PUSH   de   ; quotient
0569   E5                     PUSH   hl   ; remainder
056A   FD E9                  JP   (iy)   
056C                             ;=57
056C                CARRY:       ;=10
056C   21 00 00               LD   hl,0   
056F   CB 15                  RL   l   
0571   22 86 0C               LD   (vCarry),hl   
0574   FD E9                  JP   (iy)   
0576                             ; **************************************************************************
0576                             ; Page 6 Alt primitives
0576                             ; **************************************************************************
0576                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   D6 20                  SUB   "a" - ((altVars - mintVars)/2)   
0603   87                     ADD   A,A   
0604   26 0C                  LD   H,msb(mintVars)   
0606   6F                     LD   L,A   
0607   E5                     PUSH   hl   
0608                ANOP_:       
0608   FD E9                  JP   (IY)   
060A                ANONDEF_:      ;= 7
060A   03                     INC   BC   
060B   ED 5B 90 0C            LD   de,(vHeapPtr)   ; start of defintion
060F   D5                     PUSH   de   
0610   C3 2A 07               JP   def1   
0613                ARRSIZE_:      
0613                ARRSIZE:      
0613   E1                     POP   hl   
0614   2B                     DEC   hl   ; msb size
0615   56                     LD   d,(hl)   
0616   2B                     DEC   hl   ; lsb size
0617   5E                     LD   e,(hl)   
0618   D5                     PUSH   de   
0619   FD E9                  JP   (iy)   
061B                CARRDEF_:      ; define a byte array
061B   3E 01                  LD   A,TRUE   
061D   C3 85 07               JP   arrDef1   
0620                CFETCH_:      
0620   E1                     POP   hl   
0621   16 00                  LD   D,0   
0623   5E                     LD   E,(hl)   
0624   D5                     PUSH   de   
0625   FD E9                  JP   (IY)   
0627                COMMENT_:      
0627   03                     INC   BC   ; point to next char
0628   0A                     LD   A,(BC)   
0629   FE 0D                  CP   "\r"   ; terminate at cr
062B   20 FA                  JR   NZ,comment_   
062D   0B                     DEC   BC   
062E   FD E9                  JP   (IY)   
0630                CSTORE_:      
0630   E1                     POP   hl   
0631   D1                     POP   de   
0632   73                     LD   (hl),E   
0633   FD E9                  JP   (IY)   
0635                DEPTH_:      
0635                DEPTH:       
0635   21 00 00               LD   hl,0   
0638   39                     ADD   hl,SP   
0639   EB                     EX   de,hl   
063A   21 00 0A               LD   hl,DSTACK   
063D   B7                     OR   A   
063E   ED 52                  SBC   hl,de   
0640   C3 69 04               JP   shr1   
0643                EMIT_:       
0643   E1                     POP   hl   
0644   7D                     LD   A,L   
0645   CD 85 00               CALL   putchar   
0648   FD E9                  JP   (IY)   
064A                EXEC_:       
064A   CD 4F 06               CALL   exec1   
064D   FD E9                  JP   (IY)   
064F                EXEC1:       
064F   E1                     POP   hl   
0650   E3                     EX   (SP),hl   
0651   E9                     JP   (hl)   
0652                EDITDEF_:      
0652   CD EA 06               CALL   editDef   
0655   FD E9                  JP   (IY)   
0657                PROMPT_:      
0657   CD AC 03               CALL   prompt   
065A   FD E9                  JP   (IY)   
065C                GO_:         ;\^
065C   D1                     POP   de   
065D                GO1:         
065D   7A                     LD   A,D   ; skip if destination address is null
065E   B3                     OR   E   
065F   28 0E                  JR   Z,go3   
0661   60 69                  LD   hl,BC   
0663   03                     INC   BC   ; read next char from source
0664   0A                     LD   A,(BC)   ; if ; to tail call optimise
0665   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
0667   28 03                  JR   Z,go2   
0669   CD CC 03               CALL   rpush   ; save Instruction Pointer
066C                GO2:         
066C   42 4B                  LD   BC,de   
066E   0B                     DEC   BC   
066F                GO3:         
066F   FD E9                  JP   (IY)   
0671                INPORT_:      ; \<
0671   E1                     POP   hl   
0672   79                     LD   A,C   
0673   4D                     LD   C,L   
0674   ED 68                  IN   L,(C)   
0676   26 00                  LD   H,0   
0678   4F                     LD   C,A   
0679   E5                     PUSH   hl   
067A   FD E9                  JP   (IY)   
067C                I_:          
067C   2A 30 0C               LD   hl,(vLoopSP)   
067F   E5                     PUSH   hl   
0680   FD E9                  JP   (IY)   
0682                J_:          ;=9
0682   2A 30 0C               LD   hl,(vLoopSP)   ;the address of j is 6 bytes more than i
0685   11 06 00               LD   de,6   
0688   19                     ADD   hl,de   
0689   E5                     PUSH   hl   
068A   FD E9                  JP   (IY)   
068C                NEWLN_:      
068C   CD B5 03               CALL   crlf   
068F   FD E9                  JP   (IY)   
0691                OUTPORT_:      
0691   E1                     POP   hl   
0692   59                     LD   E,C   
0693   4D                     LD   C,L   
0694   E1                     POP   hl   
0695   ED 69                  OUT   (C),L   
0697   4B                     LD   C,E   
0698   FD E9                  JP   (IY)   
069A                PRINTSTK_:      
069A                PRINTSTK:      ;=40
069A                             ; Mondo: \a@2- \- 1- ("@ \b@ \(,)(.) 2-) '
069A   CD E7 03               CALL   ENTER   
069D   60 3D 3E 20 60 5C 61 40 32 2D 20 5C 2D 20 31 2D 28 22 40 2E 32 2D 29 27 5C 4E 00 .CSTR   "`=> `\\a@2- \\- 1-(",$22,"@.2-)'\\N"   
06B8   FD E9                  JP   (IY)   
06BA                             ;*******************************************************************
06BA                             ; Page 5 primitive routines continued
06BA                             ;*******************************************************************
06BA                             ; ********************************************************************************
06BA                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in hl
06BA                             ; Read the first character.
06BA                             ;			
06BA                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
06BA                             ; and then added into the L register. (hl forms a 16-bit accumulator)
06BA                             ; Fetch the next character, if it is a number, multiply contents of hl by 10
06BA                             ; and then add in the next digit. Repeat this until a non-number character is
06BA                             ; detected. add in the final digit so that hl contains the converted number.
06BA                             ; push hl onto the stack and proceed to the dispatch routine.
06BA                             ; ********************************************************************************
06BA                NUM:         
06BA   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06BD   0A                     LD   a,(bc)   ; Get numeral or -
06BE   FE 2D                  CP   "-"   
06C0   20 01                  JR   nz,num0   
06C2   03                     INC   bc   ; move to next char, no flags affected
06C3                NUM0:        
06C3   08                     EX   af,af'   ; save zero flag = 0 for later
06C4                NUM1:        
06C4   0A                     LD   a,(bc)   ; read digit
06C5   D6 30                  SUB   "0"   ; less than 0?
06C7   38 13                  JR   c,num2   ; not a digit, exit loop
06C9   FE 0A                  CP   10   ; greater that 9?
06CB   30 0F                  JR   nc,num2   ; not a digit, exit loop
06CD   03                     INC   bc   ; inc IP
06CE   54 5D                  LD   de,hl   ; multiply hl * 10
06D0   29                     ADD   hl,hl   
06D1   29                     ADD   hl,hl   
06D2   19                     ADD   hl,de   
06D3   29                     ADD   hl,hl   
06D4   85                     ADD   a,l   ; add digit in a to hl
06D5   6F                     LD   l,a   
06D6   3E 00                  LD   a,0   
06D8   8C                     ADC   a,h   
06D9   67                     LD   h,a   
06DA   18 E8                  JR   num1   
06DC                NUM2:        
06DC   0B                     DEC   bc   
06DD   08                     EX   af,af'   ; restore zero flag
06DE   20 07                  JR   nz,num3   
06E0   EB                     EX   de,hl   ; negate the value of hl
06E1   21 00 00               LD   hl,0   
06E4   B7                     OR   a   ; jump to sub2
06E5   ED 52                  SBC   hl,de   
06E7                NUM3:        
06E7   E5                     PUSH   hl   ; Put the number on the stack
06E8   FD E9                  JP   (iy)   ; and process the next character
06EA                             ;*******************************************************************
06EA                             ; Subroutines
06EA                             ;*******************************************************************
06EA                EDITDEF:      ;=50 lookup up def based on number
06EA   E1                     POP   hl   ; pop ret address
06EB   E3                     EX   (SP),hl   ; swap with TOS
06EC   7D                     LD   A,L   
06ED   08                     EX   AF,AF'   
06EE   7D                     LD   A,L   
06EF   CD 43 03               CALL   lookupRef   
06F2   5E                     LD   E,(hl)   
06F3   23                     INC   hl   
06F4   56                     LD   D,(hl)   
06F5   7A                     LD   A,D   
06F6   B3                     OR   E   
06F7   21 00 08               LD   hl,TIB   
06FA   28 14                  JR   Z,editDef3   
06FC   3E 3A                  LD   A,":"   
06FE   CD E2 03               CALL   writeChar   
0701   08                     EX   AF,AF'   
0702   CD E2 03               CALL   writeChar   
0705   18 01                  JR   editDef2   
0707                EDITDEF1:      
0707   13                     INC   de   
0708                EDITDEF2:      
0708   1A                     LD   A,(de)   
0709   CD E2 03               CALL   writeChar   
070C   FE 3B                  CP   ";"   
070E   20 F7                  JR   NZ,editDef1   
0710                EDITDEF3:      
0710   11 00 08               LD   de,TIB   
0713   B7                     OR   A   
0714   ED 52                  SBC   hl,de   
0716   22 A8 0C               LD   (vTIBPtr),hl   
0719   C9                     RET      
071A                             ; **************************************************************************
071A                             ; def is used to create a colon definition
071A                             ; When a colon is detected, the next character (usually uppercase alpha)
071A                             ; is looked up in the vector table to get its associated code field address
071A                             ; This CFA is updated to point to the character after uppercase alpha
071A                             ; The remainder of the characters are then skipped until after a semicolon
071A                             ; is found.
071A                             ; ***************************************************************************
071A                DEF:         ; Create a colon definition
071A   03                     INC   BC   
071B   0A                     LD   A,(BC)   ; Get the next character
071C   32 8A 0C               LD   (vLastDef),A   
071F   CD 43 03               CALL   lookupRef   
0722   ED 5B 90 0C            LD   de,(vHeapPtr)   ; start of defintion
0726   73                     LD   (hl),E   ; Save low byte of address in CFA
0727   23                     INC   hl   
0728   72                     LD   (hl),D   ; Save high byte of address in CFA+1
0729   03                     INC   BC   
072A                DEF1:        ; Skip to end of definition
072A   0A                     LD   A,(BC)   ; Get the next character
072B   03                     INC   BC   ; Point to next character
072C   12                     LD   (de),A   
072D   13                     INC   de   
072E   FE 3B                  CP   ";"   ; Is it a semicolon
0730   28 02                  JR   Z,def2   ; end the definition
0732   18 F6                  JR   def1   ; get the next element
0734                DEF2:        
0734   0B                     DEC   BC   
0735                DEF3:        
0735   ED 53 90 0C            LD   (vHeapPtr),de   ; bump heap ptr to after definiton
0739   FD E9                  JP   (IY)   
073B                             ; hl = value
073B                PRINTDEC:      
073B   CB 7C                  BIT   7,h   
073D   28 0B                  JR   z,printDec2   
073F   3E 2D                  LD   a,"-"   
0741   CD 85 00               CALL   putchar   
0744   AF                     XOR   a   
0745   95                     SUB   l   
0746   6F                     LD   l,a   
0747   9F                     SBC   a,a   
0748   94                     SUB   h   
0749   67                     LD   h,a   
074A                PRINTDEC2:      
074A   C5                     PUSH   bc   
074B   0E 00                  LD   c,0   ; leading zeros flag = false
074D   11 F0 D8               LD   de,-10000   
0750   CD 6C 07               CALL   printDec4   
0753   11 18 FC               LD   de,-1000   
0756   CD 6C 07               CALL   printDec4   
0759   11 9C FF               LD   de,-100   
075C   CD 6C 07               CALL   printDec4   
075F   1E F6                  LD   e,-10   
0761   CD 6C 07               CALL   printDec4   
0764   0C                     INC   c   ; flag = true for at least digit
0765   1E FF                  LD   e,-1   
0767   CD 6C 07               CALL   printDec4   
076A   C1                     POP   bc   
076B   C9                     RET      
076C                PRINTDEC4:      
076C   06 2F                  LD   b,"0"-1   
076E                PRINTDEC5:      
076E   04                     INC   b   
076F   19                     ADD   hl,de   
0770   38 FC                  JR   c,printDec5   
0772   ED 52                  SBC   hl,de   
0774   3E 30                  LD   a,"0"   
0776   B8                     CP   b   
0777   20 05                  JR   nz,printDec6   
0779   AF                     XOR   a   
077A   B1                     OR   c   
077B   C8                     RET   z   
077C   18 01                  JR   printDec7   
077E                PRINTDEC6:      
077E   0C                     INC   c   
077F                PRINTDEC7:      
077F   78                     LD   a,b   
0780   C3 85 00               JP   putchar   
0783                ARRDEF:      
0783   3E 00                  LD   A,FALSE   
0785                ARRDEF1:      
0785   32 88 0C               LD   (vByteMode),A   
0788   21 00 00               LD   hl,0   
078B   39                     ADD   hl,sp   ; save
078C   CD CC 03               CALL   rpush   
078F   FD E9                  JP   (iy)   
0791                ARREND:      
0791   ED 43 34 0C            LD   (vTemp1),bc   ; save IP
0795   CD D7 03               CALL   rpop   
0798   22 36 0C               LD   (vTemp2),hl   ; save old SP
079B   54 5D                  LD   de,hl   ; de = hl = old SP
079D   B7                     OR   a   
079E   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
07A0   CB 3C                  SRL   h   ; num items = num bytes / 2
07A2   CB 1D                  RR   l   
07A4   44 4D                  LD   bc,hl   ; bc = count
07A6   2A 90 0C               LD   hl,(vHeapPtr)   ; hl = array[-4]
07A9   71                     LD   (hl),c   ; write num items in length word
07AA   23                     INC   hl   
07AB   70                     LD   (hl),b   
07AC   23                     INC   hl   ; hl = array[0], bc = count
07AD                             ; de = old SP, hl = array[0], bc = count
07AD   18 11                  JR   arrayEnd2   
07AF                ARRAYEND1:      
07AF   0B                     DEC   bc   ; dec items count
07B0   1B                     DEC   de   
07B1   1B                     DEC   de   
07B2   1A                     LD   a,(de)   ; a = lsb of stack item
07B3   77                     LD   (hl),a   ; write lsb of array item
07B4   23                     INC   hl   ; move to msb of array item
07B5   3A 88 0C               LD   a,(vByteMode)   ; vByteMode=1?
07B8   3D                     DEC   a   
07B9   28 05                  JR   z,arrayEnd2   
07BB   13                     INC   de   
07BC   1A                     LD   a,(de)   ; a = msb of stack item
07BD   1B                     DEC   de   
07BE   77                     LD   (hl),a   ; write msb of array item
07BF   23                     INC   hl   ; move to next word in array
07C0                ARRAYEND2:      
07C0   79                     LD   a,c   ; if not zero loop
07C1   B0                     OR   b   
07C2   20 EB                  JR   nz,arrayEnd1   
07C4   EB                     EX   de,hl   ; de = end of array
07C5   2A 36 0C               LD   hl,(vTemp2)   
07C8   F9                     LD   sp,hl   ; SP = old SP
07C9   2A 90 0C               LD   hl,(vHeapPtr)   ; de = array[-2]
07CC   23                     INC   hl   
07CD   23                     INC   hl   
07CE   E5                     PUSH   hl   ; return array[0]
07CF   ED 53 90 0C            LD   (vHeapPtr),de   ; move heap* to end of array
07D3   ED 4B 34 0C            LD   bc,(vTemp1)   ; restore IP
07D7   FD E9                  JP   (iy)   
07D9                             ; hex continued
07D9                HEX2:        
07D9   D6 30                  SUB   $30   ; Form decimal digit
07DB   DA DC 06               JP   C,num2   
07DE   FE 10                  CP   $0F+1   
07E0   D2 DC 06               JP   NC,num2   
07E3   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
07E4   29                     ADD   hl,hl   ; 4X
07E5   29                     ADD   hl,hl   ; 8X
07E6   29                     ADD   hl,hl   ; 16X
07E7   85                     ADD   A,L   ; add into bottom of hl
07E8   6F                     LD   L,A   ; 
07E9   C3 CB 04               JP   hex1   
07EC                DSIZE:    EQU   $80   
07EC                RSIZE:    EQU   $80   
07EC                LSIZE:    EQU   $80   
07EC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
07EC                VARS_SIZE:   EQU   26*2*2   ; A..Z, a..z words
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80-32-1-1   
0B5E                ALTCODES:      
0B5E                          DS   $80-32-1-5   
0BB8                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                TBPTR:    DS   2   ; reserved for tests
0C34                VTEMP1:   DS   2   ; 
0C36                VTEMP2:   DS   2   ; 
0C38                RST08:    DS   2   
0C3A                RST10:    DS   2   
0C3C                RST18:    DS   2   
0C3E                RST20:    DS   2   
0C40                RST28:    DS   2   
0C42                RST30:    DS   2   ; 
0C44                BAUD:     DS   2   ; 
0C46                INTVEC:   DS   2   ; 
0C48                NMIVEC:   DS   2   ; 
0C4A                GETCVEC:   DS   2   ; 
0C4C                PUTCVEC:   DS   2   ; 
0C4E                          DS   26*2   
0C82                ALTVARS:      
0C82                VS0:      DS   2   ; a
0C84                VBASE16:   DS   2   ; b
0C86                VCARRY:   DS   2   ; c
0C88                VBYTEMODE:   DS   2   ; d
0C8A                VLASTDEF:   DS   2   ; e
0C8C                          DS   2   ; f
0C8E                          DS   2   ; g
0C90                VHEAPPTR:   DS   2   ; h
0C92                          DS   2   ; i
0C94                          DS   2   ; j
0C96                          DS   2   ; k
0C98                          DS   2   ; l
0C9A                          DS   2   ; m
0C9C                          DS   2   ; n
0C9E                          DS   2   ; o
0CA0                          DS   2   ; p
0CA2                          DS   2   ; q
0CA4                          DS   2   ; r
0CA6                          DS   2   ; s
0CA8                VTIBPTR:   DS   2   ; t
0CAA                          DS   2   ; u
0CAC                          DS   2   ; v
0CAE                          DS   2   ; w
0CB0                          DS   2   ; x
0CB2                          DS   2   ; y
0CB4                          DS   2   ; z
0CB6                             ; .align $40
0CB6                VARS:     DS   VARS_SIZE   
0D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 41 IN MAIN.asm
RAMSTART:           0800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 8 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 96 IN IOSerial.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 250 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               0001 DEFINED AT LINE 12 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 13 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
EMPTY:              0000 DEFINED AT LINE 14 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 47 IN MAIN.asm
REEDIT_:            0180 DEFINED AT LINE 49 IN MAIN.asm
EDIT_:              0187 DEFINED AT LINE 52 IN MAIN.asm
LIST_:              0191 DEFINED AT LINE 55 IN MAIN.asm
PRINTSTACK_:        01AC DEFINED AT LINE 58 IN MAIN.asm
IOPCODES:           01B2 DEFINED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
IALTCODES:          01DC DEFINED AT LINE 108 IN MAIN.asm
BACKSPACE:          0210 DEFINED AT LINE 204 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
START:              0220 DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 6
INTERPRET:          0235 DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
INTERPRET2:         023F DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
INTERPRET3:         0247 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
INTERPRET4:         024D DEFINED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
WAITCHAR:           0252 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
MACRO:              0281 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
WAITCHAR1:          0292 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
WAITCHAR3:          02A0 DEFINED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
WAITCHAR4:          02B6 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
NEXT:               02BE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
EXIT:               02D2 DEFINED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
ETX:                02DC DEFINED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
ETX1:               02E5 DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 359 IN MAIN.asm
INIT:               02E8 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
INIT1:              02FB DEFINED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
INITOPS:            031F DEFINED AT LINE 390 IN MAIN.asm
INITOPS1:           0328 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
INITOPS2:           0338 DEFINED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
INITOPS2A:          033D DEFINED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 415 IN MAIN.asm
LOOKUPREF:          0343 DEFINED AT LINE 418 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
LOOKUPREF0:         0345 DEFINED AT LINE 420 IN MAIN.asm
LOOKUPREF1:         0349 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
LOOKUPREF2:         034F DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
LOOKUPREF3:         0353 DEFINED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
PRINTHEX:           0361 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
PRINTHEX2:          036C DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
PRINTHEX3:          0375 DEFINED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
NESTING:            0380 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
NESTING1A:          038B DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
NESTING1:           038E DEFINED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
NESTING2:           039D DEFINED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
NESTING3:           039F DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
NESTING4:           03AA DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
PROMPT:             03AC DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
CRLF:               03B5 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
PRINTSTR:           03BC DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
PUTSTR0:            03C3 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
PUTSTR:             03C7 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
RPUSH:              03CC DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
RPOP:               03D7 DEFINED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
RPOP2:              03E1 DEFINED AT LINE 549 IN MAIN.asm
WRITECHAR:          03E2 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
ENTER:              03E7 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
PAGE4:              0400 DEFINED AT LINE 569 IN MAIN.asm
AMPER_:             0400 DEFINED AT LINE 571 IN MAIN.asm
AND_:               0400 DEFINED AT LINE 572 IN MAIN.asm
AND1:               0407 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PIPE_:              040B DEFINED AT LINE 586 IN MAIN.asm
OR_:                040B DEFINED AT LINE 587 IN MAIN.asm
CARET_:             0414 DEFINED AT LINE 597 IN MAIN.asm
XOR_:               0414 DEFINED AT LINE 598 IN MAIN.asm
PLUS_:              041D DEFINED AT LINE 608 IN MAIN.asm
ADD_:               041D DEFINED AT LINE 609 IN MAIN.asm
CALL_:              0424 DEFINED AT LINE 616 IN MAIN.asm
DOT_:               042E DEFINED AT LINE 624 IN MAIN.asm
DOT2:               0432 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
COMMA_:             0439 DEFINED AT LINE 632 IN MAIN.asm
HDOT_:              0439 DEFINED AT LINE 633 IN MAIN.asm
QUOTE_:             043F DEFINED AT LINE 638 IN MAIN.asm
DROP_:              043F DEFINED AT LINE 639 IN MAIN.asm
DQUOTE_:            0442 DEFINED AT LINE 643 IN MAIN.asm
DUP_:               0442 DEFINED AT LINE 644 IN MAIN.asm
AT_:                0447 DEFINED AT LINE 649 IN MAIN.asm
FETCH_:             0447 DEFINED AT LINE 650 IN MAIN.asm
FETCH1:             0448 DEFINED AT LINE 652 IN MAIN.asm
PERCENT_:           044E DEFINED AT LINE 659 IN MAIN.asm
OVER_:              044E DEFINED AT LINE 660 IN MAIN.asm
SEMI_:              0455 DEFINED AT LINE 668 IN MAIN.asm
RET_:               0455 DEFINED AT LINE 669 IN MAIN.asm
TILDE_:             045C DEFINED AT LINE 674 IN MAIN.asm
ROTATE_:            045C DEFINED AT LINE 675 IN MAIN.asm
LBRACE_:            0463 DEFINED AT LINE 684 IN MAIN.asm
SHL_:               0463 DEFINED AT LINE 685 IN MAIN.asm
RBRACE_:            0468 DEFINED AT LINE 692 IN MAIN.asm
SHR_:               0468 DEFINED AT LINE 693 IN MAIN.asm
SHR1:               0469 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
BANG_:              0470 DEFINED AT LINE 701 IN MAIN.asm
STORE_:             0470 DEFINED AT LINE 702 IN MAIN.asm
DOLLAR_:            0477 DEFINED AT LINE 711 IN MAIN.asm
SWAP_:              0477 DEFINED AT LINE 712 IN MAIN.asm
MINUS_:             047C DEFINED AT LINE 718 IN MAIN.asm
SUB_:               047C DEFINED AT LINE 719 IN MAIN.asm
SUB1:               0488 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
SUB2:               048A DEFINED AT LINE 730 IN MAIN.asm
EQ_:                0491 DEFINED AT LINE 736 IN MAIN.asm
GT_:                049D DEFINED AT LINE 745 IN MAIN.asm
LT_:                04A1 DEFINED AT LINE 750 IN MAIN.asm
CMP_:               04A3 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
EQUAL:              04AE DEFINED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
LESS:               04AF DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
VAR_:               04B2 DEFINED AT LINE 766 IN MAIN.asm
GRAVE_:             04B9 DEFINED AT LINE 772 IN MAIN.asm
STR:                04B9 DEFINED AT LINE 773 IN MAIN.asm
STR1:               04BA DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
STR2:               04C5 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
HASH_:              04C8 DEFINED AT LINE 787 IN MAIN.asm
HEX:                04C8 DEFINED AT LINE 788 IN MAIN.asm
HEX1:               04CB DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
LPAREN_:            04D7 DEFINED AT LINE 798 IN MAIN.asm
RPAREN_:            04D7 DEFINED AT LINE 799 IN MAIN.asm
NOP_:               04D7 DEFINED AT LINE 800 IN MAIN.asm
NUM_:               04DA DEFINED AT LINE 803 IN MAIN.asm
LBRACK_:            04DD DEFINED AT LINE 805 IN MAIN.asm
RBRACK_:            04E0 DEFINED AT LINE 807 IN MAIN.asm
COLON_:             04E3 DEFINED AT LINE 809 IN MAIN.asm
UNDERSCORE_:        04E6 DEFINED AT LINE 812 IN MAIN.asm
STAR_:              04E8 DEFINED AT LINE 813 IN MAIN.asm
SLASH_:             04EA DEFINED AT LINE 814 IN MAIN.asm
BSLASH_:            04EC DEFINED AT LINE 815 IN MAIN.asm
ALT:                04EC DEFINED AT LINE 821 IN MAIN.asm
ALT2:               04F5 DEFINED AT LINE 828 IN MAIN.asm
QUESTION_:          04FB DEFINED AT LINE 834 IN MAIN.asm
ARRINDEX:           0504 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
MUL:                050B DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
MUL2:               0515 DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
DIV:                0527 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
ABSBC:              0538 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
LOOP1:              054B DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
LOOP2:              054C DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
JUMPIN:             054F DEFINED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
ENDSDIV:            055D DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
DIV10:              0567 DEFINED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
CARRY:              056C DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
PAGE6:              0600 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
ALTVAR_:            0600 DEFINED AT LINE 944 IN MAIN.asm
ANOP_:              0608 DEFINED AT LINE 951 IN MAIN.asm
ANONDEF_:           060A DEFINED AT LINE 954 IN MAIN.asm
ARRSIZE_:           0613 DEFINED AT LINE 960 IN MAIN.asm
ARRSIZE:            0613 DEFINED AT LINE 961 IN MAIN.asm
CARRDEF_:           061B DEFINED AT LINE 970 IN MAIN.asm
CFETCH_:            0620 DEFINED AT LINE 974 IN MAIN.asm
COMMENT_:           0627 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
CSTORE_:            0630 DEFINED AT LINE 989 IN MAIN.asm
DEPTH_:             0635 DEFINED AT LINE 995 IN MAIN.asm
DEPTH:              0635 DEFINED AT LINE 996 IN MAIN.asm
EMIT_:              0643 DEFINED AT LINE 1005 IN MAIN.asm
EXEC_:              064A DEFINED AT LINE 1011 IN MAIN.asm
EXEC1:              064F DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
EDITDEF_:           0652 DEFINED AT LINE 1019 IN MAIN.asm
PROMPT_:            0657 DEFINED AT LINE 1023 IN MAIN.asm
GO_:                065C DEFINED AT LINE 1028 IN MAIN.asm
GO1:                065D DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
GO2:                066C DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
GO3:                066F DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
INPORT_:            0671 DEFINED AT LINE 1046 IN MAIN.asm
I_:                 067C DEFINED AT LINE 1056 IN MAIN.asm
J_:                 0682 DEFINED AT LINE 1061 IN MAIN.asm
NEWLN_:             068C DEFINED AT LINE 1068 IN MAIN.asm
OUTPORT_:           0691 DEFINED AT LINE 1072 IN MAIN.asm
PRINTSTK_:          069A DEFINED AT LINE 1081 IN MAIN.asm
PRINTSTK:           069A DEFINED AT LINE 1082 IN MAIN.asm
NUM:                06BA DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
NUM0:               06C3 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
NUM1:               06C4 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
NUM2:               06DC DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
NUM3:               06E7 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
EDITDEF:            06EA DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
EDITDEF1:           0707 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
EDITDEF2:           0708 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
EDITDEF3:           0710 DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
DEF:                071A DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
DEF1:               072A DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
DEF2:               0734 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
DEF3:               0735 DEFINED AT LINE 1208 IN MAIN.asm
PRINTDEC:           073B DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
PRINTDEC2:          074A DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
PRINTDEC4:          076C DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
PRINTDEC5:          076E DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
PRINTDEC6:          077E DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
PRINTDEC7:          077F DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
ARRDEF:             0783 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
ARRDEF1:            0785 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
ARREND:             0791 DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ARRAYEND1:          07AF DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ARRAYEND2:          07C0 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
HEX2:               07D9 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
DSIZE:              0080 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 12 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
VARS_SIZE:          0068 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 78 IN ram.asm
TIB:                0800 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
RSTACK:             0980 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 367 IN MAIN.asm
DSTACK:             0A00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 214 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
STACK:              0A00 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
LSTACK:             0A80 DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 365 IN MAIN.asm
OPCODES:            0B00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 392 IN MAIN.asm
ALTCODES:           0B5E DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 824 IN MAIN.asm
MINTVARS:           0C00 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 946 IN MAIN.asm
VLOOPSP:            0C30 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
TBPTR:              0C32 DEFINED AT LINE 31 IN ram.asm
VTEMP1:             0C34 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
VTEMP2:             0C36 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
RST08:              0C38 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              0C3A DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              0C3C DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              0C3E DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              0C40 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              0C42 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               0C44 DEFINED AT LINE 41 IN ram.asm
INTVEC:             0C46 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             0C48 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            0C4A DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            0C4C DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
ALTVARS:            0C82 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
VS0:                0C82 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 377 IN MAIN.asm
VBASE16:            0C84 DEFINED AT LINE 51 IN ram.asm
VCARRY:             0C86 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 934 IN MAIN.asm
VBYTEMODE:          0C88 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
VLASTDEF:           0C8A DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
VHEAPPTR:           0C90 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
VTIBPTR:            0CA8 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
VARS:               0CB6 DEFINED AT LINE 78 IN ram.asm
                    > USED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
HEAP:               0D1E DEFINED AT LINE 80 IN ram.asm
                    > USED AT LINE 380 IN MAIN.asm
